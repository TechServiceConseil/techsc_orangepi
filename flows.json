[
    {
        "id": "58612799aa277ac1",
        "type": "tab",
        "label": "Installation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "57297ea9585b5f93",
        "type": "tab",
        "label": "Dahsboard",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "ebafe26feeec49ee",
        "type": "tab",
        "label": "3D view",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b21e8c38dec5d4ca",
        "type": "tab",
        "label": "Assistant web",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "c464cce32785f35b",
        "type": "tab",
        "label": "Camera and Mic",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28793e94f444a9a6",
        "type": "tab",
        "label": "Sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4318d1d99e7fe2da",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b52d06897a68ca8c",
        "type": "tab",
        "label": "Text editor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cda9a4b5dd195f96",
        "type": "tab",
        "label": "Utility",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11571c3a0d218a3e",
        "type": "tab",
        "label": "Wordlmap",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "2acb5f6dedaa6446",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9ede64b79636f3da",
        "type": "tab",
        "label": "Dolibarr listener",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5030d00b88df4be5",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "1c3881de7afa11d5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 320,
                "wires": [
                    {
                        "id": "1c3881de7afa11d5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "test",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a85c93b74d9f6110",
        "type": "subflow",
        "name": "Manage npm package",
        "info": "",
        "category": "Administration",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "65a17d791a657925"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2880,
                "y": 640,
                "wires": [
                    {
                        "id": "f0c7f88db9a0a39f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "path",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "packageName",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-inbox",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action",
                "type": "str",
                "value": "install",
                "ui": {
                    "icon": "font-awesome/fa-plus-circle",
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Install"
                                },
                                "v": "install"
                            },
                            {
                                "l": {
                                    "en-US": "Uninstall"
                                },
                                "v": "uninstall"
                            },
                            {
                                "l": {
                                    "en-US": "Check"
                                },
                                "v": "list --depth=0"
                            },
                            {
                                "l": {
                                    "en-US": "Check with dependencies"
                                },
                                "v": "list"
                            }
                        ]
                    }
                }
            },
            {
                "name": "save",
                "type": "bool",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-save",
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "saveInDependencies",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "removeIfVulnerabilityFound",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "safeMode",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#A6BBCF",
        "inputLabels": [
            "{path, packageName}"
        ],
        "outputLabels": [
            "payload and log"
        ]
    },
    {
        "id": "330978c5.bafdb8",
        "type": "subflow",
        "name": "Rhasspy converse",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "857445a7c5035b2c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 140,
                "wires": [
                    {
                        "id": "cf5b409e.56ba4",
                        "port": 0
                    },
                    {
                        "id": "b62d4cc82701a712",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Protocol",
                "type": "str",
                "value": "http",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "HTTPS"
                                },
                                "v": "https"
                            },
                            {
                                "l": {
                                    "en-US": "HTTP"
                                },
                                "v": "http"
                            }
                        ]
                    }
                }
            },
            {
                "name": "Host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "Port",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "Volume",
                "type": "str",
                "value": ""
            },
            {
                "name": "Repeat",
                "type": "str",
                "value": ""
            },
            {
                "name": "SiteId",
                "type": "str",
                "value": ""
            },
            {
                "name": "Language",
                "type": "str",
                "value": ""
            },
            {
                "name": "TimeOut",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#5B6984",
        "icon": "node-red-dashboard/ui_template.png"
    },
    {
        "id": "9bc00d62.26d47",
        "type": "subflow",
        "name": "Rhasspy Out",
        "info": "This flow gonna split the sting in sentences, that way it's faster maybe split with \",\" can be more faster but more hard to handle too",
        "category": "Rhasspy",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "ccd8aea60135bae1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 680,
                "wires": [
                    {
                        "id": "c1453d6cf2e1de5b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "host",
                "type": "str",
                "value": ""
            },
            {
                "name": "port",
                "type": "str",
                "value": ""
            },
            {
                "name": "volume",
                "type": "str",
                "value": "1",
                "ui": {
                    "icon": "font-awesome/fa-volume-up",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "protocol",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "HTTPS"
                                },
                                "v": "https"
                            },
                            {
                                "l": {
                                    "en-US": "HTTP"
                                },
                                "v": "http"
                            }
                        ]
                    }
                }
            },
            {
                "name": "language",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#5B6984",
        "icon": "font-awesome/fa-angle-left"
    },
    {
        "id": "556a42b9.3f02cc",
        "type": "subflow",
        "name": "Rhasspy Monologue",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 60,
                "y": 840,
                "wires": [
                    {
                        "id": "247cf4f2.c460fc"
                    },
                    {
                        "id": "211e6f10.04b2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2040,
                "y": 2120,
                "wires": [
                    {
                        "id": "deb80190.a3891",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#5B6984",
        "icon": "font-awesome/fa-angle-right"
    },
    {
        "id": "8b17cbb5aaac470d",
        "type": "subflow",
        "name": "Save sentence",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "e4ce38940a9b2cf2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1700,
                "y": 280,
                "wires": [
                    {
                        "id": "44b2992861fc1d2d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "protocol",
                "type": "str",
                "value": "http",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "http"
                                },
                                "v": "http"
                            },
                            {
                                "l": {
                                    "en-US": "https"
                                },
                                "v": "https"
                            }
                        ]
                    }
                }
            },
            {
                "name": "host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "path",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "GET"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "POST"
                                },
                                "v": "post"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#5B6984",
        "inputLabels": [
            "Slot's value"
        ],
        "outputLabels": [
            "Rhasspy's response"
        ]
    },
    {
        "id": "0b3044d14d300449",
        "type": "subflow",
        "name": "Check slot",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "b60e0435bc78391c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2080,
                "y": 140,
                "wires": [
                    {
                        "id": "295175296887a62f",
                        "port": 0
                    },
                    {
                        "id": "9ce52eff960d26ac",
                        "port": 1
                    },
                    {
                        "id": "2c64b89740e471bd",
                        "port": 0
                    },
                    {
                        "id": "934a1451187e6306",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "protocol",
                "type": "str",
                "value": "http",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "http"
                                },
                                "v": "http"
                            },
                            {
                                "l": {
                                    "en-US": "https"
                                },
                                "v": "https"
                            }
                        ]
                    }
                }
            },
            {
                "name": "host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "path",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "slot",
                "type": "json",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "saveDifferences",
                "type": "bool",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-save",
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#5B6984",
        "inputLabels": [
            "Slot's value"
        ],
        "outputLabels": [
            "Rhasspy's response"
        ]
    },
    {
        "id": "88600a96538506de",
        "type": "subflow",
        "name": "Get slot",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "c1948606845ef0af"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 320,
                "wires": [
                    {
                        "id": "3a6182278f2e10a3",
                        "port": 0
                    },
                    {
                        "id": "da62f9af4341092b",
                        "port": 0
                    },
                    {
                        "id": "d41a60b8b02cb94b",
                        "port": 0
                    },
                    {
                        "id": "c68e9bc3b96ce274",
                        "port": 0
                    },
                    {
                        "id": "a1f78cdfa3073ead",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "protocol",
                "type": "str",
                "value": "http",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "http"
                                },
                                "v": "http"
                            },
                            {
                                "l": {
                                    "en-US": "https"
                                },
                                "v": "https"
                            }
                        ]
                    }
                }
            },
            {
                "name": "host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "path",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#5B6984",
        "inputLabels": [
            "Slot's value"
        ],
        "outputLabels": [
            "Rhasspy's response"
        ]
    },
    {
        "id": "b726d2ccc1e4b848",
        "type": "subflow",
        "name": "Train rhasspy",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 320,
                "y": 260,
                "wires": [
                    {
                        "id": "0fc4d854894af185"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1200,
                "y": 260,
                "wires": [
                    {
                        "id": "61f0fac318085166",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "protocol",
                "type": "str",
                "value": "http",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "http"
                                },
                                "v": "http"
                            },
                            {
                                "l": {
                                    "en-US": "https"
                                },
                                "v": "https"
                            }
                        ]
                    }
                }
            },
            {
                "name": "host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#5B6984"
    },
    {
        "id": "8555359a6f46144d",
        "type": "subflow",
        "name": "Save slot",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "ea4922baa000238c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 380,
                "wires": [
                    {
                        "id": "45e25ac496b49953",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "protocol",
                "type": "str",
                "value": "http",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "http"
                                },
                                "v": "http"
                            },
                            {
                                "l": {
                                    "en-US": "https"
                                },
                                "v": "https"
                            }
                        ]
                    }
                }
            },
            {
                "name": "host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "path",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "overwrite",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-bomb",
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#5B6984",
        "inputLabels": [
            "Slot's value"
        ],
        "outputLabels": [
            "Rhasspy's response"
        ]
    },
    {
        "id": "cb421e9f379bf642",
        "type": "subflow",
        "name": "Get intent from text",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "d3a6212ee87ebedc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 80,
                "wires": [
                    {
                        "id": "d2eb30931ceda683",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "protocol",
                "type": "str",
                "value": "http",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "http"
                                },
                                "v": "http"
                            },
                            {
                                "l": {
                                    "en-US": "https"
                                },
                                "v": "https"
                            }
                        ]
                    }
                }
            },
            {
                "name": "host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "args",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#5B6984",
        "inputLabels": [
            "Slot's value"
        ],
        "outputLabels": [
            "Rhasspy's response"
        ]
    },
    {
        "id": "653ca3b33715d85b",
        "type": "subflow",
        "name": "Get unknown words",
        "info": "",
        "category": "Rhasspy",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "e032c8db4a02abe7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 80,
                "wires": [
                    {
                        "id": "77355a2d01d5aeee",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "protocol",
                "type": "str",
                "value": "http",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "http"
                                },
                                "v": "http"
                            },
                            {
                                "l": {
                                    "en-US": "https"
                                },
                                "v": "https"
                            }
                        ]
                    }
                }
            },
            {
                "name": "host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#5B6984",
        "inputLabels": [
            "Slot's value"
        ],
        "outputLabels": [
            "Rhasspy's response"
        ]
    },
    {
        "id": "e0b88d23ec56febb",
        "type": "subflow",
        "name": "Get objects",
        "info": "## **Editor properties to use for each object type**\n\n- **global properties :**\n    - sortField\n    - sortOrder\n    - limit\n    - page\n    - category\n    - sqlFilters\n        - From Dolibarr documentation :  \n            - Other criteria to filter answers separated by a comma. Syntax example \"(t.tobuy:=:0) and (t.tosell:=:1)\"\n        - From this subflow :  \n            - Use a array with one object for each filter like this one\n                <code>msg.sqlFilters: [  \n                            {  \n                                \"attribute\": \"ref\",  \n                                \"compare\": \"=\",  \n                                \"value\": 18  \n                            },  \n                        {  \n                            \"operation\": \"and\",  \n                            \"attribute\": \"ref\",  \n                            \"compare\": \"=\"  \n                            \"value\": 18  \n                        }  \n                ]</code>\n            - Note the presence of a additional attribute for the second message\n            - You can still pass the Dolibarr default syntax if you pass a string instead of an array   \n&nbsp;\n    - **No supplementary field for :**\n        - bankAccounts\n        - boms\n        - category  \n&nbsp;\n    - **The following properties IS NOT CONTAIN the following type :**  \n        - category\n            - boms\n            - documents\n            - invoices\n            - knowledgeManagement\n            - mos\n            - orders\n            - recruitment/candidature\n            - recruitment/jobPosition\n            - shipments\n            - stockMovements\n            - supplierOrders\n            - supplierInvoices\n            - tasks  \n&nbsp;\n    - **The following types DO NOT CONTAIN the following properties :**\n        - documents\n            - limit\n            - page\n            - sqlFilters  \n&nbsp;\n- **agendaEvents :**\n    - userIds\n        - User ids filter field (owners of event). Example: '1' or '1,2,3'  \n&nbsp;\n- **categories**\n    - type\n        - From Dolibarr documentation :\n            - Type of category ('member', 'customer', 'supplier', 'product', 'contact')\n        - For this subflow by techsc.fr :\n            For this subflow by techsc.fr : \n            - You can pass an array of int like that :  \n            <code>\n            [1,2,9]\n            </code>\n            - You **CAN NOT PASS** the string like the Dolibarr documentation say **BECAUSE THIS WAY IS BETTER**.\n            Dolibarr filter with an sql filter on the column \"type\" in the database. So i do that directly. Below you \n            can this the mapping:\n                - 0: service\n                - 1: product\n                - 2: client/prospect\n                - 3: member\n                - 4: contact\n                - 5: bank\n                - 6: project\n                - 7: user\n                - 8: I guess it correspond with the table categorie_lang but i didn't find where add that categorie\n                - 9: warehouse\n                - 10: event\n                - 11: website page\n            \n\n&nbsp;\n- **contacts :**\n    - thirdpartyIds\n        - From Dolibarr documentation :\n            - Thirdparty ids to filter contacts of (example '1' or '1,2,3')\n        - For this subflow by techsc.fr : \n            - You can pass an array of int like that :  \n            <code>\n            [1,2,9]\n            </code>\n            - You can pass the string like the Dolibarr documentation say.\n    - includeCount\n        - From Dolibarr documentation :\n            - Count and return also number of elements the contact is used as a link for\n    - includeRole  \n&nbsp;\n- **documents :**\n    - modulePart\n    - id\n    - ref  \n&nbsp;\n- **invoices :**\n    - thirdpartyIds\n    - status\n        - From Dolibarr documentation :\n            - Filter by invoice status : draft | unpaid | paid | cancelled  \n&nbsp;\n- **orders :**\n    - thirdpartyIds  \n&nbsp;\n- **products :**\n    - mode\n        - From Dolibarr documentation :\n            - Use this param to filter list (0 for all, 1 for only product, 2 for only service)\n    - variantFilter\n        - From Dolibarr documentation :\n            - Use this param to filter list (0 = all, 1=products without variants, 2=parent of variants, 3=variants only)  \n    - idsOnly\n    - paginationData\n    - includeStockData\n&nbsp;\n- **projects :**\n    - thirdpartyIds  \n&nbsp;\n- **proposals :**\n    - thirdpartyIds  \n&nbsp;\n- **supplierInvoices :**\n    - thirdpartyIds\n    - status\n        - From Dolibarr documentation :\n            - Filter by invoice status : draft | unpaid | paid | cancelled  \n&nbsp;\n- **supplierOrders :**\n    - thirdpartyIds\n    - status\n        - From Dolibarr documentation :\n            - Filter by order status : draft | validated | approved | running | received_start | received_end | cancelled | refused\n    - productIds\n        - From Dolibarr documentation :\n            - Thirdparty ids to filter orders of (example '1' or '1,2,3')\n        - For this subflow by techsc.fr : \n            - You can pass an array of int like that :  \n            <code>\n            [1,2,9]\n            </code>\n            - You can pass the string like the Dolibarr documentation say.  \n&nbsp;\n- **thirdparties**\n    - mode\n        - From Dolibarr documentation :\n            - Set to 1 to show only customers Set to 2 to show only prospects Set to 3 to show only those are not customer neither prospect Set to 4 to show only suppliers  \n\n\n",
        "category": "Dolibarr",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "d6cf05a3596154b7"
                    },
                    {
                        "id": "e9c33ced9f42dc2d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2020,
                "y": 360,
                "wires": [
                    {
                        "id": "5c0e995677254bcd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "protocol",
                "type": "str",
                "value": "https",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "HTTP"
                                },
                                "v": "http"
                            },
                            {
                                "l": {
                                    "en-US": "HTTPS"
                                },
                                "v": "https"
                            }
                        ]
                    }
                }
            },
            {
                "name": "host",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "apiKey",
                "type": "cred"
            },
            {
                "name": "clearHeaders",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "objectName",
                "type": "str",
                "value": "products",
                "ui": {
                    "label": {
                        "en-US": "objectName (API path)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "sortField",
                "type": "str",
                "value": "ref",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "sortOrder",
                "type": "str",
                "value": "ASC",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Ascendant"
                                },
                                "v": "ASC"
                            },
                            {
                                "l": {
                                    "en-US": "Descendant"
                                },
                                "v": "DESC"
                            }
                        ]
                    }
                }
            },
            {
                "name": "limit",
                "type": "num",
                "value": "100",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "page",
                "type": "num",
                "value": "0",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "sqlFilters",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "category",
                "type": "num",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "category (id)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "thirdpartyIds",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "mode",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "PROD - Products & Services"
                                },
                                "v": "0"
                            },
                            {
                                "l": {
                                    "en-US": "PROD - Products"
                                },
                                "v": "1"
                            },
                            {
                                "l": {
                                    "en-US": "PROD - Services"
                                },
                                "v": "2"
                            },
                            {
                                "l": {
                                    "en-US": "3rdP - Customers"
                                },
                                "v": "1"
                            },
                            {
                                "l": {
                                    "en-US": "3rdP - Suppliers"
                                },
                                "v": "4"
                            },
                            {
                                "l": {
                                    "en-US": "3rdP - Prospects"
                                },
                                "v": "2"
                            },
                            {
                                "l": {
                                    "en-US": "3rdP - Neither customers | suppliers"
                                },
                                "v": "3"
                            }
                        ]
                    }
                }
            },
            {
                "name": "status",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "draft"
                                },
                                "v": "draft"
                            },
                            {
                                "l": {
                                    "en-US": "unpaid"
                                },
                                "v": "unpaid"
                            },
                            {
                                "l": {
                                    "en-US": "paid"
                                },
                                "v": "paid"
                            },
                            {
                                "l": {
                                    "en-US": "cancelled"
                                },
                                "v": "cancelled"
                            },
                            {
                                "l": {
                                    "en-US": "validated"
                                },
                                "v": "validated"
                            },
                            {
                                "l": {
                                    "en-US": "approved"
                                },
                                "v": "approved"
                            },
                            {
                                "l": {
                                    "en-US": "running"
                                },
                                "v": "running"
                            },
                            {
                                "l": {
                                    "en-US": "receivedStart"
                                },
                                "v": "receiveStart"
                            },
                            {
                                "l": {
                                    "en-US": "receivedEnd"
                                },
                                "v": "receivedEnd"
                            },
                            {
                                "l": {
                                    "en-US": "refused"
                                },
                                "v": "refused"
                            }
                        ]
                    }
                }
            },
            {
                "name": "productIds",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "productIds"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "variantFilter",
                "type": "str",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "variantFilter"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "All"
                                },
                                "v": "0"
                            },
                            {
                                "l": {
                                    "en-US": "Product without variants"
                                },
                                "v": "1"
                            },
                            {
                                "l": {
                                    "en-US": "Parent of variants"
                                },
                                "v": "2"
                            },
                            {
                                "l": {
                                    "en-US": "Variants only"
                                },
                                "v": "3"
                            }
                        ]
                    }
                }
            },
            {
                "name": "idsOnly",
                "type": "bool",
                "value": "false",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "paginationData",
                "type": "bool",
                "value": "false",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "includeStockData",
                "type": "bool",
                "value": "false",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "includeCount",
                "type": "bool",
                "value": "false",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "includeRole",
                "type": "bool",
                "value": "false",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "type",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json"
                        ]
                    }
                }
            },
            {
                "name": "id",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "GET"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "POST"
                                },
                                "v": "post"
                            },
                            {
                                "l": {
                                    "en-US": "PUT"
                                },
                                "v": "put"
                            },
                            {
                                "l": {
                                    "en-US": "DELETE"
                                },
                                "v": "delete"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "rgb(85, 165, 155)",
        "inputLabels": [
            "List of object type name"
        ]
    },
    {
        "id": "54526e03f83ee9e5",
        "type": "subflow",
        "name": "Set API key header",
        "info": "",
        "category": "Dolibarr",
        "in": [
            {
                "x": 220,
                "y": 280,
                "wires": [
                    {
                        "id": "f0cc08cda04f90a8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1420,
                "y": 280,
                "wires": [
                    {
                        "id": "762646999dea5e9f",
                        "port": 0
                    },
                    {
                        "id": "a11e0bdac5ddb9e6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "apiKey",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-key"
                }
            },
            {
                "name": "clearHeaders",
                "type": "bool",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-trash-o",
                    "type": "checkbox"
                }
            },
            {
                "name": "eraseKey",
                "type": "bool",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-trash-o",
                    "type": "checkbox"
                }
            }
        ],
        "meta": {},
        "color": "rgb(85, 165, 155)",
        "outputLabels": [
            "msg with header"
        ],
        "icon": "font-awesome/fa-key"
    },
    {
        "id": "c38e097dab2ac14e",
        "type": "subflow",
        "name": "Get one object of each enable and existing",
        "info": "",
        "category": "Dolibarr",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "2db58ed50592ceaf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 3290,
                "y": 120,
                "wires": [
                    {
                        "id": "b20c6328a0579e71",
                        "port": 0
                    },
                    {
                        "id": "d119efffbb29803a",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "apiHost",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "apiPort",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "apiKey",
                "type": "cred"
            },
            {
                "name": "clearHeaders",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "checkbox"
                }
            }
        ],
        "meta": {},
        "color": "rgb(85, 165, 155)",
        "inputLabels": [
            "List of object type name"
        ],
        "outputLabels": [
            "Dollibar object list"
        ]
    },
    {
        "id": "accc01d78c5b390d",
        "type": "group",
        "z": "58612799aa277ac1",
        "name": "1st step",
        "style": {
            "label": true
        },
        "nodes": [
            "099f6275bdac6398",
            "ac9878e5150ff640",
            "b5969e7614beb79c",
            "61885aca941ee99a",
            "3b986ba732de0ec3",
            "feb6423ccda74b39",
            "09da2f49e5f73653",
            "1a0ee4d754397b65",
            "90e07e991d03a7f5",
            "b65237e8d3b302fa",
            "398286c135d72f4e",
            "a486d072b002a4d8",
            "6e315e8005f93db6",
            "725f5a0cbb20fa86",
            "2d811df439c064d7",
            "a31ed93da07587de",
            "26858a679202fcc1",
            "f0aa98ca142d18ba",
            "fc62c24868cdc470",
            "15acca7bfc68df6a",
            "3b2dd43a127982f6",
            "b56cbac6977e1dd7",
            "a63afe78ac16cd7c",
            "c9b408509b964873",
            "bbbac82b0e8ca5c5"
        ],
        "x": 34,
        "y": 79,
        "w": 2072,
        "h": 382
    },
    {
        "id": "27d23b8fe6e3b662",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "dd12c1941d59bdf6",
            "c32f9ff98b097d80",
            "e38177f099bbd16e",
            "ac77b23c553996f1",
            "554e2cdad38c152a",
            "6d3f5c59c5819fde",
            "75352da420673640",
            "594fabac30c5d5c6",
            "eea0f3866282dea4",
            "d705226923c1c70b",
            "e76db92cc821e1dc",
            "7daa310ff267702c",
            "239311cd157b74fa",
            "43a79bd58eabb2a7",
            "b526c618a38e84f3"
        ],
        "x": 2414,
        "y": 3739,
        "w": 462,
        "h": 562
    },
    {
        "id": "47b5cb4dc8f3e87d",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "db6ed91d83a7dd13",
            "a8877ed283dac019",
            "cc5ad03705d058e4",
            "27b05f485af9e106",
            "90248df8ca18f6ba",
            "3b011cf37635651a",
            "b615aa5df78a3970",
            "26bed7857859d975",
            "feb59419786f5177",
            "4edd0e02917e548e",
            "504b36d4a62a76d6",
            "9469ffd8127e2810",
            "4465fa74532be31f",
            "7362f4e09732f0d8",
            "cdfd1d73457ea283",
            "89abe519e798830c"
        ],
        "x": 34,
        "y": 479,
        "w": 1472,
        "h": 222
    },
    {
        "id": "340f0570f339a07c",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "d348509c533ac2a8",
            "24c84fabf45d5e04",
            "0ee4f173c5c400d1",
            "61fa31b769cbb57c",
            "0f34db3c6059330a",
            "20a147eabb5d2d86",
            "0f755852830a94f4"
        ],
        "x": 3214,
        "y": 499,
        "w": 1072,
        "h": 182
    },
    {
        "id": "e6bfa779e8988908",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "4bbf9dbd15acc0eb",
            "834065f208af89ab",
            "73013c23ef540790",
            "9e7fcf2906f05495",
            "02b6639290dbf4a5"
        ],
        "x": 3214,
        "y": 719,
        "w": 512,
        "h": 302
    },
    {
        "id": "11e903a0078ab5ae",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "ab8da480eac029e4",
            "0c5393c65250ba67",
            "6078d5a71aba9cb4",
            "79e23d9c9217412e",
            "f0c1e2bb00cac29d",
            "60afb050ae8fb072",
            "3997b52502d5daec",
            "8653f9a51bd95502",
            "5536a5b3555f5188",
            "dbde7493df2cceee",
            "b5dd8cd763d949cd",
            "bb11857047d502ba",
            "b1423554c863d2ce",
            "f68521ba07011be2",
            "6890e8d9c73aa9a9",
            "a130218ebf73839e",
            "38fd6ac23d306d17",
            "56bebece38ffc3a4",
            "54eb815f98ac7cb6",
            "d70a3c3e2ee2287f",
            "2415c8d20228c78c",
            "223a514a8886c88c",
            "f6ab7dbf1772113d",
            "3d23c0470e7df63d",
            "6cfe6713f1b52d38",
            "089b3259d71ad1a1"
        ],
        "x": 14,
        "y": 4379,
        "w": 1312,
        "h": 622
    },
    {
        "id": "73a13b2a544544a8",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "1062808635d4d00d",
            "b482b5c9e8bf7d29"
        ],
        "x": 34,
        "y": 1179,
        "w": 232,
        "h": 122
    },
    {
        "id": "5715ed11144adf18",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "111a6963dd720d7d",
            "019d9a9cc09be55f"
        ],
        "x": 8,
        "y": 2593,
        "w": 1404,
        "h": 1234
    },
    {
        "id": "4ed571b02aa263c0",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "6499174e576ce696",
            "339a5e0f74c49149",
            "7a5a547b0df4892f",
            "ae3205e4b9cbea7d",
            "700c16c4880824b3",
            "28c917d6eda9a305",
            "8b2b28e1026493d9",
            "088213a593be532c",
            "134f74e33e524828",
            "1daa769f65d84089",
            "0e5877e98ddb2739",
            "6c52798ba73d8aaa",
            "58997504b6302423",
            "b20c84178a2161b6",
            "d0ddf9ad780f8607",
            "f1bb665c6385aadf",
            "10ff589546c10d32",
            "203e38f90378bc0b",
            "d2ec84eb3db780d5",
            "eaf6125428780d4b",
            "bb8792732fcdc4b6",
            "b0061efba9ec7a0a",
            "033d60e22c2af2c6",
            "1d89c6c60e8e2b6e",
            "a06b71f9c5926940",
            "9c089071d4ac6b20",
            "bade2561cc1c5169",
            "1eacaa9229dcb29e",
            "8692c9d2e1f313c3",
            "26f9aff4e4747cf1",
            "95a478c35f287810",
            "dbc1e7cfc8884e71",
            "71ddfd204b85eedf",
            "8635f7cfb216325c",
            "845c39cba0ee9279",
            "e682c04966762f98",
            "8c9dfd35ea195cfb",
            "a0c8607e14ad9ef9",
            "10598333a2888ff2",
            "997d8c1849b362f7",
            "151050c2a585f7fe",
            "7cb0a71630395136",
            "088b811e65dfaa5a",
            "8f1dab3002769cfa",
            "39de74c3e1f0dd02"
        ],
        "x": 14,
        "y": 1519,
        "w": 1552,
        "h": 922
    },
    {
        "id": "a85ec4860851e411",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "9a8fcf1aeb23d1da",
            "9fa9eefe8c8315e1",
            "716e5372cc31e9a6",
            "08e75563226f2f42",
            "a74c7f586631fbb2",
            "2616b6785cd00275",
            "e2d22d7621344bac",
            "3b073a160af23a0e",
            "f04cc2253264eec7",
            "42dfbf23b4c84968",
            "647370b82ac5594b"
        ],
        "x": 34,
        "y": 2999,
        "w": 1032,
        "h": 202
    },
    {
        "id": "816dba1c45b8b78b",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "c07b6699340fbcd5",
            "a8aef4c62ebda58b",
            "5f2e5d67487c7f52",
            "e0e0291ab706ea63",
            "c003f97c2d6b1ecf",
            "66145d63b4a3759b",
            "0c83f1140aaa650a",
            "0364a6765fddcc39",
            "d46a090167b6a697",
            "b89ece6cd278f964",
            "1a0d64ee75fde097",
            "7d75e0a4afcaf4dd",
            "b64045c99cd338d0",
            "c22f3db703628382",
            "a6fc3bc21bc47895",
            "a491c99282ffd706",
            "eb313792563b107a",
            "7e79908e974385de"
        ],
        "x": 14,
        "y": 3839,
        "w": 1112,
        "h": 522
    },
    {
        "id": "dd24392cc62ce355",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "54dbb3422c75859a",
            "601f6bedb356bf0d",
            "8bb6adaaf5f017e4",
            "5ff35737d4ef52c1",
            "c6dcbadb0ba46a75",
            "e90fbf86d0c30903",
            "e989f5792b9f580e",
            "8a6e36bdadab66b9",
            "13d3f95332c221fb",
            "09ae005b0bb6d415",
            "8bbf779d582f7116",
            "4b19419db163cf9f",
            "4d475f99c5fd1661"
        ],
        "x": 34,
        "y": 739,
        "w": 1332,
        "h": 402
    },
    {
        "id": "843507352d7aecff",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "b1aa9621a3155dfd",
            "7298c2ad9cc80421",
            "7e467b2169952b5f",
            "3a1b4a368a31b699",
            "711b85d8fa7b882c",
            "150764e5ffd5686c",
            "f7bf6f9e81165281",
            "2eb5ea13657c9fdb",
            "797aa4a5d6d908df"
        ],
        "x": 54,
        "y": 3219,
        "w": 952,
        "h": 202
    },
    {
        "id": "d6c669dc0430ee27",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "bff5e4a52b0e5044",
            "ff23321cb8626625",
            "12a80d04e0c3584e",
            "d4bb39bce57aea57",
            "424eb7699cab270f",
            "44e5860cc3f5b74f",
            "7214f4f61c1de456",
            "cef540999b630fb7"
        ],
        "x": 1394,
        "y": 739,
        "w": 1162,
        "h": 162
    },
    {
        "id": "b8f8611163248bdd",
        "type": "group",
        "z": "57297ea9585b5f93",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "9910400a70e3748f",
            "cfef9b965281e35e",
            "3879658cfc8f39a6",
            "99e6f7120bc13cf8",
            "5dcd97a52a9af266",
            "a46c53a4f25125bf",
            "ec2f91b7c82fe538"
        ],
        "x": 174,
        "y": 119
    },
    {
        "id": "18e263da0ce661a2",
        "type": "group",
        "z": "57297ea9585b5f93",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "f899bfee50c2c5f6",
            "5fe632846e1697cf",
            "8db83594bc604f4d",
            "684d60b75c1cc9da",
            "44c756161c28b0e2",
            "8b3802d31611155a",
            "7f82046bd9d0371b",
            "05636ee319db6f24",
            "dc5517b9df8183b5",
            "0e66b4ca4d045ec1",
            "3d8c166dafde23ec",
            "07b4fddee5d12ac2",
            "733d567b31de5df5",
            "dcbb085ee2ecca8b",
            "628dfb2257610e39",
            "5e50781edb13f822",
            "c0b40a7272cfab76",
            "372c7037c1474f67",
            "9478cafaace3eda1",
            "5e8044892e24ec72",
            "96f4d0b1004067bd",
            "5c8e04ee1e796b6d",
            "09f1ac7ac86f2fa8",
            "dc269403be70248b",
            "d7cefaf9832ce681",
            "2d81644308115d7d",
            "127cf7d29cea1234",
            "668842fefb1ad86b",
            "c13e09dff09adfbd",
            "5a947aacab2c4eba",
            "e481703bc59b4c72",
            "9c8aca4bedc48d5e",
            "7d681acadaecfb5f",
            "16bce161060dd6ed",
            "3554dd2e300a186d",
            "1590d913477ecb52",
            "6b54aac46cb4c9b3",
            "dff8087ee587c923",
            "265694c368031b88",
            "3b9751a158948df4",
            "42bb49f4356c0595",
            "447f88e0a835b97a",
            "acf896f91e62ebb9",
            "be0d1711cdc49ac1",
            "11735e05573fb370",
            "aa17940305d40738",
            "d9210aa9864f709a",
            "9c223c328c2c1229",
            "cac216a938770ad4",
            "40fcc77c45bef21d",
            "e34bac8166d30631",
            "4e85502b0cdbb08b",
            "9d9d7260b0dc6059",
            "705b4607cb4e54cf",
            "53590d1add8b6432",
            "e0b42ba5f51af29d",
            "707a42c2835a3c14",
            "f214607e192146ac",
            "b710b47357afff69",
            "2e0f75ce20fba878",
            "11024c778cd30379",
            "e709214485f5f8dd",
            "6a25e18d8a8a5346",
            "e84e8c0191c253f9",
            "5dd43c642137b6b6",
            "e4c1887aa955a2ec",
            "e2c596f862f807c1",
            "7f2f743ebaeb222d",
            "6b4a9b0521c14524",
            "d7280d184dc694b7",
            "b3a2db7da76826cc",
            "acb41c72b270cbac",
            "a0aab47871bf4d0e",
            "0a8c19f4df98784d",
            "41b1f0df6391aabf",
            "f4150bd9112e79d5",
            "9e39d1b269bca6f1",
            "5daf26229a34ec6d",
            "af47437bc74e05a2",
            "a046801adbd525d4",
            "0675a67dbf5f226d",
            "74d28e415cac5e4b",
            "049914dc3aa6e18a",
            "6acb2b994b6e860f",
            "f6930578ff860b22",
            "d0a82e3544f7a8b0",
            "fbb4165b4fadc15a",
            "a23460e2039e2240",
            "f7e50795bbbe828e",
            "f8cc71cc05ed9b0c",
            "0a9601a0b978d84a",
            "c3e5157c333c3465",
            "66bf2097b327336e",
            "cfe3b14e2bddbf6a",
            "ea2b5f79579f1d4a",
            "81e980f5c7b5363f",
            "7c99e16850770331",
            "816b0666cf836929",
            "8a3271e120fc0949",
            "c66ed3dda5290e99",
            "c377f1e581915fd5",
            "1ac64cb8c2b56f2d",
            "74dc2426dfad908d",
            "b0e63695bcd5c315",
            "ff2965f7510c868d",
            "b3b58ad074a2b566",
            "baa2cf368634c41f",
            "dcdd569d049123a4",
            "23e2f51aa5001862",
            "9a99865feeda8c41",
            "9a24a7fd6de2c5f3",
            "af71c28ef446236c",
            "28f99a18b712b8c7",
            "c2e0b987362039af",
            "ef08ad9ecb7fca29",
            "ec3f6ba6983f80ae",
            "1f43d49576bb375f",
            "1961a1e8fed2c784",
            "1b86a3e86f103adf",
            "8f21bd4ae9af0a4e",
            "4cc671b399e9511e",
            "19870d67117f182f",
            "4744804d51c8767e",
            "2490e2898b93d57a",
            "9f9aa054ed5b3070",
            "bb51e76e19282ad0",
            "fbd8b34ce62e5998",
            "3232e7606df8c0a1",
            "f081cb68bd6a63b6",
            "08717e5d7a7b1e2d",
            "43c0975e7bb96e1a",
            "0efe17d66efb0d0d",
            "58adc702736ecdcc"
        ],
        "x": 164,
        "y": 339
    },
    {
        "id": "03423aacbab5be01",
        "type": "group",
        "z": "cda9a4b5dd195f96",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "217704d4bcad8509",
            "59676d069a581d48",
            "a97adb91c59c3879",
            "c280ced4041a7ec7",
            "60f468b672d670a2",
            "fbe6a4c43eea3e9a",
            "a24271ceb763c696",
            "aa1e2348a08323c8",
            "9b0b777f741c8465",
            "fac21ad93363355e",
            "d1944d4ac30b8216",
            "9cd7edf4b42d2e4f"
        ],
        "x": 54,
        "y": 59
    },
    {
        "id": "9dfbbd3b29955812",
        "type": "group",
        "z": "cda9a4b5dd195f96",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "c097c68981d496a9",
            "6791a042e8c651aa",
            "3a786062ccb8d471",
            "443842786d200b1a",
            "ac74bc9e3ee12790",
            "156c345e5a568130",
            "7d47eb7deca75274"
        ],
        "x": 54,
        "y": 279
    },
    {
        "id": "5f1ccdabb35acbee",
        "type": "group",
        "z": "b21e8c38dec5d4ca",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "420f3da951ebaed0",
            "276682c855842828",
            "ca2f6394ae10f574",
            "1bf77208259c0485",
            "433c68513309cead",
            "043df0e9056f1fca",
            "881363479df69560",
            "e465e455218add27",
            "9c54af1c0bcc7965",
            "9330f4c54f3b93e9",
            "8ff0679511b38b0c",
            "2810c01749861565",
            "857e15cc119dd6e1",
            "6f17cfb2d6cca5fd",
            "7d52b71aa635a196",
            "70aa97d150fd2e75",
            "1ea9ad780633f4f7",
            "c08b6a372af98cb7",
            "e2ec4505207659df",
            "70f0ae8aafac8b46",
            "0a45cb6c1af9287b",
            "1b902f571374e961",
            "6c8c9595f507e3f9",
            "9f8611db3392ebd6",
            "88a2515f25c5bff9",
            "437348d92a066b38"
        ],
        "x": 1894,
        "y": 39
    },
    {
        "id": "3c50c0a21d330b67",
        "type": "group",
        "z": "b21e8c38dec5d4ca",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "e2ae91ff1eb6f409",
            "67fbb02e1d276549",
            "e6e3755980dd23e4",
            "5d15462fedcdd9de",
            "5e07fe4cc8fadc8c",
            "c80de6de902336e8"
        ],
        "x": 794,
        "y": 1179
    },
    {
        "id": "926a3de759a09145",
        "type": "group",
        "z": "b21e8c38dec5d4ca",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "679e9cb349dabd5d",
            "6fa2566e69874edd",
            "a66c2b7ddfb07cfc",
            "0a7a7febd1710121",
            "89b147df82f0a439"
        ],
        "x": 4174,
        "y": 919
    },
    {
        "id": "34b71ed9cc8e31d6",
        "type": "group",
        "z": "b21e8c38dec5d4ca",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "f6bf16378606fd8f",
            "71b3d163d21c731a",
            "7e88acedd6fd7e9b",
            "04c2025af58e0acb",
            "ce332a573287547d",
            "01122154f7b49aac",
            "b537a6a2d84128a0",
            "9fb084c1552066a3",
            "909872c71831d1b0",
            "1339310a2853d515",
            "e482216fc457a42f",
            "d5dfe1d380ee1201",
            "3f727e9021443e59",
            "7be6957c67f7b79d",
            "5b4a66322ad0c4b5",
            "c1ef39dba16ca951",
            "97b326de78cc2bd6",
            "f9cb7bbb39d5bcbd",
            "34d284932aa2e51b",
            "dc3197fa7a25b6f5",
            "5f448d3783031ec4",
            "48213293d72ad8c7",
            "9a5dbb25d355fe9d",
            "590dea6121e465f6",
            "a9c0aa59246a1e8d",
            "86db7d8867a3dd88",
            "3dc1d5e0261dedd1",
            "ae24cfdf41aebbbb",
            "47bedc13b0949fa5",
            "5c9d6dcc66e37b80"
        ],
        "x": 54,
        "y": 419
    },
    {
        "id": "0c071a316d636b7b",
        "type": "group",
        "z": "b21e8c38dec5d4ca",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "e67245e0a0036c2c",
            "0779aa78918e0523",
            "1b8657d75834892c",
            "fce43233b08fbfe8"
        ],
        "x": 54,
        "y": 1319
    },
    {
        "id": "48fc088220fe72bb",
        "type": "group",
        "z": "b21e8c38dec5d4ca",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "75e0fddae13b131b",
            "bf3e86b3ff63402c",
            "0330a96831d6ab57",
            "bba2830f4695938f"
        ],
        "x": 834,
        "y": 919
    },
    {
        "id": "ea9fd99eb20cf596",
        "type": "group",
        "z": "b21e8c38dec5d4ca",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "564286a72a488cd9",
            "7bb5d30afec797ea",
            "c4ecf933327ec42c",
            "edf2e3443b2259f9",
            "faf8ea544dbf3a88",
            "ddc5cd725857caf6"
        ],
        "x": 54,
        "y": 919
    },
    {
        "id": "3769455bbb18be83",
        "type": "group",
        "z": "cda9a4b5dd195f96",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "eaf1ee88e00d9406",
            "dc3d51f8ecedc5f1",
            "4c6c3c86226eb43e",
            "a6a82660b6ace126",
            "8259d817ba4c9098"
        ],
        "x": 54,
        "y": 599
    },
    {
        "id": "111a6963dd720d7d",
        "type": "group",
        "z": "58612799aa277ac1",
        "g": "5715ed11144adf18",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "7c2342eac26ece9a",
            "b81c5add143e1468",
            "967cb147479fa7d2",
            "727ab0f58fdd8b57",
            "dee22873495bf536",
            "4aea92bb483309c4",
            "be799980b0051af5",
            "99ed9d0501a8f94c",
            "6b70a0e29cc4c4e1",
            "64af6af8b797ef14",
            "9d4a97cd15fce943",
            "acc5c6651e8035cc",
            "263695ae43a1a8dc",
            "2fb1b8f4a3ee09c1",
            "bfeb31bda4584013",
            "2d830b30c5768e2d"
        ],
        "x": 54,
        "y": 3439,
        "w": 1052,
        "h": 362
    },
    {
        "id": "019d9a9cc09be55f",
        "type": "group",
        "z": "58612799aa277ac1",
        "g": "5715ed11144adf18",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "42eb0fb9ddd99985",
            "13a00ced10e42c62",
            "8ed3b2f2a0c58fbd",
            "c722ef3f6e2b2715",
            "090d9cefd34fa11e",
            "66a0f8c982cab7dd",
            "8a30476f533145fb",
            "c15d852e510fe2b2",
            "a10f537d5f2ea961",
            "2f24cc9e728da7b0",
            "6e65fefad0ae8c68",
            "17368fa557035a81",
            "70e60aea63b08bcf",
            "5185155403df9d58",
            "9316ea9c485af292",
            "b577f66ee2172ab6",
            "20686310ad206fe6",
            "44242e20df8e0781",
            "0c9f1b311a1160b4"
        ],
        "x": 34,
        "y": 2619,
        "w": 1352,
        "h": 362
    },
    {
        "id": "c0b40a7272cfab76",
        "type": "group",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "style": {
            "stroke": "#d1b478",
            "label": true,
            "fill": "#532c2c"
        },
        "nodes": [
            "037c66ba96df20be",
            "be4aa8937a2551a3",
            "24099d8cac2ab795",
            "564ff8ef50de58b1",
            "4d39ba490ae7a81f",
            "06043ac62e7edf8e",
            "7de319477688b8ba",
            "dfd243663d89ff30",
            "e6cfcb3d10177c46",
            "7df4342477554fec",
            "e53439d570dffd07",
            "a3348e49115feabc",
            "83df3adbaa2a6c51",
            "285ddcd6faf866c9",
            "cc7f04658e10487c",
            "2c48e3b743c58dc6",
            "c8f6c212fc68f165",
            "560fe6956d93cb53",
            "b7249babe9ca16cc",
            "bdf43fa3a5a439e7",
            "ea6e70d0667d480d",
            "86cdf396ce6d4aa0",
            "dd42e2b99a2a7645",
            "18ecfed882d9cab8",
            "79291a7a1150f807",
            "1fbd8cc10ee44cd0",
            "961702918836aa4d",
            "b2b6c35ccfe6517f",
            "3ba29ad018e06586",
            "b8028a182f6e3883",
            "b4fc87ff7c293b7a",
            "041efdc800181680",
            "a49a58dcf5918f7a",
            "8a4fdf696c797978",
            "15f4a37073c29cdc",
            "7a3554e3063ac472",
            "fd4dd9381332bd43",
            "990a856009b4df1b",
            "7489632c2a204942",
            "6ac8777966c061e5",
            "55cc69056770aa9f",
            "a9bf38fc141961ae",
            "73cf18f32e5abc7b",
            "055a8ac1dad23671",
            "7b3dca1a87b0dc5e",
            "b88faf03b44d1c0a",
            "25e5be0676b5f6f8",
            "cbeb3dca73005cb3",
            "d67d684ecee6c676",
            "2c90c003888ef3a1",
            "6feb6980b1214cbf",
            "b24f311005810a61",
            "03c239aeca73f949",
            "3abd54eb14b681f8",
            "78a24a7adeabe9c3",
            "60ac4d280c89f4de",
            "9a3d1961c9c303cd",
            "bb05228eade21d1f",
            "4ad3e45a119c1ab8",
            "06b1faf353de60fa",
            "d93510c6fbb67516",
            "a48667c232bc72ea",
            "1fc0dce79a6feefe",
            "6a9fa0bd8fd2fe78",
            "df6c15d9807db302",
            "96d1beb6501d4661",
            "eeb33e9c9894d157",
            "ca1a3b161424e5e9",
            "04cf2cb39f05fbf5",
            "0bd48ea4562be240",
            "092dfa0718d148d9",
            "2e5405bc8896e802",
            "69abf9c7573503c3",
            "a6d16b412273335c",
            "ad653b64c5bc3d1c"
        ],
        "x": 1214,
        "y": 1339
    },
    {
        "id": "42bb49f4356c0595",
        "type": "group",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "style": {
            "stroke": "#d1b478",
            "label": true,
            "fill": "#532c2c"
        },
        "nodes": [
            "1955d97621c6194f",
            "fba7ea4f0c525b8f",
            "76b45b809532e499",
            "e9699e2f6a049fe7",
            "e0c099377c2c48d3",
            "0dd47cebafd78a73",
            "b73225bfdbae241a",
            "9fb37ef2271445f3",
            "a47933f23ee978d7",
            "aaea082df6e0d28e",
            "081925cde061cad5",
            "d6f838746286e467",
            "c295c8cbfb5211dc",
            "126bdc8d1fe884f0",
            "b6de463218f1e479",
            "2fe10cf77563c81c",
            "abb24d721e50e418",
            "c831be1d8aab6ac2",
            "5ab7478a90317b26",
            "f27df0d26aedf15c",
            "6f1bc1a7b9c9f095",
            "497be50704f809a8",
            "8cb281e27cb12913",
            "83dcd2bef897c63e",
            "bb973f9e1bbddecc",
            "e1b464488f392996",
            "2dae94e0a5a67ff8",
            "52b9b8c246361095",
            "07fdd76ed660d4e3",
            "052ce13702c43cdd",
            "833281452e6d2faa"
        ],
        "x": 1214,
        "y": 2519
    },
    {
        "id": "705b4607cb4e54cf",
        "type": "junction",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "x": 1280,
        "y": 520,
        "wires": [
            [
                "53590d1add8b6432"
            ]
        ]
    },
    {
        "id": "53590d1add8b6432",
        "type": "junction",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "x": 2440,
        "y": 600,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "baa2cf368634c41f",
        "type": "junction",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "x": 620,
        "y": 1380,
        "wires": [
            [
                "1ac64cb8c2b56f2d",
                "cac216a938770ad4",
                "6b4a9b0521c14524"
            ]
        ]
    },
    {
        "id": "c2ab6d4c108e742b",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#3f4c42",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#3f4c42",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#3f4c42",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#627666",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#3f4c42",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1879b77ac8da62ed",
        "type": "ui_link",
        "name": "Text editor",
        "link": "http://192.168.1.21:8888/browser-amd-editor/",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 12
    },
    {
        "id": "8200fe949dc202c5",
        "type": "ui_link",
        "name": "Dolibarr",
        "link": "http://192.168.1.21:8300/",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 9
    },
    {
        "id": "55907cba27295a35",
        "type": "ui_link",
        "name": "Rhasspy",
        "link": "http://192.168.1.21:12101/",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 10
    },
    {
        "id": "65432b631f1a04d0",
        "type": "ui_link",
        "name": "Node-red",
        "link": "https://192.168.1.21:1880/admin",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 8
    },
    {
        "id": "9d588d7b09cb17ab",
        "type": "ui_link",
        "name": "Vitascience",
        "link": "https://fr.vittascience.com/code",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 13
    },
    {
        "id": "6c866437b1f109a0",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "660f9ed8308b8e21",
        "type": "ui_tab",
        "name": "Utility",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "485ce5b6904ff90c",
        "type": "ui_tab",
        "name": "Communication",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "63f90adc0c820cb7",
        "type": "ui_tab",
        "name": "Tâche de zone",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "223fe02f5c8e5bf5",
        "type": "ui_tab",
        "d": true,
        "name": "Editor",
        "icon": "dashboard",
        "order": 14,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6aba98dd5df89ef3",
        "type": "ui_tab",
        "name": "3D view",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7bebf70e21c141dc",
        "type": "ui_tab",
        "d": true,
        "name": "Text editor",
        "icon": "dashboard",
        "order": 15,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1588cad9498681c1",
        "type": "ui_group",
        "name": "Connections",
        "tab": "660f9ed8308b8e21",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": true,
        "className": ""
    },
    {
        "id": "a1efc069e293d845",
        "type": "ui_group",
        "name": "Terminal one shot",
        "tab": "660f9ed8308b8e21",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "297b1964920fbcef",
        "type": "ui_group",
        "name": "Terminal dynamique out of list",
        "tab": "6c866437b1f109a0",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "255455bc3795b06c",
        "type": "ui_group",
        "name": "Terminal dynamique in list",
        "tab": "6c866437b1f109a0",
        "order": 3,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e16baac817e17b4",
        "type": "ui_group",
        "name": "Terminal dynamique",
        "tab": "6c866437b1f109a0",
        "order": 2,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "10ad1fb7bcc90a34",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "63f90adc0c820cb7",
        "order": 1,
        "disp": true,
        "width": "40",
        "collapse": false,
        "className": ""
    },
    {
        "id": "219ad68d9fd685f8",
        "type": "ui_group",
        "name": "audio",
        "tab": "63f90adc0c820cb7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f47920dd7d4dc350",
        "type": "ui_group",
        "name": "Default",
        "tab": "63f90adc0c820cb7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d10294dd6b7b5321",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "223fe02f5c8e5bf5",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "c321b890973a1573",
        "type": "ui_group",
        "name": "3D view",
        "tab": "6aba98dd5df89ef3",
        "order": 1,
        "disp": true,
        "width": 50,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d229163f35bc3e17",
        "type": "ui_group",
        "name": "Text editor",
        "tab": "7bebf70e21c141dc",
        "order": 1,
        "disp": true,
        "width": 35,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5686ba0baf95769c",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 2,
        "width": 29,
        "height": 1
    },
    {
        "id": "39a237a40ac9fce6",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 3,
        "width": 29,
        "height": 1
    },
    {
        "id": "3e018f6bf8b8f7ac",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 4,
        "width": 29,
        "height": 1
    },
    {
        "id": "89ca0aced4765de4",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 5,
        "width": 29,
        "height": 1
    },
    {
        "id": "78beaf74a3dd1678",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 6,
        "width": 29,
        "height": 1
    },
    {
        "id": "ab9ce90cf8e7c7eb",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 7,
        "width": 29,
        "height": 1
    },
    {
        "id": "cb565fbeca93aeb9",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 8,
        "width": 29,
        "height": 1
    },
    {
        "id": "be8c4373661cc5ae",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 9,
        "width": 29,
        "height": 1
    },
    {
        "id": "58d2a3ed17170c8d",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 10,
        "width": 29,
        "height": 1
    },
    {
        "id": "8e3bb590fd324109",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 11,
        "width": 29,
        "height": 1
    },
    {
        "id": "99dc1b9c4f609f28",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 12,
        "width": 29,
        "height": 1
    },
    {
        "id": "ce1e895aaa7819e9",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 13,
        "width": 29,
        "height": 1
    },
    {
        "id": "3112a3e697257936",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 14,
        "width": 29,
        "height": 1
    },
    {
        "id": "47f44255d1875aa7",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 15,
        "width": 29,
        "height": 1
    },
    {
        "id": "1ac0b6ed66aa63ba",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 16,
        "width": 29,
        "height": 1
    },
    {
        "id": "15302a72c99f6715",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 17,
        "width": 29,
        "height": 1
    },
    {
        "id": "d84993c7749c324a",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 18,
        "width": 29,
        "height": 1
    },
    {
        "id": "193717a1e84abdb5",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 19,
        "width": 29,
        "height": 1
    },
    {
        "id": "5aa4c3e4a7b0501a",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 20,
        "width": 29,
        "height": 1
    },
    {
        "id": "e3ae6ef8499bc529",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 21,
        "width": 29,
        "height": 1
    },
    {
        "id": "89428e9bea776f01",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 22,
        "width": 29,
        "height": 1
    },
    {
        "id": "524e41bfb285ea49",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 23,
        "width": 29,
        "height": 1
    },
    {
        "id": "6742a5d52b4bb676",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 24,
        "width": 29,
        "height": 1
    },
    {
        "id": "9b2e25b089b2636d",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 25,
        "width": 29,
        "height": 1
    },
    {
        "id": "f036575374674433",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 26,
        "width": 29,
        "height": 1
    },
    {
        "id": "facc3c8b12965080",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 27,
        "width": 29,
        "height": 1
    },
    {
        "id": "e86b5e79d36b46b4",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 28,
        "width": 29,
        "height": 1
    },
    {
        "id": "3d43e2cba3401ea2",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 29,
        "width": 29,
        "height": 1
    },
    {
        "id": "b78cbc5d2540eed5",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 30,
        "width": 29,
        "height": 1
    },
    {
        "id": "a9d1b51feb61eb7f",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 31,
        "width": 29,
        "height": 1
    },
    {
        "id": "8f9c4e56284bbf11",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 32,
        "width": 29,
        "height": 1
    },
    {
        "id": "fe047b66e8dff168",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 33,
        "width": 29,
        "height": 1
    },
    {
        "id": "c2a5003627f5a479",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 34,
        "width": 29,
        "height": 1
    },
    {
        "id": "91f1b589e74d876c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.21",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "64695929c27c81fa",
        "type": "websocket-listener",
        "path": "wss/receiveMessage",
        "wholemsg": "false"
    },
    {
        "id": "9445b5d08fba6030",
        "type": "websocket-listener",
        "path": "wss/publishMessage",
        "wholemsg": "false"
    },
    {
        "id": "2d9e738af4e29ba2",
        "type": "ui_tab",
        "name": "Application",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "08ec154b16f96b31",
        "type": "ui_group",
        "name": "Web Assistant",
        "tab": "2d9e738af4e29ba2",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a7ee2f5577f4fb2a",
        "type": "ui_link",
        "name": "Web Assistant",
        "link": "http://192.168.1.21:3300",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 11
    },
    {
        "id": "22bc3a7da6967b57",
        "type": "ui_group",
        "name": "Download on pi with pi",
        "tab": "660f9ed8308b8e21",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da3770b5c883bcfa",
        "type": "ui_group",
        "name": "Worldmap",
        "tab": "ad4e0d83364bc715",
        "order": 1,
        "disp": true,
        "width": 50,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad4e0d83364bc715",
        "type": "ui_tab",
        "d": true,
        "name": "Worldmap",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "272472e074141e70",
        "type": "ui_group",
        "name": "Upload file",
        "tab": "660f9ed8308b8e21",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "18cdadd15d72d136",
        "type": "ui_group",
        "name": "OCR",
        "tab": "660f9ed8308b8e21",
        "order": 5,
        "disp": true,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1c3881de7afa11d5",
        "type": "change",
        "z": "5030d00b88df4be5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "test",
                "pt": "msg",
                "to": "test",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "65a17d791a657925",
        "type": "function",
        "z": "a85c93b74d9f6110",
        "name": "Set priority of msg value",
        "func": "var list = ['path', 'packageName','action', 'save', 'saveInDependencies','safeMode']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "decd9a59ae4a88b9"
            ]
        ]
    },
    {
        "id": "e542a4f578bab639",
        "type": "exec",
        "z": "a85c93b74d9f6110",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "b8f92dc3100eea4c",
                "d0b588151f25af9d"
            ],
            [
                "b8f92dc3100eea4c"
            ],
            [
                "b8f92dc3100eea4c"
            ]
        ]
    },
    {
        "id": "decd9a59ae4a88b9",
        "type": "change",
        "z": "a85c93b74d9f6110",
        "name": "set command in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(path='' ? '' : 'cd ' & path & ' && ') & 'npm ' & action & ' ' & packageName & (save ? ' --save' : '') & (saveInDependencies ? ' -D' : '')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "[payload]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 640,
        "wires": [
            [
                "e542a4f578bab639"
            ]
        ]
    },
    {
        "id": "d0b588151f25af9d",
        "type": "switch",
        "z": "a85c93b74d9f6110",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "low",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "added 1 package",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 890,
        "y": 540,
        "wires": [
            [
                "43e09bf625c1ccb0"
            ],
            [
                "32620eda86c8b32d"
            ],
            [
                "32620eda86c8b32d"
            ]
        ]
    },
    {
        "id": "efe3592b9fec64fd",
        "type": "exec",
        "z": "a85c93b74d9f6110",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1570,
        "y": 660,
        "wires": [
            [
                "87403198d3eb6d51"
            ],
            [
                "697904ccdf2908a6"
            ],
            [
                "697904ccdf2908a6"
            ]
        ]
    },
    {
        "id": "3da9f5a55d213f12",
        "type": "change",
        "z": "a85c93b74d9f6110",
        "name": "set command in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'cd \"' & path & '\" && ' & 'npm audit fix'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "$append(command)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 480,
        "wires": [
            [
                "efe3592b9fec64fd"
            ]
        ]
    },
    {
        "id": "f0c7f88db9a0a39f",
        "type": "link in",
        "z": "a85c93b74d9f6110",
        "name": "stdout",
        "links": [
            "3b612ead7d4a407e",
            "32620eda86c8b32d",
            "7e416f0898f1e4bf",
            "62b10f098bb48847",
            "7b7d9bdda20dd70c",
            "b8f92dc3100eea4c",
            "697904ccdf2908a6",
            "1b302ebac74189ad",
            "4646e97d6cdcf57a",
            "4c889e1c79e3c8ad"
        ],
        "x": 2755,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "62b10f098bb48847",
        "type": "link out",
        "z": "a85c93b74d9f6110",
        "name": "",
        "mode": "link",
        "links": [
            "f0c7f88db9a0a39f"
        ],
        "x": 2275,
        "y": 620,
        "wires": []
    },
    {
        "id": "b8f92dc3100eea4c",
        "type": "link out",
        "z": "a85c93b74d9f6110",
        "name": "",
        "mode": "link",
        "links": [
            "f0c7f88db9a0a39f"
        ],
        "x": 1045,
        "y": 680,
        "wires": []
    },
    {
        "id": "697904ccdf2908a6",
        "type": "link out",
        "z": "a85c93b74d9f6110",
        "name": "",
        "mode": "link",
        "links": [
            "f0c7f88db9a0a39f"
        ],
        "x": 1765,
        "y": 680,
        "wires": []
    },
    {
        "id": "87403198d3eb6d51",
        "type": "switch",
        "z": "a85c93b74d9f6110",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "found 0 vulnerabilities",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 620,
        "wires": [
            [
                "62b10f098bb48847"
            ],
            [
                "f7fc04eb893fd2e3"
            ]
        ]
    },
    {
        "id": "32620eda86c8b32d",
        "type": "link out",
        "z": "a85c93b74d9f6110",
        "name": "",
        "mode": "link",
        "links": [
            "f0c7f88db9a0a39f"
        ],
        "x": 1265,
        "y": 560,
        "wires": []
    },
    {
        "id": "69dec379bd8db011",
        "type": "file in",
        "z": "a85c93b74d9f6110",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 40,
        "wires": [
            [
                "a4693381465ef0e0"
            ]
        ]
    },
    {
        "id": "a4693381465ef0e0",
        "type": "json",
        "z": "a85c93b74d9f6110",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "56d750465e6be7e0",
        "type": "change",
        "z": "a85c93b74d9f6110",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "path & (path='' ? '' : '/') & 'package.json'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 40,
        "wires": [
            [
                "69dec379bd8db011"
            ]
        ]
    },
    {
        "id": "43e09bf625c1ccb0",
        "type": "switch",
        "z": "a85c93b74d9f6110",
        "name": "",
        "property": "safeMode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "3da9f5a55d213f12"
            ]
        ]
    },
    {
        "id": "24ca775ca6d87de3",
        "type": "exec",
        "z": "a85c93b74d9f6110",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 2150,
        "y": 540,
        "wires": [
            [
                "62b10f098bb48847"
            ],
            [
                "62b10f098bb48847"
            ],
            [
                "62b10f098bb48847"
            ]
        ]
    },
    {
        "id": "f7fc04eb893fd2e3",
        "type": "change",
        "z": "a85c93b74d9f6110",
        "name": "set command in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(path='' ? '' : 'cd ' & path & ' && ') & 'npm ' & 'uninstall ' &  packageName & (save ? ' --save' : '') & (saveInDependencies ? ' -D' : '')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "[payload]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 540,
        "wires": [
            [
                "24ca775ca6d87de3"
            ]
        ]
    },
    {
        "id": "839abd14.c4891",
        "type": "template",
        "z": "330978c5.bafdb8",
        "name": "mic_listen",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n\"type\": \"node_red.listen\",\n\"data\": {},\n\"context\": {}\n}",
        "output": "json",
        "x": 360,
        "y": 60,
        "wires": [
            [
                "cf5b409e.56ba4"
            ]
        ]
    },
    {
        "id": "84d36506.5af9a8",
        "type": "subflow:9bc00d62.26d47",
        "z": "330978c5.bafdb8",
        "name": "",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.18",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "protocol",
                "value": null,
                "type": "str"
            }
        ],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "b14dbc73924069c1"
            ]
        ]
    },
    {
        "id": "e1c22a48.a9d1a8",
        "type": "comment",
        "z": "330978c5.bafdb8",
        "name": "Converses with Rhasspy",
        "info": "Incoming JSON payloads from Mycroft to Node-Red\n\n\n\t{\"type\": \"node_red.fallback\", \"data\": {\"utterance\": \"<text of utterance>\", \"norm_utt\": \"echo\", \"lang\": \"en-US\"}, \"context\": \t{\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}\n\n\n\t{\"type\": \"node_red.converse\", \"data\": {\"utterance\": \"<text of utterance>\"}, \"context\": {\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "cf5b409e.56ba4",
        "type": "subflow:9bc00d62.26d47",
        "z": "330978c5.bafdb8",
        "name": "",
        "env": [],
        "x": 510,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b62d4cc82701a712",
        "type": "http request",
        "z": "330978c5.bafdb8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 200,
        "wires": [
            [
                "f88e820b730120c8"
            ]
        ]
    },
    {
        "id": "f88e820b730120c8",
        "type": "debug",
        "z": "330978c5.bafdb8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 280,
        "wires": []
    },
    {
        "id": "857445a7c5035b2c",
        "type": "function",
        "z": "330978c5.bafdb8",
        "name": "Set priority of msg value",
        "func": "var list = ['protocol','host', 'port', 'volume', 'repeat', 'siteId', 'language', 'timeOut']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "84d36506.5af9a8"
            ]
        ]
    },
    {
        "id": "908b0b99721d720f",
        "type": "function",
        "z": "330978c5.bafdb8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b14dbc73924069c1",
        "type": "function",
        "z": "330978c5.bafdb8",
        "name": "Construct url",
        "func": "msg.url = msg.protocol + '://' + msg.host + (msg.port ? ':'+msg.port : '')\nmsg.url += '/api/listen-for-command'\nmsg.url += msg.timeOut ? \"?timeOut=\"+msg.timeOut : ''\n\n\nmsg.method = 'post'\n\n//msg.url += '&language=' + msg.language\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "b62d4cc82701a712"
            ]
        ]
    },
    {
        "id": "ad44d7a3.b6c048",
        "type": "comment",
        "z": "9bc00d62.26d47",
        "name": "Messages to Rhasspy",
        "info": "Outgoing JSON payloads from Node-Red to to Mycroft (TTS)\n\n\t{\"type\": \"node_red.answer\", \"data\": {\"utterance\": \"<answer from skill>\"},\"context\": {}}\n\n\t{\"type\": \"node_red.intent_failure\", \"data\":{\"utterance\" : \"<text of origional utterance>\"}, \"context\":{}}'}\n",
        "x": 120,
        "y": 20,
        "wires": []
    },
    {
        "id": "30d5f2bc.3281be",
        "type": "complete",
        "z": "9bc00d62.26d47",
        "name": "",
        "scope": [
            "8954e87.a290f18"
        ],
        "uncaught": false,
        "x": 170,
        "y": 680,
        "wires": [
            [
                "c1453d6cf2e1de5b"
            ]
        ]
    },
    {
        "id": "8954e87.a290f18",
        "type": "http request",
        "z": "9bc00d62.26d47",
        "name": "Rhasspy out",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1270,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "88a33404cd323cb7",
        "type": "function",
        "z": "9bc00d62.26d47",
        "name": "Set priority of msg value",
        "func": "var list = ['protocol','host', 'port', 'volume', 'repeat', 'siteId', 'language']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "7e462971df164ca4",
                "37ee47439226efa0"
            ]
        ]
    },
    {
        "id": "7e462971df164ca4",
        "type": "function",
        "z": "9bc00d62.26d47",
        "name": "Construct url",
        "func": "msg.url = msg.protocol + '://' + msg.host + (msg.port ? ':'+msg.port : '')\nmsg.url += '/api/text-to-speech'\nif (msg.hasOwnProperty('volume') || msg.hasOwnProperty('repeat') || msg.hasOwnProperty('language') || msg.hasOwnProperty('siteId')){\n    msg.url += '?'\n    msg.url += msg.volume ? \"volume=\" + msg.volume : ''\n    msg.url += msg.url.slice(-1) !== '?' && msg.repeat ? '&' : ''\n    msg.url += msg.repeat ? \"repeat=\" + msg.repeat : ''\n    msg.url += msg.url.slice(-1) !== '?' && msg.siteId ? '&' : ''\n    msg.url += msg.siteId ? \"siteId=\" + msg.siteId : ''\n    msg.url += msg.url.slice(-1) !== '?' && msg.language ? '&' : ''\n    msg.url += msg.language ? \"language=\" + msg.language : ''\n}\n\n\n//msg.url += '&language=' + msg.language\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            [
                "039c4e0195b3098c",
                "66dde755df0fef0e"
            ]
        ]
    },
    {
        "id": "d58f4c530fb4f929",
        "type": "switch",
        "z": "9bc00d62.26d47",
        "name": "",
        "property": "skills.textLanguageDetection.setup",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 300,
        "wires": [
            [
                "43688b135db62c20",
                "5949412936b04735"
            ],
            [
                "d7b51759dea72cd8",
                "8ab0df33191fe1dc"
            ]
        ]
    },
    {
        "id": "ebf852c6fd3ec939",
        "type": "subflow:a85c93b74d9f6110",
        "z": "9bc00d62.26d47",
        "name": "",
        "env": [
            {
                "name": "packageName",
                "value": "/home/ostrop/.node-red",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "43688b135db62c20",
        "type": "switch",
        "z": "9bc00d62.26d47",
        "name": "",
        "property": "skills.textLanguageDetection.activate",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 320,
        "wires": [
            [
                "66dde755df0fef0e"
            ],
            [
                "8954e87.a290f18",
                "37ee47439226efa0"
            ]
        ]
    },
    {
        "id": "d7b51759dea72cd8",
        "type": "change",
        "z": "9bc00d62.26d47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "packageName",
                "pt": "msg",
                "to": "languagedetect",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 20,
        "wires": [
            [
                "ebf852c6fd3ec939"
            ]
        ]
    },
    {
        "id": "5949412936b04735",
        "type": "debug",
        "z": "9bc00d62.26d47",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "66dde755df0fef0e",
        "type": "debug",
        "z": "9bc00d62.26d47",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 260,
        "wires": []
    },
    {
        "id": "37ee47439226efa0",
        "type": "debug",
        "z": "9bc00d62.26d47",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "8ab0df33191fe1dc",
        "type": "debug",
        "z": "9bc00d62.26d47",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 220,
        "wires": []
    },
    {
        "id": "40046e04a6aaeae2",
        "type": "change",
        "z": "9bc00d62.26d47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & (port ? ':' & port :  '')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "039c4e0195b3098c",
        "type": "change",
        "z": "9bc00d62.26d47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "post",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 520,
        "wires": [
            [
                "a5c454a0ea6f82cf"
            ]
        ]
    },
    {
        "id": "ccd8aea60135bae1",
        "type": "function",
        "z": "9bc00d62.26d47",
        "name": "Split in sentences",
        "func": "flow.set(\"currentSentenceIndex\",0)\nflow.set(\"sentences\", msg.payload.split('.'))\nmsg.payload = msg.payload.split('.')[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 240,
        "wires": [
            [
                "88a33404cd323cb7",
                "afd3671ecf8d5bf9"
            ]
        ]
    },
    {
        "id": "c1453d6cf2e1de5b",
        "type": "change",
        "z": "9bc00d62.26d47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "currentSentenceIndex",
                "pt": "flow",
                "to": "$flowContext(\"currentSentenceIndex\")+1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 680,
        "wires": [
            [
                "9c936bc8f99673db",
                "b124ab8971e60280"
            ]
        ]
    },
    {
        "id": "9c936bc8f99673db",
        "type": "switch",
        "z": "9bc00d62.26d47",
        "name": "",
        "property": "$flowContext(\"currentSentenceIndex\")",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "lt",
                "v": "$count($flowContext(\"sentences\"))",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 620,
        "wires": [
            [
                "59923414d6ac010e"
            ]
        ]
    },
    {
        "id": "59923414d6ac010e",
        "type": "change",
        "z": "9bc00d62.26d47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext(\"sentences\")[$flowContext(\"currentSentenceIndex\")]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 600,
        "wires": [
            [
                "25fd0b67957b30ed",
                "a5c454a0ea6f82cf"
            ]
        ]
    },
    {
        "id": "25fd0b67957b30ed",
        "type": "debug",
        "z": "9bc00d62.26d47",
        "name": "debug 160",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 600,
        "wires": []
    },
    {
        "id": "afd3671ecf8d5bf9",
        "type": "debug",
        "z": "9bc00d62.26d47",
        "name": "debug 161",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 320,
        "wires": []
    },
    {
        "id": "b124ab8971e60280",
        "type": "debug",
        "z": "9bc00d62.26d47",
        "name": "debug 162",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 780,
        "wires": []
    },
    {
        "id": "a5c454a0ea6f82cf",
        "type": "change",
        "z": "9bc00d62.26d47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "textSpeaked",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "8954e87.a290f18"
            ]
        ]
    },
    {
        "id": "2eb18d86.04b7c2",
        "type": "switch",
        "z": "556a42b9.3f02cc",
        "name": "1st intent",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "comment monologue fonctionnne",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "comment monologue marche",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "présente-moi monologue",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "présente monologue",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "présenter monologue",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "décris moi monologue",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "liste des commandes vocales",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 8,
        "x": 340,
        "y": 1100,
        "wires": [
            [
                "9fe47860.660488"
            ],
            [
                "9fe47860.660488"
            ],
            [
                "9fe47860.660488",
                "1fe8b657.9b3e3a"
            ],
            [
                "9fe47860.660488"
            ],
            [
                "9fe47860.660488"
            ],
            [
                "9fe47860.660488"
            ],
            [
                "d1939f39.ffb01"
            ],
            [
                "5f7967de.091b38",
                "f1fe2898.6c4d48"
            ]
        ]
    },
    {
        "id": "9fc079c7.8384b8",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Stop monologue from Mycroft",
        "info": "Outup the valu of flow.monologue",
        "x": 900,
        "y": 2080,
        "wires": []
    },
    {
        "id": "fe09029e.f3538",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Explanation about this subflow",
        "info": "This subflow is use to create a note text wich haven't purpose to be stock like that. This note is use to set a field of an other object when you need time to think of it. Monologue skill can be use as a CRUD tools in a text",
        "x": 700,
        "y": 960,
        "wires": []
    },
    {
        "id": "1429dca4.cbcca3",
        "type": "subflow:9bc00d62.26d47",
        "z": "556a42b9.3f02cc",
        "name": "",
        "env": [],
        "x": 1050,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "9fe47860.660488",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Ce subflow est utilisé stocker temporairement une note de texte ayant pour but d'être intégrée dans un autre objet. Il peut également servire pour effectué des opérations C R U D sur du texte.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1000,
        "wires": [
            [
                "155dd4a2.15e8ab"
            ]
        ],
        "info": "In string to set msg.payload :\n"
    },
    {
        "id": "34782180.3708ce",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Le monologue est terminé.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 2120,
        "wires": [
            [
                "47df1df5.83cb74"
            ]
        ]
    },
    {
        "id": "22810b13.178e84",
        "type": "subflow:9bc00d62.26d47",
        "z": "556a42b9.3f02cc",
        "name": "",
        "x": 1250,
        "y": 2120,
        "wires": [
            [
                "deb80190.a3891"
            ]
        ]
    },
    {
        "id": "deb80190.a3891",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "monologue",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "27b3b9b7.ede676",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Restart listenig",
        "info": "Incoming JSON payloads from Mycroft to Node-Red\n\n\n\t{\"type\": \"node_red.fallback\", \"data\": {\"utterance\": \"<text of utterance>\", \"norm_utt\": \"echo\", \"lang\": \"en-US\"}, \"context\": \t{\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}\n\n\n\t{\"type\": \"node_red.converse\", \"data\": {\"utterance\": \"<text of utterance>\"}, \"context\": {\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}",
        "x": 860,
        "y": 2380,
        "wires": []
    },
    {
        "id": "1fe8b657.9b3e3a",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 650,
        "y": 1040,
        "wires": []
    },
    {
        "id": "47df1df5.83cb74",
        "type": "template",
        "z": "556a42b9.3f02cc",
        "name": "speak_payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n\"type\": \"node_red.speak\",\n\"data\": {\n\"utterance\": \"{{payload}}\"\n},\n\"context\": {}\n}",
        "output": "json",
        "x": 1060,
        "y": 2120,
        "wires": [
            [
                "22810b13.178e84"
            ]
        ]
    },
    {
        "id": "95f9dbba.90f0f8",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Setup converse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "5000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "converse",
                "pt": "msg",
                "to": "mycroftMonologue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 2500,
        "wires": [
            [
                "b40e48bb.87b0f8"
            ]
        ]
    },
    {
        "id": "dc59aa1d.21b118",
        "type": "template",
        "z": "556a42b9.3f02cc",
        "name": "speak_payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n\"type\": \"node_red.speak\",\n\"speak_twice\": 0,\n\"data\": {\n\"utterance\": \"{{payload}}\"\n},\n\"context\": {}\n}",
        "output": "json",
        "x": 1940,
        "y": 2500,
        "wires": [
            [
                "71710072.31396"
            ]
        ]
    },
    {
        "id": "71710072.31396",
        "type": "subflow:330978c5.bafdb8",
        "z": "556a42b9.3f02cc",
        "name": "",
        "env": [],
        "x": 2150,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "5d61f5e1.34b00c",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Set flow.monologuecount",
        "rules": [
            {
                "t": "set",
                "p": "monologue",
                "pt": "flow",
                "to": "contextFlow.monologue.count + 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 2500,
        "wires": [
            [
                "95f9dbba.90f0f8"
            ]
        ]
    },
    {
        "id": "6ce02282.74a1ec",
        "type": "switch",
        "z": "556a42b9.3f02cc",
        "name": "Check count of restart to display help",
        "property": "count",
        "propertyType": "flow",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 930,
        "y": 2460,
        "wires": [
            [
                "944b6d4c.00fa7"
            ],
            [
                "89635e35.727f5"
            ],
            [
                "5d61f5e1.34b00c"
            ]
        ]
    },
    {
        "id": "944b6d4c.00fa7",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Set monologue.count",
        "rules": [
            {
                "t": "set",
                "p": "monologue.count",
                "pt": "flow",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 2420,
        "wires": [
            [
                "da42c040.1ef71"
            ]
        ]
    },
    {
        "id": "51f55353.6acc7c",
        "type": "link in",
        "z": "556a42b9.3f02cc",
        "name": "Restart listening",
        "links": [
            "da42c040.1ef71"
        ],
        "x": 795,
        "y": 2420,
        "wires": [
            [
                "6ce02282.74a1ec"
            ]
        ]
    },
    {
        "id": "da42c040.1ef71",
        "type": "link out",
        "z": "556a42b9.3f02cc",
        "name": "Go to restart listening",
        "links": [
            "51f55353.6acc7c"
        ],
        "x": 1375,
        "y": 2420,
        "wires": []
    },
    {
        "id": "9e8fe026.87ba",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "First talk",
        "info": "",
        "x": 100,
        "y": 700,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus-icon.png"
    },
    {
        "id": "c945b6f.8dd3a48",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Some need to global functionnality of mycroft at this level of converse",
        "info": "",
        "x": 280,
        "y": 740,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus.png"
    },
    {
        "id": "b0d7b845.e7bc48",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Setup list of commande than user can directly speak",
        "info": "",
        "x": 230,
        "y": 780,
        "wires": []
    },
    {
        "id": "7752bd96.aaaea4",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Direct skills intent",
        "info": "",
        "x": 860,
        "y": 1840,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus.png"
    },
    {
        "id": "dab7f83a.8a8468",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "List of skills ",
        "info": "",
        "x": 850,
        "y": 1880,
        "wires": []
    },
    {
        "id": "a1b78490.a5fc28",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Le ou les commandes dans le subflow dolibarr Csont \" & $join(contextFlow.intentsSecondTalkList[\",\"])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 1920,
        "wires": [
            [
                "2679f1ca.fe877e"
            ]
        ]
    },
    {
        "id": "85944716.472168",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "set flow.intentsFirstTalkList",
        "rules": [
            {
                "t": "set",
                "p": "$parent.$parent.intentsFirstTalkList",
                "pt": "flow",
                "to": "[\"présente-moi monolgue\"]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 860,
        "wires": [
            [
                "af11b716.b5bb88"
            ]
        ]
    },
    {
        "id": "af11b716.b5bb88",
        "type": "link out",
        "z": "556a42b9.3f02cc",
        "name": "Go to 1st intent",
        "links": [
            "836ff554.50b078"
        ],
        "x": 515,
        "y": 860,
        "wires": []
    },
    {
        "id": "836ff554.50b078",
        "type": "link in",
        "z": "556a42b9.3f02cc",
        "name": "1st intent",
        "links": [
            "af11b716.b5bb88"
        ],
        "x": 195,
        "y": 1180,
        "wires": [
            [
                "2eb18d86.04b7c2",
                "3d4b25a6.673b9a"
            ]
        ]
    },
    {
        "id": "d52ab2ed.8320e",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Install of needs",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus-icon.png"
    },
    {
        "id": "b3df852e.441c78",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Configuration of needs",
        "info": "",
        "x": 140,
        "y": 240,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus-icon.png"
    },
    {
        "id": "c3028521.b7f858",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Model data activation when instance of subflow is create",
        "info": "",
        "x": 240,
        "y": 280,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus.png"
    },
    {
        "id": "b51b5ecc.4ab57",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "monologue model",
        "info": "In the mdoel certains thing have to be respected.\n\n * You must set the requiere field of the API to empty\n * You must set the optional field of the API to null\n * You can and sometimes must define a check for each property wich needs a confirmation dialog step\n * You must define wich property is important to count the optionnal field you enter and processing to check before send request API. ",
        "x": 130,
        "y": 320,
        "wires": []
    },
    {
        "id": "eafbe892.759b08",
        "type": "switch",
        "z": "556a42b9.3f02cc",
        "name": "Check flow.monologue",
        "property": "$parent.$parent.monologue",
        "propertyType": "flow",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 360,
        "wires": [
            [
                "34b0ab6d.b18aa4"
            ],
            []
        ]
    },
    {
        "id": "68381f28.be128",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Storage configuration if not handle before (not the case here)",
        "info": "see dolibarr subflow",
        "x": 260,
        "y": 440,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus.png"
    },
    {
        "id": "34b0ab6d.b18aa4",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "set flow.monologue",
        "rules": [
            {
                "t": "set",
                "p": "$parent.$parent.monologue",
                "pt": "flow",
                "to": "\"\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "247cf4f2.c460fc",
        "type": "switch",
        "z": "556a42b9.3f02cc",
        "name": "intents",
        "property": "lastConverse",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mycroftMonologue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 840,
        "wires": [
            [
                "3d61f2a0.d40a8e",
                "f15aae05.3bbe4"
            ],
            [
                "85944716.472168",
                "ce877e36.3e62a"
            ]
        ]
    },
    {
        "id": "491586b4.6a8cf8",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Put data of intent in flow variable",
        "info": "This way of the check must to be link to something with ended with adding a converse name in the last entry en the array global.converses ",
        "x": 710,
        "y": 1220,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus.png"
    },
    {
        "id": "3d61f2a0.d40a8e",
        "type": "link out",
        "z": "556a42b9.3f02cc",
        "name": "Go to converse",
        "links": [
            "1432c0a5.06021f"
        ],
        "x": 255,
        "y": 820,
        "wires": []
    },
    {
        "id": "143ddec1.7ee3e1",
        "type": "link in",
        "z": "556a42b9.3f02cc",
        "name": "2st intent",
        "links": [
            "fe7fc422.1bad38"
        ],
        "x": 75,
        "y": 2240,
        "wires": [
            [
                "10b50d48.7b3873"
            ]
        ]
    },
    {
        "id": "83c79755.b39798",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Direct skills intent",
        "info": "",
        "x": 660,
        "y": 920,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus.png"
    },
    {
        "id": "70609dcf.c4de64",
        "type": "subflow:9bc00d62.26d47",
        "z": "556a42b9.3f02cc",
        "name": "",
        "x": 1010,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "3d1b859e.3cd20a",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "List of voice command ",
        "info": "",
        "x": 680,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d1939f39.ffb01",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Le ou les commandes dans le subflow dolibarr Csont \" & $join(contextFlow.intentsFirstTalkList[\",\"])",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1140,
        "wires": [
            [
                "62e33d1d.73c054"
            ]
        ]
    },
    {
        "id": "62e33d1d.73c054",
        "type": "template",
        "z": "556a42b9.3f02cc",
        "name": "speak_payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n\"type\": \"node_red.speak\",\n\"speak_twice\": 0,\n\"data\": {\n\"utterance\": \"{{payload}}\"\n},\n\"context\": {}\n}",
        "output": "json",
        "x": 840,
        "y": 1140,
        "wires": [
            [
                "70609dcf.c4de64"
            ]
        ]
    },
    {
        "id": "10b50d48.7b3873",
        "type": "switch",
        "z": "556a42b9.3f02cc",
        "name": "2nd intent",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "liste des commandes vocales",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "crée un paragraphe",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "stoper le monologue",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "stop le monologue",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "du monologue",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "le monologue",
                "vt": "str"
            },
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 8,
        "x": 480,
        "y": 2240,
        "wires": [
            [
                "a1b78490.a5fc28"
            ],
            [
                "771e4ff8.a15b7"
            ],
            [
                "34782180.3708ce"
            ],
            [
                "34782180.3708ce"
            ],
            [
                "886bacc8.0bdd9"
            ],
            [],
            [
                "6ce02282.74a1ec",
                "ba9ea183.cd496"
            ],
            [
                "9bd00b7f.f47578"
            ]
        ]
    },
    {
        "id": "17b0d2cc.b6069d",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Let's go to converse",
        "info": "",
        "x": 130,
        "y": 1520,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus-icon.png"
    },
    {
        "id": "f86e69fe.defd78",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Some need to global functionnality of mycroft at this level of converse",
        "info": "",
        "x": 280,
        "y": 1560,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus.png"
    },
    {
        "id": "abf39688.aec138",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Setup list of commande than user can directly speak",
        "info": "",
        "x": 230,
        "y": 1600,
        "wires": []
    },
    {
        "id": "edcc6f7c.b5a76",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "set flow.intentsSecondTalkList",
        "rules": [
            {
                "t": "set",
                "p": "intentsFirstTalkList",
                "pt": "flow",
                "to": "[\"supprimer brouillon\"]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 1640,
        "wires": [
            [
                "f47fe01b.0de69"
            ]
        ]
    },
    {
        "id": "1432c0a5.06021f",
        "type": "link in",
        "z": "556a42b9.3f02cc",
        "name": "Converse",
        "links": [
            "3d61f2a0.d40a8e"
        ],
        "x": 55,
        "y": 1640,
        "wires": [
            [
                "edcc6f7c.b5a76"
            ]
        ]
    },
    {
        "id": "f47fe01b.0de69",
        "type": "link out",
        "z": "556a42b9.3f02cc",
        "name": "Go to check count",
        "links": [
            "b86e9599.71d798"
        ],
        "x": 415,
        "y": 1640,
        "wires": []
    },
    {
        "id": "80846cc2.11f45",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Needed to make autospeech after a number of empty intent",
        "info": "Incoming JSON payloads from Mycroft to Node-Red\n\n\n\t{\"type\": \"node_red.fallback\", \"data\": {\"utterance\": \"<text of utterance>\", \"norm_utt\": \"echo\", \"lang\": \"en-US\"}, \"context\": \t{\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}\n\n\n\t{\"type\": \"node_red.converse\", \"data\": {\"utterance\": \"<text of utterance>\"}, \"context\": {\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}",
        "x": 250,
        "y": 1720,
        "wires": []
    },
    {
        "id": "b86e9599.71d798",
        "type": "link in",
        "z": "556a42b9.3f02cc",
        "name": "Check count",
        "links": [
            "f47fe01b.0de69"
        ],
        "x": 55,
        "y": 1760,
        "wires": [
            [
                "270d6840.a80d08"
            ]
        ]
    },
    {
        "id": "270d6840.a80d08",
        "type": "switch",
        "z": "556a42b9.3f02cc",
        "name": "Check count",
        "property": "$parent.count",
        "propertyType": "flow",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "325c5391.cd03bc"
            ],
            [
                "dd2ef684.bd5a38"
            ]
        ]
    },
    {
        "id": "dd2ef684.bd5a38",
        "type": "link out",
        "z": "556a42b9.3f02cc",
        "name": "Go to 2nd intent",
        "links": [],
        "x": 295,
        "y": 1800,
        "wires": []
    },
    {
        "id": "325c5391.cd03bc",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Remove converse situation",
        "func": "global.set(\"converses\", global.get(\"converses\").slice(global.get(\"converses\").lastIndexOf(\"mycroftMonologue\"),1))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 1760,
        "wires": [
            [
                "fe7fc422.1bad38"
            ]
        ]
    },
    {
        "id": "fe7fc422.1bad38",
        "type": "link out",
        "z": "556a42b9.3f02cc",
        "name": "Go to 2nd intent",
        "links": [
            "143ddec1.7ee3e1"
        ],
        "x": 555,
        "y": 1760,
        "wires": []
    },
    {
        "id": "788b558b.46905c",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Create a new paragraphe wich is a \\n",
        "info": "Incoming JSON payloads from Mycroft to Node-Red\n\n\n\t{\"type\": \"node_red.fallback\", \"data\": {\"utterance\": \"<text of utterance>\", \"norm_utt\": \"echo\", \"lang\": \"en-US\"}, \"context\": \t{\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}\n\n\n\t{\"type\": \"node_red.converse\", \"data\": {\"utterance\": \"<text of utterance>\"}, \"context\": {\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}",
        "x": 930,
        "y": 1980,
        "wires": []
    },
    {
        "id": "771e4ff8.a15b7",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "monologue",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 2020,
        "wires": [
            [
                "2980c1b.178b63e"
            ]
        ]
    },
    {
        "id": "2980c1b.178b63e",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Split params",
        "func": "msg.payload = msg.payload + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 2020,
        "wires": [
            [
                "e50bfbee.df4a38"
            ]
        ]
    },
    {
        "id": "ba64dda0.0ae49",
        "type": "subflow:330978c5.bafdb8",
        "z": "556a42b9.3f02cc",
        "name": "",
        "env": [],
        "x": 1690,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "5f7967de.091b38",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Record payload in flow.monologue",
        "func": "if(msg.payload.includes('monologue')){\n    msg.payload = msg.payload.replace('monologue','');\n    msg.debug = msg.payload\n}\nif(flow.get('$parent.$parent.monologue')){\n    msg.newMonologue = flow.get('$parent.$parent.monologue') + msg.payload;\n    msg.debug5 = msg.newMonologue\n}else{\n    msg.newMonologue = msg.payload;\n    msg.debug5 = msg.newMonologue\n}\n\nmsg.debug2 = msg.newMonologue\nflow.set('$parent.$parent.monologue', msg.newMonologue)\n//msg.payloadArray = msg.payload.split(\",\");\n//for(let i=0; i<msg.payloadArray.length; i++){\n//    if(msg.payloadArray[i].includes(\"premier\")){\n//        flow.set(\"$parent.monologue.edit.order\",\"premier\");\n//    }\n//    if(msg.payloadArray[i].includes(\"dernier\")){\n//        flow.set(\"$parent.monologue.edit.order\",\"dernier\");\n//    }\n//    if(msg.payloadArray[i].includes(\"phrase\")){\n//        flow.set(\"$parent.monologue.edit.type\",\"phrase\");\n//    }\n//    if(msg.payloadArray[i].includes(\"paragraphe\")){\n//        flow.set(\"$parent.monologue.edit.type\",\"paragraphe\");\n//    }\n//    if(msg.payloadArray[i].includes(\",\") || msg.payloadArray[i].includes(\".\") || msg.payloadArray[i].includes(\"!\") || msg.payloadArray[i].includes(\",\") ){\n//        flow.set(\"$parent.monologue\",msg.payloadArray[i]); \n//    }\n//    regexp = /[0-9]/;\n//    iRegexp = msg.payload.match(regexp).length;\n//    if(iRegexp) {\n//        flow.set(\"$parent.monologue.edit.qty\",msg.payload.match(regexp)[i]);\n//    }else {\n//        flow.set(\"$parent.monologue.edit.qty\", 1);\n//    }\n//}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1300,
        "wires": [
            [
                "2fd49b76.f95704",
                "ffc8c30a.af90f"
            ]
        ]
    },
    {
        "id": "80ef748b.74db68",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Read all or a part of flow.monologue",
        "info": "Incoming JSON payloads from Mycroft to Node-Red\n\n\n\t{\"type\": \"node_red.fallback\", \"data\": {\"utterance\": \"<text of utterance>\", \"norm_utt\": \"echo\", \"lang\": \"en-US\"}, \"context\": \t{\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}\n\n\n\t{\"type\": \"node_red.converse\", \"data\": {\"utterance\": \"<text of utterance>\"}, \"context\": {\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}",
        "x": 920,
        "y": 2180,
        "wires": []
    },
    {
        "id": "231575bb.55a0ea",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "d": true,
        "name": "Split intent in property of global.monologue object ",
        "func": "msg.monologue3 = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus? Suspendisse lectus tortor, dignissim sit amet. adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi?\"\nmsg.monologue = msg.monologue3\nfor (i=0; i<global.get('confSynthaxMark.sentence').length; i++) {\n    if (msg.monologue.includes(global.get('confSynthaxMark.sentence')[i]) && global.get('confSynthaxMark.sentence')[i] !== \".\") {\n        for(var j=0; j<msg.monologue.length; j++) {\n            if (msg.monologue[j] === global.get('confSynthaxMark.sentence')[i]){\n                msg.monologue = msg.monologue.substr(0, j) + '.' + msg.monologue.substr(j+1)\n            }\n        }\n    }\n}\nif(msg.payload.includes(\"phrase\")){\n    msg.monologueToSpeak = msg.monologue.split('.');\n}\nif(msg.payload.includes(\"paragraphe\")){\n    msg.monologueToSpeak = msg.monologue.split('/n');\n}\nif(msg.payload.match(/[0-9]/g)) {\n    nb = msg.payload.match(/[0-9]/g).join('')\n    if(msg.payload.includes(\"premier\") || msg.payload.includes(\"première\")){\n        msg.monologueToSpeak = msg.monologueToSpeak.slice(0, parseInt(nb)+1);\n        msg.monologueToSpeak = msg.monologueToSpeak.join('.')\n        msg.monologueToSpeak = msg.monologue3.slice(0, msg.monologueToSpeak.length)\n    }\n    if(msg.payload.includes(\"dernière\") || msg.payload.includes(\"dernier\")){\n        msg.monologueToSpeak = msg.monologueToSpeak.slice(msg.monologueToSpeak.length - (parseInt(nb)+1), msg.monologueToSpeak.length);\n        msg.monologueToSpeak = msg.monologueToSpeak.join('.')\n        msg.monologueToSpeak = msg.monologue3.slice(msg.monologue3.length - (msg.monologueToSpeak.length-1), msg.monologue3.length)\n    }\n}else {\n    flow.set(\"monologue.edit.qty\", 1);\n    if(msg.payload.includes(\"premier\") || msg.payload.includes(\"première\")){\n        msg.monologueToSpeak = msg.monologueToSpeak.slice(0, 1);\n        msg.monologueToSpeak = msg.monologueToSpeak.join('.')\n        msg.monologueToSpeak = msg.monologue3.slice(0, msg.monologueToSpeak.length)\n    }\n    if(msg.payload.includes(\"dernière\") || msg.payload.includes(\"dernier\")){\n        msg.monologueToSpeak = msg.monologueToSpeak.slice(msg.monologueToSpeak.length - 2, msg.monologueToSpeak.length);\n        msg.monologueToSpeak = msg.monologueToSpeak.join('.')\n        msg.monologueToSpeak = msg.monologue3.slice(msg.monologue3.length - (msg.monologueToSpeak.length-1), msg.monologue3.length)\n    }\n}\nif(msg.payload.includes(\"tout le monologue\")){\n    msg.monologueToSpeak = msg.monologue3\n}\nmsg.payload = msg.monologueToSpeak\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 9,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2220,
        "wires": [
            [
                "8c464d07.1e1c4"
            ]
        ]
    },
    {
        "id": "886bacc8.0bdd9",
        "type": "switch",
        "z": "556a42b9.3f02cc",
        "name": "2nd intent",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "lis",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "supprime",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 2260,
        "wires": [
            [
                "231575bb.55a0ea"
            ],
            [
                "59899837.914d58"
            ]
        ]
    },
    {
        "id": "ca977ec4.094cc",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Delete all or a part of flow.monologue",
        "info": "Incoming JSON payloads from Mycroft to Node-Red\n\n\n\t{\"type\": \"node_red.fallback\", \"data\": {\"utterance\": \"<text of utterance>\", \"norm_utt\": \"echo\", \"lang\": \"en-US\"}, \"context\": \t{\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}\n\n\n\t{\"type\": \"node_red.converse\", \"data\": {\"utterance\": \"<text of utterance>\"}, \"context\": {\"client_name\": \"mycroft_listener\", \"source\": \"audio\", \"destination\": [\"skills\"]}}",
        "x": 930,
        "y": 2280,
        "wires": []
    },
    {
        "id": "59899837.914d58",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Split intent in property of global.monologue object ",
        "func": "msg.monologue3 = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus? Suspendisse lectus tortor, dignissim sit amet. adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi?\"\nmsg.monologue = msg.monologue3\nfor (i=0; i<global.get('confSynthaxMark.sentence').length; i++) {\n    if (msg.monologue.includes(global.get('confSynthaxMark.sentence')[i]) && global.get('confSynthaxMark.sentence')[i] !== \".\") {\n        for(var j=0; j<msg.monologue.length; j++) {\n            if (msg.monologue[j] === global.get('confSynthaxMark.sentence')[i]){\n                msg.monologue = msg.monologue.substr(0, j) + '.' + msg.monologue.substr(j+1)\n            }\n        }\n    }\n}\nif(msg.payload.includes(\"phrase\")){\n    msg.monologueToDelete = msg.monologue.split('.');\n}\nif(msg.payload.includes(\"paragraphe\")){\n    msg.monologueToDelete = msg.monologue.split('/n');\n}\nif(msg.payload.match(/[0-9]/g)) {\n    nb = msg.payload.match(/[0-9]/g).join('')\n    if(msg.payload.includes(\"premier\") || msg.payload.includes(\"première\")){\n        msg.monologueToDelete = msg.monologueToDelete.slice(0, parseInt(nb)+1);\n        msg.monologueToDelete = msg.monologueToDelete.join('.')\n        msg.newMonologue = msg.monologue3.slice(msg.monologueToDelete.length, msg.monologue3.length)\n    }\n    if(msg.payload.includes(\"dernière\") || msg.payload.includes(\"dernier\")){\n        msg.monologueToDelete = msg.monologueToDelete.slice(msg.monologueToDelete.length - (parseInt(nb)+1), msg.monologueToDelete.length);\n        msg.monologueToDelete = msg.monologueToDelete.join('.')\n        msg.newMonologue = msg.monologue3.slice(0, msg.monologue3.length - (msg.monologueToSpeak.length-1))\n    }\n}else {\n    if(msg.payload.includes(\"premier\") || msg.payload.includes(\"première\")){\n        msg.monologueToDelete = msg.monologueToDelete.slice(0, 1);\n        msg.monologueToDelete = msg.monologueToDelete.join('.')\n        msg.newMonologue = msg.monologue3.slice(msg.monologueToSpeak.length, msg.monologue3.length )\n    }\n    if(msg.payload.includes(\"dernière\") || msg.payload.includes(\"dernier\")){\n        msg.monologueToDelete = msg.monologueToDelete.slice(msg.monologueToSpeak.length - 2, msg.monologueToDelete.length);\n        msg.monologueToDelete = msg.monologueToDelete.join('.')\n        msg.nexMonologue = msg.monologue3.slice(0, msg.monologue3.length - (msg.monologueToSpeak.length-1))\n    }\n}\nif(msg.payload.includes(\"tout le monologue\")){\n    msg.newMonologue = \"\"\n}\nflow.set('$parent.monologue', msg.newMonologue )\nmsg.payload = \"L'opération demandée a été réalisée\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 2320,
        "wires": [
            [
                "5213daae.c3a734"
            ]
        ]
    },
    {
        "id": "89635e35.727f5",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Setup converse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Le ou les commandes dans le subflow dolibarr Csont \" & $join(contextFlow.intentsSecondTalkList[\",\"])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "5000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "converse",
                "pt": "msg",
                "to": "mycroftMonologue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2460,
        "wires": [
            [
                "8dfd70ae.4520f"
            ]
        ]
    },
    {
        "id": "a9b04af3.0c18f8",
        "type": "template",
        "z": "556a42b9.3f02cc",
        "name": "speak_payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n\"type\": \"node_red.speak\",\n\"speak_twice\": 0,\n\"data\": {\n\"utterance\": \"{{payload}}\"\n},\n\"context\": {}\n}",
        "output": "json",
        "x": 1700,
        "y": 2460,
        "wires": [
            [
                "8689394d.2df258"
            ]
        ]
    },
    {
        "id": "8689394d.2df258",
        "type": "subflow:330978c5.bafdb8",
        "z": "556a42b9.3f02cc",
        "name": "",
        "env": [],
        "x": 1890,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "6f1ada80.d86224",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Push new converse to converses",
        "func": "msg.converses = global.get(\"converses\")\nmsg.converses = msg.converses.push(msg.converse)\n//global.set(\"converses\",msg.converses);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1300,
        "wires": [
            [
                "edf43046.1a081"
            ]
        ]
    },
    {
        "id": "b40e48bb.87b0f8",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Push new converse to converses",
        "func": "msg.converses = global.get(\"converses\")\nmsg.converses = msg.converses.push(msg.converse)\n//global.set(\"converses\",msg.converses);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1700,
        "y": 2500,
        "wires": [
            [
                "dc59aa1d.21b118"
            ]
        ]
    },
    {
        "id": "8dfd70ae.4520f",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Push new converse to converses",
        "func": "msg.converses = global.get(\"converses\")\nmsg.converses = msg.converses.push(msg.converse)\n//global.set(\"converses\",msg.converses);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1460,
        "y": 2460,
        "wires": [
            [
                "a9b04af3.0c18f8"
            ]
        ]
    },
    {
        "id": "9f94a94d.2f8658",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Push new converse to converses",
        "func": "msg.converses = global.get(\"converses\")\nmsg.converses = msg.converses.push(msg.converse)\n//global.set(\"converses\",msg.converses);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1440,
        "y": 2020,
        "wires": [
            [
                "ba64dda0.0ae49"
            ]
        ]
    },
    {
        "id": "e50bfbee.df4a38",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Setup converse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Le paragraphe a été ajouté",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "5000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "converse",
                "pt": "msg",
                "to": "mycroftMonologue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2020,
        "wires": [
            [
                "9f94a94d.2f8658"
            ]
        ]
    },
    {
        "id": "ffc8c30a.af90f",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Setup converse",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "2000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "converse",
                "pt": "msg",
                "to": "mycroftMonologue",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 1300,
        "wires": [
            [
                "6f1ada80.d86224"
            ]
        ]
    },
    {
        "id": "56564499.d48bfc",
        "type": "subflow:330978c5.bafdb8",
        "z": "556a42b9.3f02cc",
        "name": "",
        "env": [],
        "x": 1550,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "953d5479.b1d108",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Push new converse to converses",
        "func": "msg.converses = global.get(\"converses\")\nmsg.converses = msg.converses.push(msg.converse)\n//global.set(\"converses\",msg.converses);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1300,
        "y": 1920,
        "wires": [
            [
                "56564499.d48bfc"
            ]
        ]
    },
    {
        "id": "2679f1ca.fe877e",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Setup converse",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "5000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "converse",
                "pt": "msg",
                "to": "mycroftMonologue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 1920,
        "wires": [
            [
                "953d5479.b1d108"
            ]
        ]
    },
    {
        "id": "76a8838c.62569c",
        "type": "subflow:330978c5.bafdb8",
        "z": "556a42b9.3f02cc",
        "name": "",
        "env": [],
        "x": 1770,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "79bbf853.5b88c8",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Push new converse to converses",
        "func": "msg.converses = global.get(\"converses\")\nmsg.converses = msg.converses.push(msg.converse)\n//global.set(\"converses\",msg.converses);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1520,
        "y": 2220,
        "wires": [
            [
                "76a8838c.62569c"
            ]
        ]
    },
    {
        "id": "8c464d07.1e1c4",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Setup converse",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "5000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "converse",
                "pt": "msg",
                "to": "mycroftMonologue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 2220,
        "wires": [
            [
                "79bbf853.5b88c8"
            ]
        ]
    },
    {
        "id": "4751b766.11a018",
        "type": "subflow:330978c5.bafdb8",
        "z": "556a42b9.3f02cc",
        "name": "",
        "env": [],
        "x": 1770,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "aec59ecb.f53cc",
        "type": "function",
        "z": "556a42b9.3f02cc",
        "name": "Push new converse to converses",
        "func": "msg.converses = global.get(\"converses\")\nmsg.converses = msg.converses.push(msg.converse)\n//global.set(\"converses\",msg.converses);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1520,
        "y": 2320,
        "wires": [
            [
                "4751b766.11a018"
            ]
        ]
    },
    {
        "id": "5213daae.c3a734",
        "type": "change",
        "z": "556a42b9.3f02cc",
        "name": "Setup converse",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "5000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "converse",
                "pt": "msg",
                "to": "mycroftMonologue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 2320,
        "wires": [
            [
                "aec59ecb.f53cc"
            ]
        ]
    },
    {
        "id": "f49f0ee3.eb948",
        "type": "subflow:330978c5.bafdb8",
        "z": "556a42b9.3f02cc",
        "name": "",
        "env": [],
        "x": 1650,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "211e6f10.04b2",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 250,
        "y": 960,
        "wires": []
    },
    {
        "id": "ce877e36.3e62a",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 310,
        "y": 920,
        "wires": []
    },
    {
        "id": "3d4b25a6.673b9a",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 367.6666564941406,
        "y": 1263.3333740234375,
        "wires": []
    },
    {
        "id": "f15aae05.3bbe4",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 690,
        "y": 780,
        "wires": []
    },
    {
        "id": "155dd4a2.15e8ab",
        "type": "template",
        "z": "556a42b9.3f02cc",
        "name": "speak_payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n\"type\": \"node_red.speak\",\n\"speak_twice\": 0,\n\"data\": {\n\"utterance\": \"{{payload}}\"\n},\n\"context\": {}\n}",
        "output": "json",
        "x": 860,
        "y": 1000,
        "wires": [
            [
                "1429dca4.cbcca3"
            ]
        ]
    },
    {
        "id": "f1fe2898.6c4d48",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 650,
        "y": 1340,
        "wires": []
    },
    {
        "id": "a26b988d.edc218",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 630,
        "y": 860,
        "wires": []
    },
    {
        "id": "2fd49b76.f95704",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 990,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ba9ea183.cd496",
        "type": "debug",
        "z": "556a42b9.3f02cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 850,
        "y": 2520,
        "wires": []
    },
    {
        "id": "9e869a17.fb4e38",
        "type": "link in",
        "z": "556a42b9.3f02cc",
        "name": "Record monologue",
        "links": [
            "9bd00b7f.f47578"
        ],
        "x": 595,
        "y": 1260,
        "wires": [
            [
                "5f7967de.091b38"
            ]
        ]
    },
    {
        "id": "9bd00b7f.f47578",
        "type": "link out",
        "z": "556a42b9.3f02cc",
        "name": "Go to record monologue",
        "links": [
            "9e869a17.fb4e38"
        ],
        "x": 795,
        "y": 2620,
        "wires": []
    },
    {
        "id": "a230634f.2bb0f",
        "type": "comment",
        "z": "556a42b9.3f02cc",
        "name": "Return to the first talk to extact data in utterance",
        "info": "",
        "x": 960,
        "y": 2580,
        "wires": [],
        "icon": "node-red-contrib-modbus/modbus.png"
    },
    {
        "id": "edf43046.1a081",
        "type": "template",
        "z": "556a42b9.3f02cc",
        "name": "speak_payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n\"type\": \"node_red.speak\",\n\"speak_twice\": 0,\n\"data\": {\n\"utterance\": \"{{payload}}\"\n},\n\"context\": {}\n}",
        "output": "json",
        "x": 1460,
        "y": 1300,
        "wires": [
            [
                "f49f0ee3.eb948"
            ]
        ]
    },
    {
        "id": "44b2992861fc1d2d",
        "type": "http request",
        "z": "8b17cbb5aaac470d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1450,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "f06bbad1061c094c",
        "type": "change",
        "z": "8b17cbb5aaac470d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/sentences'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 320,
        "wires": [
            [
                "44b2992861fc1d2d"
            ]
        ]
    },
    {
        "id": "e4ce38940a9b2cf2",
        "type": "function",
        "z": "8b17cbb5aaac470d",
        "name": "Set priority of msg value",
        "func": "var list = ['protocol', 'host', 'port', 'path','method']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            [
                "b2a609a255ebeed1",
                "8246658e1a132944"
            ]
        ]
    },
    {
        "id": "b2a609a255ebeed1",
        "type": "debug",
        "z": "8b17cbb5aaac470d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 140,
        "wires": []
    },
    {
        "id": "8246658e1a132944",
        "type": "switch",
        "z": "8b17cbb5aaac470d",
        "name": "",
        "property": "method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "post",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 630,
        "y": 260,
        "wires": [
            [
                "33517c2da764efb0"
            ],
            [
                "c40802fd83045ef3"
            ],
            []
        ]
    },
    {
        "id": "35355d848acde2a6",
        "type": "change",
        "z": "8b17cbb5aaac470d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/sentences' ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 160,
        "wires": [
            [
                "44b2992861fc1d2d"
            ]
        ]
    },
    {
        "id": "33517c2da764efb0",
        "type": "function",
        "z": "8b17cbb5aaac470d",
        "name": "Set msg.headers",
        "func": "msg.headers = {}\nmsg.headers[\"Accept\"]= \"application/json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 200,
        "wires": [
            [
                "35355d848acde2a6",
                "b39ab007f2d25b86"
            ]
        ]
    },
    {
        "id": "c40802fd83045ef3",
        "type": "function",
        "z": "8b17cbb5aaac470d",
        "name": "Set msg.headers",
        "func": "msg.headers = {}\nmsg.headers[\"Content-Type\"] = \"application/json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "6982874a30bbda9c"
            ]
        ]
    },
    {
        "id": "b39ab007f2d25b86",
        "type": "debug",
        "z": "8b17cbb5aaac470d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 100,
        "wires": []
    },
    {
        "id": "6982874a30bbda9c",
        "type": "function",
        "z": "8b17cbb5aaac470d",
        "name": "Set Intents",
        "func": "msg.payload = {['intents/'+msg.path]: msg.payload}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "b39ab007f2d25b86",
                "f06bbad1061c094c"
            ]
        ]
    },
    {
        "id": "b60e0435bc78391c",
        "type": "function",
        "z": "0b3044d14d300449",
        "name": "Set priority of msg value",
        "func": "var list = ['protocol', 'host', 'port', 'path', 'slot', 'saveDifferences']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "ae1843fef648cce2",
                "834fa16dc6bc323c",
                "4c65128e6df7ef03"
            ]
        ]
    },
    {
        "id": "834fa16dc6bc323c",
        "type": "debug",
        "z": "0b3044d14d300449",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 80,
        "wires": []
    },
    {
        "id": "b3477b623a591109",
        "type": "http request",
        "z": "0b3044d14d300449",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 330,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ae1843fef648cce2",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/slots'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 500,
        "wires": [
            [
                "b3477b623a591109"
            ]
        ]
    },
    {
        "id": "9ce52eff960d26ac",
        "type": "switch",
        "z": "0b3044d14d300449",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 710,
        "y": 180,
        "wires": [
            [
                "5b7a985fa9ad85ac",
                "295175296887a62f"
            ],
            [
                "3fa11af85612ec10"
            ],
            [
                "7fb65621db8787c3",
                "3d133fecf8e4d8f5"
            ]
        ]
    },
    {
        "id": "cceb2ca08871a7a2",
        "type": "debug",
        "z": "0b3044d14d300449",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "3d133fecf8e4d8f5",
        "type": "debug",
        "z": "0b3044d14d300449",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 180,
        "wires": []
    },
    {
        "id": "5b7a985fa9ad85ac",
        "type": "debug",
        "z": "0b3044d14d300449",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 80,
        "wires": []
    },
    {
        "id": "3c70ac2150ee28ea",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "log",
                "pt": "msg",
                "to": "This slot doesn't exist",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "check",
                "pt": "msg",
                "to": "{\"exist\": false}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "7fb65621db8787c3",
        "type": "function",
        "z": "0b3044d14d300449",
        "name": "Analyse differences",
        "func": "let sameValuesLines=[]\nlet differentProvidedLines = []\n//let different = false\nfor (let i = 0; i < msg.slot.length; i++) {\n    let match = false\n    for (let j = 0; j < msg.payload.length; j++) {\n        msg.payload[j] = msg.payload[j].split(':')[0];\n        //node.send(msg,oldElement)\n        if ( msg.slot[i] === msg.payload[j]) {\n            let line = {}\n            line[msg.slot[i]] = j+1\n            sameValuesLines.push(line)\n            match = true\n            break\n            //newSlotValues.push(element)\n        }\n    }\n    if(match === false){\n        differentProvidedLines.push(msg.slot[i])\n    }\n}\nif (sameValuesLines === []){\n    msg.sameValuesLines = false\n}else{\n    msg.sameValuesLines = sameValuesLines\n}\nif (differentProvidedLines === []) {\n    msg.differentProvidedLines = false\n} else {\n    msg.differentProvidedLines = differentProvidedLines\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 300,
        "wires": [
            [
                "5c545bb6e7377f4b"
            ]
        ]
    },
    {
        "id": "cf3beec394e4a547",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "log",
                "pt": "msg",
                "to": "this slot already exist. Please use the rhasspu UI to modify existing slot",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4c65128e6df7ef03",
        "type": "subflow:88600a96538506de",
        "z": "0b3044d14d300449",
        "name": "",
        "x": 500,
        "y": 160,
        "wires": [
            [
                "cceb2ca08871a7a2",
                "9ce52eff960d26ac"
            ]
        ]
    },
    {
        "id": "295175296887a62f",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "log",
                "pt": "msg",
                "to": "I can't handle multiple slot",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7cb506ca0b92cba9",
        "type": "switch",
        "z": "0b3044d14d300449",
        "name": "",
        "property": "differences",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f3eb5ad2a87df227",
        "type": "function",
        "z": "0b3044d14d300449",
        "name": "Concat difference",
        "func": "msg.payload = msg.payload.concat(msg.differentProvidedLines)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 200,
        "wires": [
            [
                "1f88eec9a6df5602"
            ]
        ]
    },
    {
        "id": "55b40948a9236867",
        "type": "switch",
        "z": "0b3044d14d300449",
        "name": "",
        "property": "differentProvidedLines",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "7e15f7a40503d5c8"
            ],
            [
                "f793a17f171567ae"
            ]
        ]
    },
    {
        "id": "7e15f7a40503d5c8",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "log",
                "pt": "msg",
                "to": "\"The \" & $count(differentProvidedLines) &  \" values in message differentProvidedLines attribute were new.\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 340,
        "wires": [
            [
                "934a1451187e6306"
            ]
        ]
    },
    {
        "id": "3fa11af85612ec10",
        "type": "debug",
        "z": "0b3044d14d300449",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 140,
        "wires": []
    },
    {
        "id": "aa8e058572875724",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "log",
                "pt": "msg",
                "to": "\"The \" & $count(differentProvidedLines) &  \" values in message differentProvidedLines attribute were added.\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1570,
        "y": 220,
        "wires": [
            [
                "934a1451187e6306"
            ]
        ]
    },
    {
        "id": "f793a17f171567ae",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "log",
                "pt": "msg",
                "to": "There is no difference or you provide an empty slot list.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 400,
        "wires": [
            [
                "934a1451187e6306"
            ]
        ]
    },
    {
        "id": "5c545bb6e7377f4b",
        "type": "switch",
        "z": "0b3044d14d300449",
        "name": "",
        "property": "saveDifferences=true and differentProvidedLines != []",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "f3eb5ad2a87df227",
                "7560ef10a6b4ff59"
            ],
            [
                "55b40948a9236867"
            ]
        ]
    },
    {
        "id": "934a1451187e6306",
        "type": "switch",
        "z": "0b3044d14d300449",
        "name": "",
        "property": "sameValuesLines",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1670,
        "y": 360,
        "wires": [
            [
                "2c64b89740e471bd"
            ],
            []
        ]
    },
    {
        "id": "2c64b89740e471bd",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "log",
                "pt": "msg",
                "to": "log & \" I didn't add the value of \" & $count(sameValuesLines) & \" slots. You can check the value of sameValuesLines attribute to get the matching value lines in Rhasspy\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "1f88eec9a6df5602",
        "type": "subflow:8555359a6f46144d",
        "z": "0b3044d14d300449",
        "name": "",
        "x": 1420,
        "y": 220,
        "wires": [
            [
                "aa8e058572875724"
            ]
        ]
    },
    {
        "id": "7560ef10a6b4ff59",
        "type": "change",
        "z": "0b3044d14d300449",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "differentProvidedLines",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "3a6182278f2e10a3",
        "type": "http request",
        "z": "88600a96538506de",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3e94c715bb69751e",
        "type": "change",
        "z": "88600a96538506de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/slots/' & path",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 540,
        "wires": [
            [
                "3a6182278f2e10a3"
            ]
        ]
    },
    {
        "id": "c1948606845ef0af",
        "type": "function",
        "z": "88600a96538506de",
        "name": "Set priority of msg value",
        "func": "var list = ['protocol', 'host', 'port', 'path']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "1d3fdca7467a39f6",
                "d4e20434ff0bf1d5"
            ]
        ]
    },
    {
        "id": "1d3fdca7467a39f6",
        "type": "debug",
        "z": "88600a96538506de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 40,
        "wires": []
    },
    {
        "id": "a1f78cdfa3073ead",
        "type": "http request",
        "z": "88600a96538506de",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 220,
        "wires": [
            [
                "3f19e7ca4ddd84d1"
            ]
        ]
    },
    {
        "id": "d4e20434ff0bf1d5",
        "type": "change",
        "z": "88600a96538506de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/slots' & (path != '' ? '/'&path : '')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 180,
        "wires": [
            [
                "a1f78cdfa3073ead",
                "4ce374d78a8abd34"
            ]
        ]
    },
    {
        "id": "78d68c64a68a6043",
        "type": "switch",
        "z": "88600a96538506de",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "path",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 540,
        "wires": [
            [
                "da62f9af4341092b"
            ],
            [
                "d41a60b8b02cb94b"
            ]
        ]
    },
    {
        "id": "4ce374d78a8abd34",
        "type": "debug",
        "z": "88600a96538506de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 80,
        "wires": []
    },
    {
        "id": "1def8d059751ea9b",
        "type": "debug",
        "z": "88600a96538506de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 500,
        "wires": []
    },
    {
        "id": "40c3e781a446b26d",
        "type": "debug",
        "z": "88600a96538506de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 740,
        "wires": []
    },
    {
        "id": "82bab1bca635f9e4",
        "type": "debug",
        "z": "88600a96538506de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 700,
        "wires": []
    },
    {
        "id": "da62f9af4341092b",
        "type": "change",
        "z": "88600a96538506de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[path]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "c68e9bc3b96ce274",
        "type": "switch",
        "z": "88600a96538506de",
        "name": "",
        "property": "path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 620,
        "wires": [
            [],
            [
                "40c3e781a446b26d",
                "78d68c64a68a6043"
            ]
        ]
    },
    {
        "id": "d41a60b8b02cb94b",
        "type": "change",
        "z": "88600a96538506de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The asked slot path doesn't exist",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "3f19e7ca4ddd84d1",
        "type": "debug",
        "z": "88600a96538506de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 180,
        "wires": []
    },
    {
        "id": "61f0fac318085166",
        "type": "http request",
        "z": "b726d2ccc1e4b848",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1050,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a2370366c7c9edb9",
        "type": "change",
        "z": "b726d2ccc1e4b848",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/train'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 260,
        "wires": [
            [
                "61f0fac318085166"
            ]
        ]
    },
    {
        "id": "0fc4d854894af185",
        "type": "function",
        "z": "b726d2ccc1e4b848",
        "name": "Set priority of msg value",
        "func": "var list = ['protocole', 'host', 'port']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 260,
        "wires": [
            [
                "a2370366c7c9edb9"
            ]
        ]
    },
    {
        "id": "45e25ac496b49953",
        "type": "http request",
        "z": "8555359a6f46144d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 890,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c8661cf79da554b5",
        "type": "change",
        "z": "8555359a6f46144d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/slots/' & path & (overwrite ? \"?overwrite_all=true\" : \"\")",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 200,
        "wires": [
            [
                "45e25ac496b49953"
            ]
        ]
    },
    {
        "id": "ea4922baa000238c",
        "type": "function",
        "z": "8555359a6f46144d",
        "name": "Set priority of msg value",
        "func": "var list = ['protocol', 'host', 'port', 'path','overwrite']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 120,
        "wires": [
            [
                "c8661cf79da554b5",
                "b7b8d70583303497"
            ]
        ]
    },
    {
        "id": "b7b8d70583303497",
        "type": "debug",
        "z": "8555359a6f46144d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 80,
        "wires": []
    },
    {
        "id": "d3a6212ee87ebedc",
        "type": "function",
        "z": "cb421e9f379bf642",
        "name": "Set priority of msg value",
        "func": "var list = ['protocol', 'host', 'port', 'args']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "8f7c2dda71593d17"
            ]
        ]
    },
    {
        "id": "d2eb30931ceda683",
        "type": "http request",
        "z": "cb421e9f379bf642",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8f7c2dda71593d17",
        "type": "change",
        "z": "cb421e9f379bf642",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/text-to-intent' & (args != '' ? args : '')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 80,
        "wires": [
            [
                "d2eb30931ceda683"
            ]
        ]
    },
    {
        "id": "e032c8db4a02abe7",
        "type": "function",
        "z": "653ca3b33715d85b",
        "name": "Set priority of msg value",
        "func": "var list = ['protocol', 'host', 'port']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "b5e3b107518373e0"
            ]
        ]
    },
    {
        "id": "77355a2d01d5aeee",
        "type": "http request",
        "z": "653ca3b33715d85b",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b5e3b107518373e0",
        "type": "change",
        "z": "653ca3b33715d85b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/unknown-words'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 80,
        "wires": [
            [
                "77355a2d01d5aeee"
            ]
        ]
    },
    {
        "id": "66e5a712699560fe",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 780,
        "wires": []
    },
    {
        "id": "a783024a8314ff4e",
        "type": "function",
        "z": "e0b88d23ec56febb",
        "name": "Get dolibarr API object rootPaths",
        "func": "var dolibarrObjectTypeList = []\nfor (var path in msg.payload.paths) {\n    if (msg.payload.paths.hasOwnProperty(path)) {\n        path = path.slice(1)\n        if(path.includes('/')){\n            var rootPath = path.slice(0, path.indexOf('/'))\n        }else{\n            rootPath = path\n        }\n        dolibarrObjectTypeList.push(rootPath)\n    }\n}\nmsg.dolibarrObjectTypeList = [...new Set(dolibarrObjectTypeList)]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 300,
        "wires": [
            [
                "2b317408bce6e542"
            ]
        ]
    },
    {
        "id": "770be6beb8328773",
        "type": "http request",
        "z": "e0b88d23ec56febb",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 260,
        "wires": [
            [
                "a783024a8314ff4e"
            ]
        ]
    },
    {
        "id": "167db7777642b7c5",
        "type": "split",
        "z": "e0b88d23ec56febb",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1550,
        "y": 300,
        "wires": [
            [
                "3b9fa8df3cc40f13"
            ]
        ]
    },
    {
        "id": "4d0f70846a304a25",
        "type": "http request",
        "z": "e0b88d23ec56febb",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 540,
        "wires": [
            [
                "66e5a712699560fe",
                "085349cfe37516db"
            ]
        ]
    },
    {
        "id": "085349cfe37516db",
        "type": "switch",
        "z": "e0b88d23ec56febb",
        "name": "Handle errors",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "404",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "503",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 960,
        "y": 540,
        "wires": [
            [
                "af5490ba85caccc6"
            ],
            [
                "2df03207650839fb"
            ],
            [
                "03686734cc7e053f"
            ],
            [
                "50d86c4d971e0331"
            ],
            [
                "ac25e51276cc6d90"
            ]
        ]
    },
    {
        "id": "391fe18b05530468",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 480,
        "wires": []
    },
    {
        "id": "69f3b6f6f36d5258",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 520,
        "wires": []
    },
    {
        "id": "1299a97669f73268",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 560,
        "wires": []
    },
    {
        "id": "a8cc649ab5c458dd",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 600,
        "wires": []
    },
    {
        "id": "76de7163c10af77f",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 640,
        "wires": []
    },
    {
        "id": "2df03207650839fb",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fornow",
                "pt": "msg",
                "to": "work to do",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 520,
        "wires": [
            [
                "ec2d574e6fc6afa0"
            ]
        ]
    },
    {
        "id": "af5490ba85caccc6",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fornow",
                "pt": "msg",
                "to": "No object found",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 480,
        "wires": [
            [
                "391fe18b05530468",
                "2c94da3074594fd1"
            ]
        ]
    },
    {
        "id": "03686734cc7e053f",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fornow",
                "pt": "msg",
                "to": "api call wrong parameter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 560,
        "wires": [
            [
                "1299a97669f73268",
                "2c94da3074594fd1"
            ]
        ]
    },
    {
        "id": "ec2d574e6fc6afa0",
        "type": "switch",
        "z": "e0b88d23ec56febb",
        "name": "",
        "property": "payload.error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "'t.rowid' in 'order clause'",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 520,
        "wires": [
            [
                "bb46dd8bab5bb1aa"
            ],
            [
                "69f3b6f6f36d5258"
            ]
        ]
    },
    {
        "id": "bb46dd8bab5bb1aa",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "url",
                "pt": "msg",
                "from": "rowid",
                "fromt": "str",
                "to": "id",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "0add92ae320a3779",
        "type": "http request",
        "z": "e0b88d23ec56febb",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2370,
        "y": 460,
        "wires": [
            [
                "d92fc3314f8c70a9"
            ]
        ]
    },
    {
        "id": "d92fc3314f8c70a9",
        "type": "link out",
        "z": "e0b88d23ec56febb",
        "name": "",
        "mode": "link",
        "links": [
            "4ff19ac399a0f899"
        ],
        "x": 2505,
        "y": 460,
        "wires": []
    },
    {
        "id": "4ff19ac399a0f899",
        "type": "link in",
        "z": "e0b88d23ec56febb",
        "name": "check error way",
        "links": [
            "d92fc3314f8c70a9"
        ],
        "x": 625,
        "y": 640,
        "wires": [
            [
                "085349cfe37516db"
            ]
        ]
    },
    {
        "id": "50d86c4d971e0331",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{dolibarrObjectTypeList[$$.parts.index] : payload[0]}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 600,
        "wires": [
            [
                "2c94da3074594fd1",
                "a8cc649ab5c458dd"
            ]
        ]
    },
    {
        "id": "2b317408bce6e542",
        "type": "function",
        "z": "e0b88d23ec56febb",
        "name": "Remove elememt ",
        "func": "msg.dolibarrObjectTypeList.slice(msg.dolibarrObjectTypeList.indexOf(msg.payload),1)\nvar valToRemove = ['login', 'documents', 'setup', 'status']\nfor (let index = 0; index < valToRemove.length; index++) {\n    const element = valToRemove[index];\n    if (msg.dolibarrObjectTypeList.includes(element)){\n        msg.dolibarrObjectTypeList.splice(msg.dolibarrObjectTypeList.indexOf(element), 1)\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "b99afed8e7639d9f"
            ]
        ]
    },
    {
        "id": "b99afed8e7639d9f",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "dolibarrObjectTypeList",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "dolibarrObjects",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 300,
        "wires": [
            [
                "167db7777642b7c5"
            ]
        ]
    },
    {
        "id": "3b9fa8df3cc40f13",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://192.168.1.18:8200/api/index.php/' & payload & '?sortfield=t.rowid&sortorder=ASC&limit=1'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 540,
        "wires": [
            [
                "4d0f70846a304a25",
                "1f6de9ab648fec22",
                "3829fe4d1978f0e3"
            ]
        ]
    },
    {
        "id": "2c94da3074594fd1",
        "type": "join",
        "z": "e0b88d23ec56febb",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 2450,
        "y": 80,
        "wires": [
            [
                "7f4e8f215b3c90a5"
            ]
        ]
    },
    {
        "id": "7f4e8f215b3c90a5",
        "type": "function",
        "z": "e0b88d23ec56febb",
        "name": "Remove elememt with error",
        "func": "var dolibarrObjects = []\nfor (let index = 0; index < msg.payload.length; index++) {\n    const element = msg.payload[index];\n    if (!element.hasOwnProperty('error')) {\n        dolibarrObjects.push(msg.payload[index])\n    }\n}\nmsg.dolibarrObjects = dolibarrObjects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 80,
        "wires": [
            [
                "0c77d02d05c60bcf"
            ]
        ]
    },
    {
        "id": "ac25e51276cc6d90",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fornow",
                "pt": "msg",
                "to": "this case is not handled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 640,
        "wires": [
            [
                "76de7163c10af77f"
            ]
        ]
    },
    {
        "id": "d6cf05a3596154b7",
        "type": "function",
        "z": "e0b88d23ec56febb",
        "name": "Set priority of msg value",
        "func": "var list = [\n    'protocol',\n    'host',\n    'port',\n    'path',\n    'apiKey',\n    'clearHeaders',\n    'objectName',\n    'sortField',\n    'sortOrder',\n    'limit',\n    'page',\n    'sqlFilters',\n    'category',\n    'thirdparties',\n    'mode',\n    'status',\n    'productIds',\n    'variantFilter',\n    'idsOnly',\n    'paginationData',\n    'includeStockData',\n    'includeCount',\n    'includeRole',\n    'type']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "82018866575fba41"
            ]
        ]
    },
    {
        "id": "6877cb437a61bf10",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "apiKey",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3090,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "0c77d02d05c60bcf",
        "type": "switch",
        "z": "e0b88d23ec56febb",
        "name": "",
        "property": "eraseKey",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2890,
        "y": 120,
        "wires": [
            [
                "6877cb437a61bf10"
            ],
            []
        ]
    },
    {
        "id": "82018866575fba41",
        "type": "subflow:54526e03f83ee9e5",
        "z": "e0b88d23ec56febb",
        "name": "",
        "env": [
            {
                "name": "apiKey",
                "type": "cred"
            },
            {
                "name": "clearHeaders",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "eraseKey",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 490,
        "y": 80,
        "wires": [
            [
                "52c90dec905d5b6c",
                "4257198d5b1c19ac"
            ]
        ]
    },
    {
        "id": "1f6de9ab648fec22",
        "type": "subflow:54526e03f83ee9e5",
        "z": "e0b88d23ec56febb",
        "name": "",
        "env": [
            {
                "name": "apiKey",
                "type": "cred"
            }
        ],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "8c598d4bd7834c04"
            ]
        ]
    },
    {
        "id": "8c598d4bd7834c04",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 460,
        "wires": []
    },
    {
        "id": "3829fe4d1978f0e3",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 580,
        "wires": []
    },
    {
        "id": "81474ab224fe0e13",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host & ':' & port & '/api/slots' & (path != '' ? '/'&path : '')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 200,
        "wires": [
            [
                "770be6beb8328773"
            ]
        ]
    },
    {
        "id": "52c90dec905d5b6c",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "protocol & '://' & host  & (port ? ':' & port : '')  & '/api/index.php/' & objectName & '?'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 140,
        "wires": [
            [
                "7df5b6af6b3b9f32",
                "1348a42ec4b03de9"
            ]
        ]
    },
    {
        "id": "881f30591bb19ec3",
        "type": "function",
        "z": "e0b88d23ec56febb",
        "name": "Add parametter global parameter to URL",
        "func": "//sortField\nif(msg.sortField !== \"\"){\n    msg.url += 'sortfield=t.' + msg.sortField\n}\n//sortOrder\nif (msg.sortOrder !== \"\") {\n    msg.url += '&sortorder=' + msg.sortOrder\n}\n//limit\nif (msg.limit !== \"\") {\n    msg.url += '&limit=' + msg.limit\n}\n//page\nif (msg.page !== 0) {\n    msg.url += '&page=' + msg.page\n}\n//sqlFilters\nif (typeof msg.sqlFilters === 'string' && msg.sqlFilters !== ''){\n    msg.url += '&sqlfilters=' + msg.sqlFilters\n}\nif (typeof msg.sqlFilters === 'object' && msg.sqlFilters !== []){\n    let sqlFilters = ''\n    for (let i = 0; i < msg.sqlFilters.length; i++) {\n        if(i !== 0){\n            sqlFilters += ' ' + msg.sqlFilters[i].operation\n        }\n        sqlFilters += '(' + msg.sqlFilters[i].attribute\n        sqlFilters += ':' + msg.sqlFilters[i].compare + ':'\n        sqlFilters += msg.sqlFilters[i].value + ')'\n    }\n    msg.url += sqlFilters\n}\n//varianFilter\nif (msg.variantFilter !== 0) {\n    msg.url += '&variant_filter=' + msg.variantFilter\n}\n//idsOnly\nif (msg.idsOnly !== false) {\n    msg.url += '&ids_only=' + msg.idsOnly\n}\n//paginationData\nif (msg.paginationData !== false) {\n    msg.url += '&pagination_data=' + msg.paginationData\n}\n//mode\nif (msg.mode !== \"null\") {\n    msg.url += '&mode=' + msg.mode\n}\n//status\nif (msg.status !== \"null\") {\n    msg.url += '&mode=' + msg.status\n}\n//includeStockData\nif (msg.includeStockData !== false) {\n    msg.url += '&includestockdata=' + msg.includeStockData\n}\n//includeCount\nif (msg.includeCount !== false) {\n    msg.url += '&includecount=' + msg.includeCount\n}\n//includeRole\nif (msg.includeRole !== false) {\n    msg.url += '&includerole=' + msg.includeRole\n}\n//type\nif (msg.type !== \"\") {\n    msg.url += '&type=' + msg.type\n}\n//thirdpartyIds\n//if (msg.thirdpartyIds !== '' || msg.sqlFilters !== []) {\n//    if (typeof msg.sqlFilters === 'string') {\n//        msg.url += '&sqlfilters=' + msg.sqlFilters\n//    }\n//    if (typeof msg.sqlFilters === 'object') {\n//        let sqlFilters = ''\n//        for (let i = 0; i < msg.sqlFilters.length; i++) {\n//            if (i !== 0) {\n//                sqlFilters += ' ' + msg.sqlFilters[i].operation\n//            }\n//            sqlFilters += '(' + msg.sqlFilters[i].attribute\n//            sqlFilters += ':' + msg.sqlFilters[i].compare + ':'\n//            sqlFilters += msg.sqlFilters[i].value + ')'\n//        }\n//    }\n//}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 80,
        "wires": [
            [
                "796f7157d12daf87",
                "5c0e995677254bcd"
            ]
        ]
    },
    {
        "id": "e9c33ced9f42dc2d",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 140,
        "wires": []
    },
    {
        "id": "7df5b6af6b3b9f32",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 180,
        "wires": []
    },
    {
        "id": "5c0e995677254bcd",
        "type": "http request",
        "z": "e0b88d23ec56febb",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1730,
        "y": 200,
        "wires": [
            [
                "c5214b76499a0c16"
            ]
        ]
    },
    {
        "id": "796f7157d12daf87",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 160,
        "wires": []
    },
    {
        "id": "c5214b76499a0c16",
        "type": "debug",
        "z": "e0b88d23ec56febb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 40,
        "wires": []
    },
    {
        "id": "4257198d5b1c19ac",
        "type": "change",
        "z": "e0b88d23ec56febb",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "https://www.techsc-dolibarr.fr/api/index.php/products?sortfield=t.ref&sortorder=ASC&limit=100&page=1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 20,
        "wires": [
            [
                "5c0e995677254bcd"
            ]
        ]
    },
    {
        "id": "1348a42ec4b03de9",
        "type": "function",
        "z": "e0b88d23ec56febb",
        "name": "Handle special  case of \"type\" field ",
        "func": "if(msg.objectName === 'categories'){\n    if(typeof msg.type === 'string' || msg.type !== ''){\n        //if ((typeof msg.sqlFilters === 'string' && msg.sqlFilters !== '')){\n        //    msg.sqlFilters += 'and(type:=:' + msg.type + ')'\n        //}\n        //if ((typeof msg.sqlFilters === 'string' && msg.sqlFilters === '')) {\n        //    msg.sqlFilters += '(type:=:' + msg.type + ')'\n        //}\n        if ((typeof msg.sqlFilters === 'object' && msg.sqlFilters !== [])){\n            let sqlFilter = {\n                'operation': 'and',\n                'comparate': '=',\n                'attribute': 'type',\n                'value': msg.type\n            }\n            msg.sqlFilters.push(sqlFilter)\n        }\n    }\n    if (typeof msg.type === 'object') {\n        if (msg.type.length === 0){\n\n        }else{\n            if (typeof msg.sqlFilters === 'string') {\n                for (let i = 0; i < msg.type.length; i++) {\n                    if (i === 0 && msg.sqlFilters === '') {\n                        msg.sqlFilters += '(type:=:' + msg.type[i] + ')';\n                    } else {\n                        msg.sqlFilters += 'and(type:=:' + msg.type[i] + ')';\n                    }\n                }\n            }\n        }\n        if ((typeof msg.sqlFilters === 'object' && msg.sqlFilters !== [])) {\n            for (let i = 0; i < msg.type.length; i++) {  \n                let sqlFilter = {\n                    'operation': 'and',\n                    'comparate': '=',\n                    'attribute': 'type',\n                    'value': msg.type[i]\n                }\n                msg.sqlFilters.push(sqlFilter)\n            }\n        }\n    }\n    msg.type = ''\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 80,
        "wires": [
            [
                "881f30591bb19ec3"
            ]
        ]
    },
    {
        "id": "27635e708f5d05b0",
        "type": "function",
        "z": "54526e03f83ee9e5",
        "name": "Set Header",
        "func": "if (msg.headers === null || msg.headers === undefined || msg.clearHeaders){\n    msg.headers = {};\n}\nmsg.headers['DOLAPIKEY'] = msg.apiKey;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 280,
        "wires": [
            [
                "a11e0bdac5ddb9e6"
            ]
        ]
    },
    {
        "id": "85dbe078bc70e1fa",
        "type": "comment",
        "z": "54526e03f83ee9e5",
        "name": "Set API key in header",
        "info": "",
        "x": 680,
        "y": 140,
        "wires": []
    },
    {
        "id": "762646999dea5e9f",
        "type": "change",
        "z": "54526e03f83ee9e5",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "apiKey",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f0cc08cda04f90a8",
        "type": "function",
        "z": "54526e03f83ee9e5",
        "name": "Set priority of msg value",
        "func": "var list = ['apiKey', 'clearHeaders', 'eraseKey']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)) {\n        msg[element] = env.get(element)\n    } else {\n        if (msg[element] === undefined || msg[element] === null) {\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "27635e708f5d05b0"
            ]
        ]
    },
    {
        "id": "a11e0bdac5ddb9e6",
        "type": "switch",
        "z": "54526e03f83ee9e5",
        "name": "",
        "property": "eraseKey",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "762646999dea5e9f"
            ],
            []
        ]
    },
    {
        "id": "53434fea43310c31",
        "type": "debug",
        "z": "c38e097dab2ac14e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 780,
        "wires": []
    },
    {
        "id": "3f817fd15eb9dbf8",
        "type": "function",
        "z": "c38e097dab2ac14e",
        "name": "Get dolibarr API object rootPaths",
        "func": "var dolibarrObjectTypeList = []\nfor (var path in msg.payload.paths) {\n    if (msg.payload.paths.hasOwnProperty(path)) {\n        path = path.slice(1)\n        if(path.includes('/')){\n            var rootPath = path.slice(0, path.indexOf('/'))\n        }else{\n            rootPath = path\n        }\n        dolibarrObjectTypeList.push(rootPath)\n    }\n}\nmsg.dolibarrObjectTypeList = [...new Set(dolibarrObjectTypeList)]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 140,
        "wires": [
            [
                "97e1c886bf8837d7"
            ]
        ]
    },
    {
        "id": "da3c9644c193c389",
        "type": "http request",
        "z": "c38e097dab2ac14e",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://192.168.1.18:8200/api/index.php/explorer/swagger.json?DOLAPIKEY=yCTZOBZR5wA415gDkwaTg8c46K5ux34s",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 260,
        "wires": [
            [
                "3f817fd15eb9dbf8"
            ]
        ]
    },
    {
        "id": "48b11d7bd95e2ce2",
        "type": "split",
        "z": "c38e097dab2ac14e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1510,
        "y": 140,
        "wires": [
            [
                "6fadfb41f5874d9b"
            ]
        ]
    },
    {
        "id": "368f348c1b273036",
        "type": "http request",
        "z": "c38e097dab2ac14e",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 540,
        "wires": [
            [
                "53434fea43310c31",
                "67b39c715145d352"
            ]
        ]
    },
    {
        "id": "67b39c715145d352",
        "type": "switch",
        "z": "c38e097dab2ac14e",
        "name": "Handle errors",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "404",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "503",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 960,
        "y": 540,
        "wires": [
            [
                "9a090f3d0e5d1933"
            ],
            [
                "b0c07090a5e8461c"
            ],
            [
                "a991f7320168c15e"
            ],
            [
                "707dde1df378cdfb"
            ],
            [
                "fecc4c4084b1874d"
            ]
        ]
    },
    {
        "id": "8f519972cc20df43",
        "type": "debug",
        "z": "c38e097dab2ac14e",
        "name": "",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 480,
        "wires": []
    },
    {
        "id": "fd396387cba9932f",
        "type": "debug",
        "z": "c38e097dab2ac14e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 520,
        "wires": []
    },
    {
        "id": "89231a35733f7616",
        "type": "debug",
        "z": "c38e097dab2ac14e",
        "name": "",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 560,
        "wires": []
    },
    {
        "id": "6b144d5705b44d45",
        "type": "debug",
        "z": "c38e097dab2ac14e",
        "name": "",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 600,
        "wires": []
    },
    {
        "id": "3e35e7f701e6b5c5",
        "type": "debug",
        "z": "c38e097dab2ac14e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 640,
        "wires": []
    },
    {
        "id": "b0c07090a5e8461c",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fornow",
                "pt": "msg",
                "to": "work to do",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 520,
        "wires": [
            [
                "0908a1529d955f35"
            ]
        ]
    },
    {
        "id": "9a090f3d0e5d1933",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fornow",
                "pt": "msg",
                "to": "No object found",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 480,
        "wires": [
            [
                "8f519972cc20df43",
                "d6852ba0eb8e155c"
            ]
        ]
    },
    {
        "id": "a991f7320168c15e",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fornow",
                "pt": "msg",
                "to": "api call wrong parameter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 560,
        "wires": [
            [
                "89231a35733f7616",
                "d6852ba0eb8e155c"
            ]
        ]
    },
    {
        "id": "0908a1529d955f35",
        "type": "switch",
        "z": "c38e097dab2ac14e",
        "name": "",
        "property": "payload.error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "'t.rowid' in 'order clause'",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 520,
        "wires": [
            [
                "8be64e7c84a6e84f"
            ],
            [
                "fd396387cba9932f"
            ]
        ]
    },
    {
        "id": "8be64e7c84a6e84f",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "url",
                "pt": "msg",
                "from": "rowid",
                "fromt": "str",
                "to": "id",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "bd36370b78835b69",
        "type": "http request",
        "z": "c38e097dab2ac14e",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2370,
        "y": 460,
        "wires": [
            [
                "43b92a06e9ae685e"
            ]
        ]
    },
    {
        "id": "43b92a06e9ae685e",
        "type": "link out",
        "z": "c38e097dab2ac14e",
        "name": "",
        "mode": "link",
        "links": [
            "519ad4287c143cec"
        ],
        "x": 2505,
        "y": 460,
        "wires": []
    },
    {
        "id": "519ad4287c143cec",
        "type": "link in",
        "z": "c38e097dab2ac14e",
        "name": "check error way",
        "links": [
            "43b92a06e9ae685e"
        ],
        "x": 625,
        "y": 640,
        "wires": [
            [
                "67b39c715145d352"
            ]
        ]
    },
    {
        "id": "707dde1df378cdfb",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{dolibarrObjectTypeList[$$.parts.index] : payload[0]}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 600,
        "wires": [
            [
                "d6852ba0eb8e155c",
                "6b144d5705b44d45"
            ]
        ]
    },
    {
        "id": "97e1c886bf8837d7",
        "type": "function",
        "z": "c38e097dab2ac14e",
        "name": "Remove elememt ",
        "func": "msg.dolibarrObjectTypeList.slice(msg.dolibarrObjectTypeList.indexOf(msg.payload),1)\nvar valToRemove = ['login', 'documents', 'setup', 'status']\nfor (let index = 0; index < valToRemove.length; index++) {\n    const element = valToRemove[index];\n    if (msg.dolibarrObjectTypeList.includes(element)){\n        msg.dolibarrObjectTypeList.splice(msg.dolibarrObjectTypeList.indexOf(element), 1)\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 140,
        "wires": [
            [
                "1b9eb6585d882f09"
            ]
        ]
    },
    {
        "id": "1b9eb6585d882f09",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "dolibarrObjectTypeList",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "dolibarrObjects",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 140,
        "wires": [
            [
                "48b11d7bd95e2ce2"
            ]
        ]
    },
    {
        "id": "6fadfb41f5874d9b",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://192.168.1.18:8200/api/index.php/' & payload & '?sortfield=t.rowid&sortorder=ASC&limit=1'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 540,
        "wires": [
            [
                "368f348c1b273036",
                "337a7db13ac99dec",
                "9e2fc69e0960823f"
            ]
        ]
    },
    {
        "id": "d6852ba0eb8e155c",
        "type": "join",
        "z": "c38e097dab2ac14e",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 2450,
        "y": 80,
        "wires": [
            [
                "e6adb927485f1a9c"
            ]
        ]
    },
    {
        "id": "e6adb927485f1a9c",
        "type": "function",
        "z": "c38e097dab2ac14e",
        "name": "Remove elememt with error",
        "func": "var dolibarrObjects = []\nfor (let index = 0; index < msg.payload.length; index++) {\n    const element = msg.payload[index];\n    if (!element.hasOwnProperty('error')) {\n        dolibarrObjects.push(msg.payload[index])\n    }\n}\nmsg.dolibarrObjects = dolibarrObjects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 80,
        "wires": [
            [
                "d119efffbb29803a"
            ]
        ]
    },
    {
        "id": "fecc4c4084b1874d",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fornow",
                "pt": "msg",
                "to": "this case is not handled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 640,
        "wires": [
            [
                "3e35e7f701e6b5c5"
            ]
        ]
    },
    {
        "id": "2db58ed50592ceaf",
        "type": "function",
        "z": "c38e097dab2ac14e",
        "name": "Set priority of msg value",
        "func": "var list = ['apiHost', 'apiKey', 'clearHeaders']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "dbc853c81be6436e"
            ]
        ]
    },
    {
        "id": "b20c6328a0579e71",
        "type": "change",
        "z": "c38e097dab2ac14e",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "apiKey",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3090,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d119efffbb29803a",
        "type": "switch",
        "z": "c38e097dab2ac14e",
        "name": "",
        "property": "eraseKey",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2890,
        "y": 120,
        "wires": [
            [
                "b20c6328a0579e71"
            ],
            []
        ]
    },
    {
        "id": "dbc853c81be6436e",
        "type": "subflow:54526e03f83ee9e5",
        "z": "c38e097dab2ac14e",
        "name": "",
        "env": [
            {
                "name": "apiKey",
                "type": "cred"
            },
            {
                "name": "clearHeaders",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "eraseKey",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 470,
        "y": 120,
        "wires": [
            [
                "da3c9644c193c389"
            ]
        ]
    },
    {
        "id": "337a7db13ac99dec",
        "type": "subflow:54526e03f83ee9e5",
        "z": "c38e097dab2ac14e",
        "name": "",
        "env": [
            {
                "name": "apiKey",
                "type": "cred"
            }
        ],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "c3664e603bf01f70"
            ]
        ]
    },
    {
        "id": "c3664e603bf01f70",
        "type": "debug",
        "z": "c38e097dab2ac14e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 460,
        "wires": []
    },
    {
        "id": "9e2fc69e0960823f",
        "type": "debug",
        "z": "c38e097dab2ac14e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 580,
        "wires": []
    },
    {
        "id": "099f6275bdac6398",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "1st step",
        "info": "## Plan\nPour cette première vidéo le planning est d'installer les premiers outils néccessaire. C'est a dire:\n - Les outils de base de communication entre nos machines  \n - Un éditeur de code, Visual Studio Code sur l'orangepi et le telephone\n    - téléphone : https://www.codewithharry.com/blogpost/install-vs-code-in-android/\n - Un gestionnaire de conteneneur, Docker car c'est le plus fournir et simple à mettre en place sur tout les support. Nous allons le mettre sur l'orangepi et essayer sur le téléphone, je l'ai pas fait encore pour préserver le téléphone.\n - Un gestionnaire d'activité, Dolibarr, car il permet de lié les flux financier et les flux physique. De plus, sont utilisation represente une compétence utilsable dans la vie professsionelle et personnelle. Nous allons le mettre sur l'orangepi\n - Un assistant vocal, Rhasspy car il est le plus modulable que nous alllons également mettre sur l'orangepi et sur le téléphone. Nous allons sur le téléphone installer l'APK même si je n'arrive pas afaire fonctionner le wakeword avec\n - Enfin si on à le temps ce qui métonnerais, nous allons commencer à palier à ce problème.\n\n## Session 1\n - Installation de node-red-dashboardpour la simplicité.\n - Mise en place du systeme de communication avec le terminal depuis node-red pour gerer les coonections internet et bluetooth\n    - Pour execetuter des commandes avec node-red nous avons plusieur choix possible\n      1. Tout dabords la note exec. Voici un exemple avec la commande nmcli pour la gestion du wifi\n          1. J'ai créer un bouton sur le dashbord qui nous permet de lancer la commande\n          2. Dans la fonction node j'en fait un tableau d'object que je montre avec la node additionel ui-list\n          3. Dans la node ui-list, j'ai parameter une action au click qui nous permet de lancer la commande de connexion\n          4. Dans la node exec, j'ai activer l'options pour ajouter le nom du reseau c'est à dire la propriété SSID de l'obect construit auparavent.Deplus je l'ai mise en mode spawn pour recevoir des message pendant que la commande est en cours\n          5. Enfin, j'ai fait une template node qui nous permet de voir les message cumuler.  \n          - Nous allons essayer cette solution. Je click sur refresh, nous attendons un peu et nous voyons les connnexion. Maintenant je clique sur une et on vois que l'on nous demande un password.\n        Cela pose un problème car nous ne pouvons pas renvoyer un message dans la commande que nous avons lancer. Pour communiquer avec un processus que nous avons lancer il nous faut une autre node addiotonelle, la node daemon qui est ici.\n        Cependant dans cette node nous ne pouvons pas definir de commande ou d'argument dynamiquement. Cela veut dire que lorsque nous cliquons dans notre list, nous ne pouvons pas en recolter l'information pour la mettre dans notre node daemon\n        On va donc essayer une autre solution\n      2. Pour le deuxième essai on va essayer d'utiliser la même fonction que la node exec realise mais dans une fonction node. c'est ce qu'il y a ici.\n          1. J'ai créer un formulaire avec la node form pour mettre une liste de commande separer par entrer\n          2. J'ai créer une function node pour réaliser à la suite les commandes.\n          3. J'ai remis la node template pour voir le resultat\n          - Nous allons essayer cette solution. Nous tapons notre commande pour nous connecter et nous rajoutons notre ssid. Nous cliquons sur submit et on nous demande notre password, nous en sommme au même point que precédement.\n        Maintenant nous tappons la commmande et le ssid et à la ligne le mot de passe. Nous avons perdu la connexion avec le pc et nous devrions être connecter au téléphone.\n        Avec mon telephone je recupére l'adresse ip du téléphone avec la commande \"ifconfig\" et apres je scanne le reseau avec \"nmap mon_ip/24\". Cela me donne l'ip de mon orangepi connecter au telephone.\n        Maintenant nous pouvons aller sur le node-red de l'orange pi avec le téléphone comme cela. Je coupe mon point d'acces avec le téléphone et nous attendons un peu que l'orangepi se reconnecte à la maison pour y avoir de nouveau acces avec l'ordinateur\n        Dans la prochaine video nous ferrons cela avec node-red coté téléphone et on affichera une notification sur le tel avec l'adresse ip.\n      3. Nous avons reussi à nous connecter au téléphone cependant cela ne fonctionne pas de manière dynamique. En effet, cela ne marche toutjours pas avec un click sur la liste. Pour cette raison, nous allons voir la troisième solution, \n      celle de droite qui est un terminal dynamique qui est ici fait avec la node daemon.\n          1. Tout d'abords, comme la node n'est pas parametrable, il nous faut créer un fichier javascript, contenant notre commande à lancer. Pour cela, j'ai utilisé\n          une template node, qui nous permet de récolter l'information de notre node form qui est ici, pour la mettre dans notre fichier javascript qui s'ecrit avec la node write.\n          2. Ensuite, j'ai mis une node change pour definir une propriété start au message qui permet de lancer la node daemon\n          3. Dans la node daemon, j'ai mis node dans la commande \"node\" et le fichier à lancer dans argument. J'ai déchocher auto-start daemon on deploy et j'ai cocher add enter to every message sent\n          4. Pour envoyer un message au processus en cours j'ai mis une autre node form\n          5. Pour terminer notre processus en cours, j'ai mis une node button qui quand il est cliquer envoie un message à la node change.Dedans j'ai defini une propriété kill a msg qui est transmis à la node daemon\n          6. Pour finir j'ai mis un bouton pour repéter la commande.\n          7. Nous laissons de coter la partie du bas pour le moment qui nous servira à gérer une liste de commande.  \n          - Nous allons maintenant tester notre solution. Nous tapons tape donc la commande pour nous connecter aux reseau. Cela demmande le SSID. Nous mettons XperiaXZ_c8a0 et cela nous demande le mot de passe qui est coucoutoi que nous envoyons\n        Nous repetons les commandes pour trouver notre ip et scanner le reseau pour trouver l'ip de notre orangepi. C'est le même que tout à l'heure. Nous retournons donc dans le navigateur internet pour nous coonecter au dashboard.\n        Cela fonctionne. Nous coupons la connexions du téléphone pour retrouver l'orangepi avec le pc.\n - Choix de l'utilisation d'une node ssh\n   - Maintenant que nous pouvons communiquer avec notre machine grâce à un terminal dans node-red nous allons comminquer avec notre téléphone grave à la commande ssh. Pour ce la on pourrait utiliser notre terminal mais si on essaie on voit qu'il y a une erreur.\n   Nous pouvons la contourner mais cela implique de mettre le mot de passe dans la commande ce qui ne serai pas sécuriser. Dans une autre vidéo, nous ferrons un systeme pour crypter le mot de passe, le sauvegarder et l'injecter dans la commande.\n   Pour le moment détaillons le choix de la node ssh. Parmis les node existante :\n   - node-red-contrib-ssh-v3 : pas de port spécifiable donc pas utilisable avec termux\n   - idem pour : node-red-contrib-ssh-coco, node-red-contrib-ssh et node-red-contrib-ssh-v2-reconnection \n   - node-red-contrib-bigssh : pas de changement de status de la node en cas de perte de connection avec le telephone\n   - Pour l'instant le mieux c'est bigssh.\n   - En revanche ce n'est pas parfait car cela nous fait revenir au point de départ concernant le terminal. En effet toute les node ssh sont comme les node exec et non comme les node daemon.\n   C'est à dire pas de communication possible après la commande. Pour cette rasion, nous serrons obliger de remplacer cette node ultérieurement comme nous auront fait le systeme de cryptation du mot de passe.\n - Maintenant qu nous avons notre systeme de terminal, nous pouvons commencer as réaliser les commandes nécessaire lorsque l'on télécharge le projet pour la première fois. Avant cela nous allons voir la dernière fonctionnalité à notre terminal.\nFaire defiler une liste de commande préétablie avec des boutons en fonction du resultat de la commande précedente. \n    1. J'ai donc ajouter une node text pour saisir un tableau de commande\n    2. J'ai ajouter une node change pour definir des variables au niveau du flow ce qui nous permettra d'acceder à nos informations de liste pour tout les messages\n    3. Ensuite, la prochaine node change passe la premières commande à notre text \n    4. Toutes les node fonction \"message for spawn\" servent à formater le message car pour lancer la première commande, la commande doit être séparer des arguments. Maintenant que c'est fait je pense que cela peut être améliorer en modifiant le code javascript qui lance la commande.\n    5. Il y a ensuite les trois bouton pour gerer la liste\n    6. Ce qui est derrière ces bouton sert à modifier l'état des boutons, l'index en cour de la liste et le texte pour la commande suivante\n    7. La liste est compatible avec la parti du dessus, c'est a dire que vous pouvez injecter des commande en cours de liste.\n  - Nous allons maintenant pourvoir dresser une liste de commande à executer pour chaque outil. Cependant en fesant cela je me suis rendu compte que de pourvoir sauvegarder notre liste pourrait être intéressant\n  C'est l'objet de la troisième parti que vous voyer la. J'arrive à ma dead line pour cette vidéo donc je ne détaille pas. Sachez juste que en fesant cela j'ai découvert xterm.js et que dans les prochaines vidéo on remplacera la node template par une fenetre xterm.js pour pouvoir exploiter pleinement le terminal et profitez de notre gestion de liste de commande.\n  Cependant nous avons maintenant un outil pour modifier un script que nous pouvons modifier librement et faire defiler commande par commande. Pour injecter des commandes dans notre outils j'ai ajouter une node link in. Dans le flow Installation nous pouvons maintenant mettre une inject node et une node link out pour charger notre list.\n  Cela nous permetra de facilement d'effectuer nos installations sur nos différente machine et de pouvoir injecter nos mots de passe.\n    1. Nous commencons donc avec Node-Red. Dedans il y a les commandes pour le lancer au démarrage. Pour l'instant c'est juste le laner au démarrage de la machine. Cependant je vais le lancer, Nous voyons que  \n",
        "x": 130,
        "y": 120,
        "wires": []
    },
    {
        "id": "3b986ba732de0ec3",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 260,
        "wires": []
    },
    {
        "id": "7668e9e8bdcf0e7c",
        "type": "status",
        "z": "58612799aa277ac1",
        "name": "",
        "scope": [
            "a50d6ceba36c36f7"
        ],
        "x": 2140,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "f4be8a67244d65bf",
        "type": "exec",
        "z": "58612799aa277ac1",
        "command": "ip a",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "get wifi interface name ",
        "x": 2120,
        "y": 1440,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "e959bbe9e0f2b24e",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1850,
        "y": 1440,
        "wires": [
            [
                "f4be8a67244d65bf"
            ]
        ]
    },
    {
        "id": "ac9878e5150ff640",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "Install nodejs libary to scan networks and define global variable for the app",
        "info": "",
        "x": 340,
        "y": 260,
        "wires": []
    },
    {
        "id": "b5969e7614beb79c",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "props": [
            {
                "p": "packageNames",
                "v": "[\"@node-red-contrib-themes/theme-collection\",\"node-red-dashboard\", \"node-red-contrib-credentials\", \"node-red-node-daemon\", \"node-red-contrib-sox-utils\"]",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "6e315e8005f93db6"
            ]
        ]
    },
    {
        "id": "704240ae2d8ef866",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2180,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "1e835d36dc81cf30",
        "type": "function",
        "z": "58612799aa277ac1",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "61885aca941ee99a",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2000,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7bca5ca89647bdfc",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1940,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "feb6423ccda74b39",
        "type": "subflow:a85c93b74d9f6110",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "env": [
            {
                "name": "save",
                "value": "false",
                "type": "bool"
            },
            {
                "name": "saveInDependencies",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 780,
        "y": 300,
        "wires": [
            [
                "398286c135d72f4e",
                "725f5a0cbb20fa86"
            ]
        ]
    },
    {
        "id": "4bbf9dbd15acc0eb",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "e6bfa779e8988908",
        "name": "Command for node-red first install",
        "info": "",
        "x": 3380,
        "y": 760,
        "wires": []
    },
    {
        "id": "834065f208af89ab",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "e6bfa779e8988908",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo systemctl enable nodered.service\"]",
        "payloadType": "json",
        "x": 3330,
        "y": 820,
        "wires": [
            [
                "73013c23ef540790"
            ]
        ]
    },
    {
        "id": "73013c23ef540790",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "e6bfa779e8988908",
        "name": "",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 3435,
        "y": 820,
        "wires": []
    },
    {
        "id": "85961ad908a34128",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2140,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "09da2f49e5f73653",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "Load project directory in global variable",
        "info": "",
        "x": 230,
        "y": 160,
        "wires": []
    },
    {
        "id": "db6ff932806cc474",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "projectDir",
                "pt": "global",
                "to": "projectdir",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "1a0ee4d754397b65"
            ]
        ]
    },
    {
        "id": "90e07e991d03a7f5",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "bbbac82b0e8ca5c5"
            ]
        ]
    },
    {
        "id": "1a0ee4d754397b65",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 180,
        "wires": []
    },
    {
        "id": "9e2778ee9680fce3",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2160,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "b65237e8d3b302fa",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 180,
        "wires": []
    },
    {
        "id": "398286c135d72f4e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 200,
        "wires": []
    },
    {
        "id": "a486d072b002a4d8",
        "type": "delay",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "4",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 300,
        "wires": [
            [
                "1a0ee4d754397b65",
                "feb6423ccda74b39"
            ]
        ]
    },
    {
        "id": "6e315e8005f93db6",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "function 9",
        "func": "msg.path = \".node-red\"\nfor (let index = 0; index < msg.packageNames.length; index++) {\n    const element = msg.packageNames[index];\n    msg.packageName = element\n    node.send(msg)\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "a486d072b002a4d8"
            ]
        ]
    },
    {
        "id": "725f5a0cbb20fa86",
        "type": "switch",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "property": "packageName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red-contrib-sox-utils",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "f0aa98ca142d18ba"
            ]
        ]
    },
    {
        "id": "2d811df439c064d7",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "a31ed93da07587de"
            ]
        ]
    },
    {
        "id": "a31ed93da07587de",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "if (process.platform !== 'linux')",
                "fromt": "str",
                "to": "if (process.platform !== 'linux' || process.platform !== 'android')",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 300,
        "wires": [
            [
                "26858a679202fcc1"
            ]
        ]
    },
    {
        "id": "26858a679202fcc1",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1660,
        "y": 280,
        "wires": [
            [
                "3b986ba732de0ec3"
            ]
        ]
    },
    {
        "id": "f0aa98ca142d18ba",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "'.node-red/node_modules/' & packageName & '/sox_play.js' ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 320,
        "wires": [
            [
                "2d811df439c064d7"
            ]
        ]
    },
    {
        "id": "bfbf22de567bb24e",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2Pac - 103 - Lil' Homies.mp3",
        "payloadType": "str",
        "x": 2710,
        "y": 720,
        "wires": [
            [
                "7991a19d69835c5c"
            ]
        ]
    },
    {
        "id": "2a57bc40ec44ac59",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3160,
        "y": 720,
        "wires": []
    },
    {
        "id": "68b1975a4a8ab28d",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 2830,
        "y": 980,
        "wires": [
            [
                "e81dc83962f7d46b"
            ]
        ]
    },
    {
        "id": "3edb45e1ae2cc323",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3120,
        "y": 780,
        "wires": []
    },
    {
        "id": "3cdbfa3787dc9c5a",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 73",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3120,
        "y": 820,
        "wires": []
    },
    {
        "id": "43eada3da32e26f4",
        "type": "catch",
        "z": "58612799aa277ac1",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 2880,
        "y": 680,
        "wires": [
            [
                "2a57bc40ec44ac59"
            ]
        ]
    },
    {
        "id": "f7ca7a69e580bb6e",
        "type": "file in",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/default.pa",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 3660,
        "y": 4600,
        "wires": [
            [
                "502e96e214e78e11",
                "633011060fb16ff0"
            ]
        ]
    },
    {
        "id": "502e96e214e78e11",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload & 'load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3900,
        "y": 4600,
        "wires": [
            [
                "5e1d3bc857b0ca66",
                "72098ea2901a40af"
            ]
        ]
    },
    {
        "id": "5e1d3bc857b0ca66",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": ".pulse/default.pa",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 4140,
        "y": 4600,
        "wires": [
            [
                "0df5850ca3b0283e"
            ]
        ]
    },
    {
        "id": "633011060fb16ff0",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 99",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3860,
        "y": 4680,
        "wires": []
    },
    {
        "id": "72098ea2901a40af",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 100",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4050,
        "y": 4660,
        "wires": []
    },
    {
        "id": "0df5850ca3b0283e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 101",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4350,
        "y": 4640,
        "wires": []
    },
    {
        "id": "c9647e53cf057db0",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 3450,
        "y": 4600,
        "wires": [
            [
                "f7ca7a69e580bb6e"
            ]
        ]
    },
    {
        "id": "269931d9bf2e7e45",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": ".pulse/client.conf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 3910,
        "y": 4740,
        "wires": [
            [
                "464085724dd8e17e"
            ]
        ]
    },
    {
        "id": "8ff9c53e0ef523d6",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "default-server = 127.0.0.1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3600,
        "y": 4740,
        "wires": [
            [
                "269931d9bf2e7e45",
                "02f16bd01dfe9c1e"
            ]
        ]
    },
    {
        "id": "464085724dd8e17e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 102",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4170,
        "y": 4780,
        "wires": []
    },
    {
        "id": "02f16bd01dfe9c1e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 103",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3810,
        "y": 4800,
        "wires": []
    },
    {
        "id": "68fc5bfc35339f45",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 3450,
        "y": 4740,
        "wires": [
            [
                "8ff9c53e0ef523d6"
            ]
        ]
    },
    {
        "id": "971903158ff678d8",
        "type": "file in",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/client.conf",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 3660,
        "y": 4300,
        "wires": [
            [
                "f328c4d89098b855",
                "3da8907f333e75da"
            ]
        ]
    },
    {
        "id": "f328c4d89098b855",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload & 'default-server = unix:/tmp/pulse-server'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3900,
        "y": 4280,
        "wires": [
            [
                "46b6c0073736b593",
                "366adfff312e6a88"
            ]
        ]
    },
    {
        "id": "366adfff312e6a88",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/client.conf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 4180,
        "y": 4280,
        "wires": [
            [
                "ac347988db23d754"
            ]
        ]
    },
    {
        "id": "3da8907f333e75da",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 104",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3860,
        "y": 4380,
        "wires": []
    },
    {
        "id": "46b6c0073736b593",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 105",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4050,
        "y": 4360,
        "wires": []
    },
    {
        "id": "ac347988db23d754",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 106",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4350,
        "y": 4340,
        "wires": []
    },
    {
        "id": "ad24056dfb41aad1",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 3450,
        "y": 4300,
        "wires": [
            [
                "971903158ff678d8"
            ]
        ]
    },
    {
        "id": "4d1007ccf304fd2d",
        "type": "file in",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/default.pa",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 3640,
        "y": 4440,
        "wires": [
            [
                "08f9d1fa97e95e8c",
                "4e2039ab2ac2fba7"
            ]
        ]
    },
    {
        "id": "08f9d1fa97e95e8c",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "load-module module-native-protocol-unix",
                "fromt": "str",
                "to": "load-module module-native-protocol-unix auth-group=audio socket=/tmp/pulse-server",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3920,
        "y": 4420,
        "wires": [
            [
                "779348476f453acb",
                "6fac32e8e113c721"
            ]
        ]
    },
    {
        "id": "6fac32e8e113c721",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/default.pa",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 4180,
        "y": 4420,
        "wires": [
            [
                "fecb5622fb06759c"
            ]
        ]
    },
    {
        "id": "4e2039ab2ac2fba7",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 107",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3860,
        "y": 4520,
        "wires": []
    },
    {
        "id": "779348476f453acb",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 108",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4050,
        "y": 4500,
        "wires": []
    },
    {
        "id": "fecb5622fb06759c",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 109",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4350,
        "y": 4480,
        "wires": []
    },
    {
        "id": "c408e707108bb8ef",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 3450,
        "y": 4440,
        "wires": [
            [
                "4d1007ccf304fd2d"
            ]
        ]
    },
    {
        "id": "39cd7acbe7d1995e",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "To add the function i strore in lib because it'snot  project shared in node-red",
        "info": "",
        "x": 2440,
        "y": 4600,
        "wires": []
    },
    {
        "id": "66dcd234ef93e3dd",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\t    'sudo -S rm -r ' & $globalContext(\"projectDir\") & '/lib',\t    'sudo -S cp -r .node-red/lib/functions ' & $globalContext(\"projectDir\")\t]",
        "payloadType": "jsonata",
        "x": 2250,
        "y": 4660,
        "wires": [
            [
                "8de50771ed9d3a9b"
            ]
        ]
    },
    {
        "id": "dd7287eae557868f",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "REALY NEED TO DO SOMETHING SECURE  TO BE ABLE TO DONT USE PASSWORD WITH MY DYNAMIQUE TERMINAL",
        "info": "",
        "x": 2580,
        "y": 4740,
        "wires": []
    },
    {
        "id": "8de50771ed9d3a9b",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 2365,
        "y": 4660,
        "wires": []
    },
    {
        "id": "e56274cb05305b00",
        "type": "function",
        "z": "58612799aa277ac1",
        "name": "function 12",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 3940,
        "wires": [
            []
        ]
    },
    {
        "id": "5bf4bc855e96c3d8",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "Some stuuf for enable bluetooth",
        "info": "add pulse audio in bluetooth group\nsudo usermod -a -G pulse-access root\nvicky@vicky:~$ sudo usermod -a -G pulse-access vicky",
        "x": 2270,
        "y": 2340,
        "wires": []
    },
    {
        "id": "4ee04c8733fdd089",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "",
        "info": "",
        "x": 2120,
        "y": 2140,
        "wires": []
    },
    {
        "id": "db6ed91d83a7dd13",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "Load the user of the OS",
        "info": "",
        "x": 160,
        "y": 520,
        "wires": []
    },
    {
        "id": "a8877ed283dac019",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "feb59419786f5177"
            ]
        ]
    },
    {
        "id": "cc5ad03705d058e4",
        "type": "link in",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "Go to load user os",
        "links": [
            "b0e63695bcd5c315"
        ],
        "x": 625,
        "y": 580,
        "wires": [
            [
                "90248df8ca18f6ba"
            ]
        ]
    },
    {
        "id": "27b05f485af9e106",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "ef08ad9ecb7fca29"
        ],
        "x": 435,
        "y": 580,
        "wires": []
    },
    {
        "id": "90248df8ca18f6ba",
        "type": "switch",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "property": "lastCommand",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "id -un",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "child process exited with code 0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 580,
        "wires": [
            [
                "3b011cf37635651a"
            ],
            [
                "b615aa5df78a3970"
            ]
        ]
    },
    {
        "id": "3b011cf37635651a",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "OSUser",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "504b36d4a62a76d6"
            ]
        ]
    },
    {
        "id": "b615aa5df78a3970",
        "type": "switch",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "property": "OSUser",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 640,
        "wires": [
            [
                "4edd0e02917e548e",
                "9469ffd8127e2810"
            ],
            [
                "9469ffd8127e2810"
            ]
        ]
    },
    {
        "id": "26bed7857859d975",
        "type": "switch",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Cancel",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1430,
        "y": 620,
        "wires": [
            [
                "feb59419786f5177"
            ]
        ]
    },
    {
        "id": "feb59419786f5177",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\"id -un\"]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 580,
        "wires": [
            [
                "27b05f485af9e106"
            ]
        ]
    },
    {
        "id": "4edd0e02917e548e",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 660,
        "wires": [
            [
                "4465fa74532be31f"
            ]
        ]
    },
    {
        "id": "504b36d4a62a76d6",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 560,
        "wires": [
            [
                "7362f4e09732f0d8"
            ]
        ]
    },
    {
        "id": "9469ffd8127e2810",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "No OS user the button will be desactivated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 620,
        "wires": [
            [
                "cdfd1d73457ea283"
            ]
        ]
    },
    {
        "id": "4465fa74532be31f",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "mode": "link",
        "links": [
            "43c0975e7bb96e1a",
            "9a3d1961c9c303cd",
            "bb05228eade21d1f"
        ],
        "x": 1265,
        "y": 660,
        "wires": []
    },
    {
        "id": "7362f4e09732f0d8",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd"
        ],
        "x": 1395,
        "y": 560,
        "wires": []
    },
    {
        "id": "6730444c7d0ae92f",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "For the 3D CAO",
        "info": "",
        "x": 2260,
        "y": 4840,
        "wires": []
    },
    {
        "id": "bbbac82b0e8ca5c5",
        "type": "projectdir",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "db6ff932806cc474"
            ]
        ]
    },
    {
        "id": "7991a19d69835c5c",
        "type": "sox-play",
        "z": "58612799aa277ac1",
        "name": "",
        "outputDevice": "default",
        "manualOutput": "",
        "gain": "0",
        "startNew": "start",
        "playStream": false,
        "inputEncoding": "signed-integer",
        "inputChannels": 1,
        "inputRate": 16000,
        "inputBits": 16,
        "debugOutput": true,
        "x": 2880,
        "y": 760,
        "wires": [
            [
                "2a57bc40ec44ac59"
            ]
        ]
    },
    {
        "id": "e81dc83962f7d46b",
        "type": "sox-record",
        "z": "58612799aa277ac1",
        "name": "",
        "buttonStart": "msg",
        "inputs": 1,
        "inputSource": "default",
        "manualSource": "0:0",
        "inputEncoding": "signed-integer",
        "inputChannels": 1,
        "inputRate": 16000,
        "inputBits": 16,
        "byteOrder": "-L",
        "encoding": "signed-integer",
        "channels": 1,
        "rate": 16000,
        "bits": 16,
        "gain": "0",
        "buffer": "4096",
        "showDuration": true,
        "durationType": "limited",
        "durationLength": "10",
        "silenceDetection": "nothing",
        "silenceDuration": "2.0",
        "silenceThreshold": "2.0",
        "outputFormat": "file",
        "manualPath": "test2",
        "debugOutput": true,
        "x": 2850,
        "y": 840,
        "wires": [
            [
                "3edb45e1ae2cc323"
            ],
            [
                "3cdbfa3787dc9c5a"
            ]
        ]
    },
    {
        "id": "cdfd1d73457ea283",
        "type": "ui_toast",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Retry",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1290,
        "y": 620,
        "wires": [
            [
                "26bed7857859d975"
            ]
        ]
    },
    {
        "id": "89abe519e798830c",
        "type": "ui_ui_control",
        "z": "58612799aa277ac1",
        "g": "47b5cb4dc8f3e87d",
        "name": "",
        "events": "connect",
        "x": 780,
        "y": 640,
        "wires": [
            [
                "b615aa5df78a3970"
            ]
        ]
    },
    {
        "id": "dd12c1941d59bdf6",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "For MQTT broker",
        "info": "",
        "x": 2520,
        "y": 3820,
        "wires": []
    },
    {
        "id": "c32f9ff98b097d80",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "Install mosquitto",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S apt-get install mosquitto\"]",
        "payloadType": "jsonata",
        "x": 2540,
        "y": 3880,
        "wires": [
            [
                "e38177f099bbd16e"
            ]
        ]
    },
    {
        "id": "e38177f099bbd16e",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 2685,
        "y": 3860,
        "wires": []
    },
    {
        "id": "ac77b23c553996f1",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "Enable service and create user",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S systemctl enable mosquitto\",\"sudo -S systemctl start mosquitto\",\"sudo -S mosquitto_passwd -c /etc/mosquitto/passwd rhasspy \"]",
        "payloadType": "jsonata",
        "x": 2590,
        "y": 3960,
        "wires": [
            [
                "554e2cdad38c152a"
            ]
        ]
    },
    {
        "id": "554e2cdad38c152a",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 2805,
        "y": 3960,
        "wires": []
    },
    {
        "id": "6d3f5c59c5819fde",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "To run in terminal",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo nano /etc/mosquitto/mosquitto.conf\"]",
        "payloadType": "jsonata",
        "x": 2540,
        "y": 4060,
        "wires": [
            []
        ]
    },
    {
        "id": "75352da420673640",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "THINGS TO DO HERE",
        "info": "put that at this end of the file of the nano command\n\npassword_file /etc/mosquitto/passwd\nallow_anonymous false",
        "x": 2540,
        "y": 4020,
        "wires": []
    },
    {
        "id": "594fabac30c5d5c6",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "Create the certificate",
        "info": "thx to https://www.coxprod.org/domotique/securiser-la-connexion-mqtt-dans-rhasspy/4/\n\nLe premier, c’est “Organization Unit”. Ce champ nous permettra de mettre le rôle associé au certificat. Le second, c’est le champ “Common name”. Il faudra soit mettre le hostname soit son adresse IP. Donc si l’IP n’est pas fixe, préfère le hostname. Il ne faut pas que 2 certificats aient les mêmes informations, sinon, ça va foirer.\n\nsudo openssl req -out mosquitto.csr -key mosquitto.key -new\nComme tout à l’heure, il va falloir entrer quelques informations. Là aussi, il faudra bien faire attention aux 2 champs “Organization Name” et “Common name”. Par contre, ne rentre pas de “challenge password”. Tapes juste sur “Entrée”",
        "x": 2530,
        "y": 4120,
        "wires": []
    },
    {
        "id": "eea0f3866282dea4",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 2835,
        "y": 4180,
        "wires": []
    },
    {
        "id": "d348509c533ac2a8",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "340f0570f339a07c",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 3965,
        "y": 640,
        "wires": []
    },
    {
        "id": "24c84fabf45d5e04",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "340f0570f339a07c",
        "name": "Script generator for ssh",
        "info": "",
        "x": 3340,
        "y": 540,
        "wires": []
    },
    {
        "id": "0ee4f173c5c400d1",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "340f0570f339a07c",
        "name": "",
        "props": [
            {
                "p": "certsPath",
                "v": "/etc/certs",
                "vt": "str"
            },
            {
                "p": "caPath",
                "v": "certsPath & '/ca'",
                "vt": "jsonata"
            },
            {
                "p": "country",
                "v": "FR",
                "vt": "str"
            },
            {
                "p": "state",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "locality",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "organization",
                "v": "TechSC",
                "vt": "str"
            },
            {
                "p": "organizationalUnit",
                "v": "ca",
                "vt": "str"
            },
            {
                "p": "email",
                "v": "accueil@techsc.fr",
                "vt": "str"
            },
            {
                "p": "applicationName",
                "v": "rhasspy",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3350,
        "y": 600,
        "wires": [
            [
                "61fa31b769cbb57c"
            ]
        ]
    },
    {
        "id": "61fa31b769cbb57c",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "340f0570f339a07c",
        "name": "Script generator ssl to just run once for create your ca",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t   \"sudo mkdir \"&certsPath,\t   \"sudo mkdir \"&caPath,\t   \"sudo openssl req -new -x509 -days 3650 -extensions v3_ca -keyout \"&caPath&\"/ca.key -out \"&caPath&\"/ca.crt\",\t   \"sudo chmod 600 \"&caPath&\"ca.key \"&caPath&\"/ca.crt\"\t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3640,
        "y": 600,
        "wires": [
            [
                "0f34db3c6059330a",
                "d348509c533ac2a8"
            ]
        ]
    },
    {
        "id": "0f34db3c6059330a",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "340f0570f339a07c",
        "name": "debug 143",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4170,
        "y": 600,
        "wires": []
    },
    {
        "id": "d705226923c1c70b",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "",
        "props": [
            {
                "p": "certsPath",
                "v": "/etc/certs",
                "vt": "str"
            },
            {
                "p": "caPath",
                "v": "certsPath & '/ca'",
                "vt": "jsonata"
            },
            {
                "p": "country",
                "v": "FR",
                "vt": "str"
            },
            {
                "p": "state",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "locality",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "organization",
                "v": "TechSC",
                "vt": "str"
            },
            {
                "p": "organizationalUnit",
                "v": "ca",
                "vt": "str"
            },
            {
                "p": "email",
                "v": "accueil@techsc.fr",
                "vt": "str"
            },
            {
                "p": "applicationName",
                "v": "mosquitto",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2510,
        "y": 4180,
        "wires": [
            [
                "e76db92cc821e1dc"
            ]
        ]
    },
    {
        "id": "e76db92cc821e1dc",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "Script generator ssl",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t   \"sudo mkdir \"&certsPath,\t   \"sudo mkdir \"&caPath,\t   \"sudo openssl req -new -x509 -days 3650 -extensions v3_ca -keyout \"&caPath&\"/ca.key -out \"&caPath&\"/ca.crt\",\t   \"sudo chmod 600 \"&caPath&\"ca.key \"&caPath&\"/ca.crt\",\t   \"sudo mkdir \"&certsPath&\"/\"&applicationName,\t   \"sudo openssl genrsa -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key 2048\",\t   \"sudo openssl req -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr -key \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key -new\",\t   \"sudo openssl x509 -req -in \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr -CA \"&caPath&\"/ca.crt -CAkey \"&caPath&\"/ca.key -CAcreateserial -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".crt -days 3650\",\t   \"sudo chmod 600 \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".crt\" \t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2690,
        "y": 4180,
        "wires": [
            [
                "eea0f3866282dea4"
            ]
        ]
    },
    {
        "id": "7daa310ff267702c",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "THINGS TO DO HERE",
        "info": "sudo nano /etc/mosquitto/mosquitto.conf\n\n//## Si on veut autoriser aussi les connexions non chiffrees\n//listener 1883\n\n## Activation des connexions chifrees par TLS\nlistener 8883\ncafile /etc/mosquitto/certs/ca.crt\ncertfile /etc/mosquitto/certs/mosquitto.crt\nkeyfile /etc/mosquitto/certs/mosquitto.key\ntls_version tlsv1.2\nrequire_certificate true",
        "x": 2540,
        "y": 4260,
        "wires": []
    },
    {
        "id": "239311cd157b74fa",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.crt /etc/mosquitto/certs\",\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.csr /etc/mosquitto/certs\",\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.key /etc/mosquitto/certs\",\"sudo -S cp /etc/certs/ca/ca.crt /etc/mosquitto/certs/\",\"sudo -S chown -R mosquitto /etc/mosquitto/certs\",\"mosquitto_passwd -c passwordfile user\",\"cp -fr passwordfile /etc/mosquitto\"]",
        "payloadType": "json",
        "x": 2510,
        "y": 4220,
        "wires": [
            [
                "43a79bd58eabb2a7"
            ]
        ]
    },
    {
        "id": "43a79bd58eabb2a7",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 2655,
        "y": 4220,
        "wires": []
    },
    {
        "id": "b526c618a38e84f3",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "27d23b8fe6e3b662",
        "name": "FOR NOW I DIDINT MANAGE TO GET IT WORK",
        "info": "",
        "x": 2620,
        "y": 3780,
        "wires": []
    },
    {
        "id": "20a147eabb5d2d86",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "340f0570f339a07c",
        "name": "Script generator ssl you",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t   \"sudo mkdir \"&destination,\t   \"sudo openssl genrsa -out \"&destination&\"/\"&applicationName&\".key 2048\",\t   \"sudo openssl req -out \"&destination&\"/\"&applicationName&\".csr -key \"&destination&\"/\"&applicationName&\".key -new\",\t   \"sudo openssl x509 -req -in \"&destination&\"/\"&applicationName&\".csr -CA \"&caPath&\"/ca.crt -CAkey \"&caPath&\"/ca.key -CAcreateserial -out \"&destination&\"/\"&applicationName&\".crt -days 3650\"\t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3550,
        "y": 640,
        "wires": [
            [
                "d348509c533ac2a8"
            ]
        ]
    },
    {
        "id": "0f755852830a94f4",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "340f0570f339a07c",
        "name": "",
        "props": [
            {
                "p": "applicationName",
                "v": "rhasspy",
                "vt": "str"
            },
            {
                "p": "destination",
                "v": "/dolibarr",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3330,
        "y": 640,
        "wires": [
            [
                "20a147eabb5d2d86"
            ]
        ]
    },
    {
        "id": "9e7fcf2906f05495",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "e6bfa779e8988908",
        "name": "Run the script for generate ssl file",
        "info": "",
        "x": 3370,
        "y": 900,
        "wires": []
    },
    {
        "id": "02b6639290dbf4a5",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "e6bfa779e8988908",
        "name": "THINGS TO DO HERE WHEN YOU HAVE A RUN THE SCRIPT",
        "info": "in your .node-red/settings.file find:\n//    https: {\n//        key: require(\"fs\").readFileSync(\".pem\"),\n//        cert: require(\"fs\").readFileSync(\".pem\")\n//    },\nand replace by\n    https: {\n        key: require(\"fs\").readFileSync(\"THE PATH YOU HAVE SET UP WHEN TOU RUN THE SCRIPT/nodered.key\"),\n        cert: require(\"fs\").readFileSync(\"THE PATH YOU HAVE SET UP WHEN TOU RUN THE SCRIPT/nodered.crt\"),\n\t    ca: require(\"fs\").readFileSync(\"THE PATH YOU HAVE SET UP WHEN TOU RUN THE SCRIPT/nodered.csr\")\n    },\n\nfind:\n//httpNodeCors: {\n//    origin: \"*\",\n//    methods: \"GET,PUT,POST,DELETE\",\n//},\nand replace by\n    httpNodeCors: {\n        origin: \"Thr IP you gonna allow to talk to node-red\",\n        methods: \"GET,PUT,POST,DELETE\",\n\t    credentials: true\n    },\n\nfind: //requireHttps: true,\nand remove the //\n\nfind:  //httpAdminRoot: '/admin', \nand remove the // you can change admin by wathever you want. To go to the editor you have to put /admin to connect to node-red\nthis needed because ther is a issue without cors we set above\n\nfind:\n//httpNodeAuth: {user:\"user\",pass:\"frghtrhrthrthrthrth\"},\nand remove the //\n",
        "x": 3470,
        "y": 980,
        "wires": []
    },
    {
        "id": "fc62c24868cdc470",
        "type": "exec",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "command": "ip -j address",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 970,
        "y": 140,
        "wires": [
            [
                "3b2dd43a127982f6"
            ],
            [
                "b65237e8d3b302fa"
            ],
            [
                "b65237e8d3b302fa"
            ]
        ]
    },
    {
        "id": "15acca7bfc68df6a",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 720,
        "y": 120,
        "wires": [
            [
                "fc62c24868cdc470"
            ]
        ]
    },
    {
        "id": "3b2dd43a127982f6",
        "type": "json",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1150,
        "y": 120,
        "wires": [
            [
                "b56cbac6977e1dd7"
            ]
        ]
    },
    {
        "id": "b56cbac6977e1dd7",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "function 16",
        "func": "msg.wlan = msg.payload.filter(connection => connection.ifname==\"wlan0\")\nglobal.set(\"ip\",msg.wlan[0].addr_info[0].local)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 140,
        "wires": [
            [
                "b65237e8d3b302fa"
            ]
        ]
    },
    {
        "id": "a63afe78ac16cd7c",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "Packets to install on linux",
        "info": "",
        "x": 190,
        "y": 380,
        "wires": []
    },
    {
        "id": "c9b408509b964873",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "props": [
            {
                "p": "packageNames",
                "v": "[\"pslist\"]",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "f182e36bcc72160e",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "Command for docker THINGS TO DO HERE",
        "info": "You have to install docker and docker-compose. Go to the website to get the instruction\n[https://docs.docker.com/engine/install/debian/]()\n\nAfter that install docker-compose with the command below\nsudo apt install docker-compose",
        "x": 230,
        "y": 1420,
        "wires": []
    },
    {
        "id": "127c7e83594d398c",
        "type": "inject",
        "z": "58612799aa277ac1",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo systemctl enable nodered.service\"]",
        "payloadType": "json",
        "x": 130,
        "y": 1480,
        "wires": [
            [
                "c779dce1ced02432"
            ]
        ]
    },
    {
        "id": "c779dce1ced02432",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9",
            "bc746456f276f19a"
        ],
        "x": 245,
        "y": 1480,
        "wires": []
    },
    {
        "id": "ab8da480eac029e4",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "For Rhasspy",
        "info": "",
        "x": 130,
        "y": 4420,
        "wires": []
    },
    {
        "id": "0c5393c65250ba67",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "Setup your rhasspy here",
        "props": [
            {
                "p": "portFr",
                "v": "12101",
                "vt": "str"
            },
            {
                "p": "portUDPFr",
                "v": "11111",
                "vt": "str"
            },
            {
                "p": "portMQTTFr",
                "v": "12183",
                "vt": "str"
            },
            {
                "p": "portEn",
                "v": "12102",
                "vt": "str"
            },
            {
                "p": "portUDPEn",
                "v": "22222",
                "vt": "str"
            },
            {
                "p": "portMQTTEn",
                "v": "12184",
                "vt": "str"
            },
            {
                "p": "volumePath",
                "v": "$HOME/.config/rhasspy/profiles/profiles",
                "vt": "str"
            },
            {
                "p": "container_name",
                "v": "rhasspy",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 4480,
        "wires": [
            [
                "f0c1e2bb00cac29d"
            ]
        ]
    },
    {
        "id": "6078d5a71aba9cb4",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.volumes[0]",
                "pt": "msg",
                "to": "volumePath & ':/profiles'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.volumes[0]",
                "pt": "msg",
                "to": "volumePath & ':/profiles'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.ports[0]",
                "pt": "msg",
                "to": "portFr &':12101'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.ports[0]",
                "pt": "msg",
                "to": "portEn &':12101'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.container_name",
                "pt": "msg",
                "to": "container_name & '-en'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.container_name",
                "pt": "msg",
                "to": "container_name & '-fr'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.ports[1]",
                "pt": "msg",
                "to": "portUDPFr &':11111'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.ports[1]",
                "pt": "msg",
                "to": "portUDPEn &':22222'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.ports[2]",
                "pt": "msg",
                "to": "portMQTTEn &':12183'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.ports[2]",
                "pt": "msg",
                "to": "portMQTTFr &':12183'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 4480,
        "wires": [
            [
                "bb11857047d502ba"
            ]
        ]
    },
    {
        "id": "79e23d9c9217412e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 4420,
        "wires": []
    },
    {
        "id": "f0c1e2bb00cac29d",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$globalContext('projectDir') & '/rhasspy/docker-compose.yml'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 4480,
        "wires": [
            [
                "60afb050ae8fb072"
            ]
        ]
    },
    {
        "id": "60afb050ae8fb072",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 620,
        "y": 4480,
        "wires": [
            [
                "3997b52502d5daec"
            ]
        ]
    },
    {
        "id": "3997b52502d5daec",
        "type": "yaml",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "property": "payload",
        "name": "",
        "x": 750,
        "y": 4480,
        "wires": [
            [
                "6078d5a71aba9cb4"
            ]
        ]
    },
    {
        "id": "8653f9a51bd95502",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "Launch the docker-compose",
        "info": "",
        "x": 160,
        "y": 4560,
        "wires": []
    },
    {
        "id": "5536a5b3555f5188",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "'[\"docker-compose -f ' & $globalContext('projectDir') & '/rhasspy/docker-compose.yml up\"]'",
        "payloadType": "jsonata",
        "x": 130,
        "y": 4600,
        "wires": [
            [
                "dbde7493df2cceee"
            ]
        ]
    },
    {
        "id": "dbde7493df2cceee",
        "type": "json",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 4600,
        "wires": [
            [
                "b5dd8cd763d949cd"
            ]
        ]
    },
    {
        "id": "b5dd8cd763d949cd",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 425,
        "y": 4600,
        "wires": []
    },
    {
        "id": "bb11857047d502ba",
        "type": "yaml",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "property": "payload",
        "name": "",
        "x": 1090,
        "y": 4480,
        "wires": [
            [
                "b1423554c863d2ce",
                "79e23d9c9217412e"
            ]
        ]
    },
    {
        "id": "b1423554c863d2ce",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 4480,
        "wires": [
            []
        ]
    },
    {
        "id": "f68521ba07011be2",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "To read ABSOLUTLY",
        "info": "At this point you must have a rhasspy up on the port you have set\n",
        "x": 140,
        "y": 4680,
        "wires": []
    },
    {
        "id": "6890e8d9c73aa9a9",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "For the sound system",
        "info": "",
        "x": 160,
        "y": 4760,
        "wires": []
    },
    {
        "id": "a130218ebf73839e",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "set up right user dir for XDG_RUNTIME_DIR  ABSOLUTLY NEEDED FOR SOUND WORK",
        "info": "Needed because something append with user and pulseaudio",
        "x": 370,
        "y": 4820,
        "wires": []
    },
    {
        "id": "38fd6ac23d306d17",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"killall pulseaudio\", \"pulseaudio --start\"]",
        "payloadType": "json",
        "x": 130,
        "y": 4880,
        "wires": [
            [
                "56bebece38ffc3a4"
            ]
        ]
    },
    {
        "id": "56bebece38ffc3a4",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 285,
        "y": 4880,
        "wires": []
    },
    {
        "id": "54eb815f98ac7cb6",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 130,
        "y": 4920,
        "wires": [
            [
                "2415c8d20228c78c"
            ]
        ]
    },
    {
        "id": "d70a3c3e2ee2287f",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "ef08ad9ecb7fca29"
        ],
        "x": 455,
        "y": 4960,
        "wires": []
    },
    {
        "id": "2415c8d20228c78c",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "filename": ".node-red/settings.js",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 4920,
        "wires": [
            [
                "f6ab7dbf1772113d"
            ]
        ]
    },
    {
        "id": "223a514a8886c88c",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "debug 98",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 4960,
        "wires": []
    },
    {
        "id": "f6ab7dbf1772113d",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "enable context storage and contextKeys ",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "exportGlobalContextKeys: false,",
                "fromt": "str",
                "to": "exportGlobalContextKeys: true,",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 4960,
        "wires": [
            [
                "6cfe6713f1b52d38"
            ]
        ]
    },
    {
        "id": "3d23c0470e7df63d",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "Inject and go to dashboard to but your mdp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S node-red-restart\"]",
        "payloadType": "json",
        "x": 240,
        "y": 4960,
        "wires": [
            [
                "d70a3c3e2ee2287f"
            ]
        ]
    },
    {
        "id": "6cfe6713f1b52d38",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "",
        "filename": ".node-red/settings.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1060,
        "y": 4900,
        "wires": [
            [
                "223a514a8886c88c"
            ]
        ]
    },
    {
        "id": "089b3259d71ad1a1",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "11e903a0078ab5ae",
        "name": "Need to activage storage context manualy",
        "info": "",
        "x": 780,
        "y": 4920,
        "wires": []
    },
    {
        "id": "1062808635d4d00d",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "73a13b2a544544a8",
        "name": "For the FTP server",
        "info": "Modify the /etc/vsftpd.conf file\nuncomment #write_enable=YES\n\nAdd\nforce_dot_files=YES\n",
        "x": 150,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b482b5c9e8bf7d29",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "73a13b2a544544a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo apt install vsftpd\",\"sudo systemctl start vsftpd\"]",
        "payloadType": "json",
        "x": 130,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "7c2342eac26ece9a",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "",
        "filename": "filenameOfVscode",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1000,
        "y": 3600,
        "wires": [
            []
        ]
    },
    {
        "id": "b81c5add143e1468",
        "type": "template",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "let fullVariable = {{payload}}",
        "output": "str",
        "x": 740,
        "y": 3680,
        "wires": [
            [
                "7c2342eac26ece9a"
            ]
        ]
    },
    {
        "id": "967cb147479fa7d2",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "",
        "filename": "filenameOfVscode",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 3560,
        "wires": [
            []
        ]
    },
    {
        "id": "727ab0f58fdd8b57",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "Get the file name you have write",
        "func": "const dir = global.get(\"projectDir\")+'/tmp';\nmsg.filenameOfVscode = flow.get(\"filename\")\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 3560,
        "wires": [
            [
                "967cb147479fa7d2"
            ]
        ]
    },
    {
        "id": "dee22873495bf536",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "Load the file",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 3560,
        "wires": [
            [
                "727ab0f58fdd8b57"
            ]
        ]
    },
    {
        "id": "4aea92bb483309c4",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "Generate the file TEMPLATE",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 300,
        "y": 3620,
        "wires": [
            []
        ]
    },
    {
        "id": "be799980b0051af5",
        "type": "link in",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "Load the vscode.js file",
        "links": [],
        "x": 355,
        "y": 3520,
        "wires": [
            [
                "727ab0f58fdd8b57"
            ]
        ]
    },
    {
        "id": "99ed9d0501a8f94c",
        "type": "link in",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "Generate the vscode.js file",
        "links": [],
        "x": 135,
        "y": 3680,
        "wires": [
            [
                "263695ae43a1a8dc"
            ]
        ]
    },
    {
        "id": "6b70a0e29cc4c4e1",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "Generate the file for UI TEMPLATE node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 3760,
        "wires": [
            [
                "acc5c6651e8035cc"
            ]
        ]
    },
    {
        "id": "64af6af8b797ef14",
        "type": "template",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "let msg = {{{payload}}}\n//NO SCRIPT HERE because console.log doesnt work in function you declare here so the code generate dont gonna be portable outise the dashboard\n\n//Declare function and excute code outise at boot and return the scope you can do that only once in each ui template node \n//Part run on reload page\n(function(scope,msg){\n    //declare function\n    \n    //do some stuff at boot\n    //Part on Message AND on relaod if YOU SET reload last value on refresh on THIS NODE\n    //The $watch is leave because if you dont use ui template node that gonna be an entry on websocket or mqqt for exmple \n    scope.$watch('msg', function(msg) {\n        //if you put someting outise the if below that gonna be run on page reload if reload last value on refresh\n        if (msg) {\n        }\n        //NO CODE\n    })\n})(scope);",
        "output": "str",
        "x": 740,
        "y": 3720,
        "wires": [
            [
                "bfeb31bda4584013",
                "7c2342eac26ece9a"
            ]
        ]
    },
    {
        "id": "9d4a97cd15fce943",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "Function to use node-red variable vscode UI TEMPLATE NODE",
        "func": "//You can can have intellisense for msg no global and flow bacause they can't be use in UI TEMPLATE node\n//to go back in node-red to check value. With this setup you can use intelissense instead of go back to node-red.\n//all of the object create here is delete after so do not remove the \\n in function below\nconst dir = global.get(\"projectDir\")+'/tmp';\nfs.readdir(dir, (err, files) => {\n    console.log(files.length);\n    let flows\n    let globals\n    flows = flow.keys()\n    globals = global.keys()\n    if(files.length%2===0){\n        msg.filenameOfVscode = dir+'/vscode1.js';\n    }else{\n        msg.filenameOfVscode = dir+'/vscode2.js';\n    }\n    node.send({ payload: JSON.stringify(msg) + '\\n', filenameOfVscode: msg.filenameOfVscode}) \n});\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 430,
        "y": 3720,
        "wires": [
            [
                "64af6af8b797ef14",
                "2fb1b8f4a3ee09c1"
            ]
        ]
    },
    {
        "id": "acc5c6651e8035cc",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "trtrttrtr",
                "pt": "flow",
                "to": "zgerregerregregregregerg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 3760,
        "wires": [
            [
                "9d4a97cd15fce943"
            ]
        ]
    },
    {
        "id": "263695ae43a1a8dc",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "Function to use node-red variable vscode for TEMPLATE NODE",
        "func": "//You can can have intellisense for msg but not for global and flow. They are here to avoid\n//to go back in node-red to check value. With this setup you can use intelissense instead of go back to node-red\n//all of the object create here is delete after so do not remove the \\n in function below\nconst dir = global.get(\"projectDir\")+'/tmp';\nfs.readdir(dir, (err, files) => {\n    console.log(files.length);\n    let flows\n    let globals\n    flows = flow.keys()\n    globals = global.keys()\n    if(files.length%2===0){\n        msg.filenameOfVscode = dir+'/vscode1.js';\n    }else{\n        msg.filenameOfVscode = dir+'/vscode2.js';\n    }\n    node.send({ payload: \"let fullVariable = \" + '{ \"flow\": ' + JSON.stringify(flows) + ', \"global\": ' + JSON.stringify(globals) + ', \"msg\": ' + JSON.stringify(msg) + ' }\\n', filenameOfVscode: msg.filenameOfVscode}) \n});\nreturn;\n//TO DO\n//transform all fullVariable.flows.nameofvariable par flow.get ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 430,
        "y": 3680,
        "wires": [
            [
                "b81c5add143e1468"
            ]
        ]
    },
    {
        "id": "2fb1b8f4a3ee09c1",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "debug 123",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 3760,
        "wires": []
    },
    {
        "id": "bfeb31bda4584013",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "debug 124",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 3740,
        "wires": []
    },
    {
        "id": "2d830b30c5768e2d",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "111a6963dd720d7d",
        "name": "HAVE WORK TO DO HERE",
        "info": "Transform all of that to connect it to /monaco url\nMake a subflow to choose securly the file host file system unless i found a trick with the api and ftp of dolibarr or both\n",
        "x": 200,
        "y": 3480,
        "wires": []
    },
    {
        "id": "42eb0fb9ddd99985",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "For the code editor",
        "info": "NEED WORK but i think we gonna do our file explorer from where we gonna iframe the dashboard. inception :)\n",
        "x": 170,
        "y": 2660,
        "wires": []
    },
    {
        "id": "13a00ced10e42c62",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"git clone https://github.com/microsoft/monaco-editor.git\",\"cd monaco-editor\",\"cd samples\",\"npm install .\",\"sudo -S rm -r browser-amd-diff-editor browser-amd-iframe browser-amd-localized browser-amd-monarch browser-amd-requirejs browser-amd-shadow-dom browser-amd-shared-model browser-amd-trusted-types browser-esm-esbuild browser-esm-parcel browser-esm-vite-react browser-esm-webpack browser-esm-webpack-monaco-plugin browser-esm-webpack-small browser-esm-webpack-typescript browser-esm-webpack-typescript-react browser-script-editor electron-amd electron-amd-nodeIntegration electron-esm-webpack\",\"npm run simpleserver\"]",
        "payloadType": "json",
        "x": 150,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "8ed3b2f2a0c58fbd",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "Need to acces to monaco brwser environement with autocompletion for navigator or document for exemple",
        "info": "\n",
        "x": 440,
        "y": 2700,
        "wires": []
    },
    {
        "id": "c722ef3f6e2b2715",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "Need to switch to ace editor for node-red because it seems doesn't work. The site of monaco they that doesnt works on mobile but the setup i have above work",
        "info": "\n",
        "x": 600,
        "y": 2800,
        "wires": []
    },
    {
        "id": "090d9cefd34fa11e",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "filename": ".node-red/settings.js",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 2840,
        "wires": [
            [
                "66a0f8c982cab7dd"
            ]
        ]
    },
    {
        "id": "66a0f8c982cab7dd",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "enable ace",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "lib: \"monaco\"",
                "fromt": "str",
                "to": "lib: \"ace\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 2840,
        "wires": [
            [
                "8a30476f533145fb"
            ]
        ]
    },
    {
        "id": "8a30476f533145fb",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "filename": ".node-red/settings.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 2840,
        "wires": [
            [
                "a10f537d5f2ea961"
            ]
        ]
    },
    {
        "id": "c15d852e510fe2b2",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 150,
        "y": 2840,
        "wires": [
            [
                "090d9cefd34fa11e"
            ]
        ]
    },
    {
        "id": "a10f537d5f2ea961",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "debug 118",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2840,
        "wires": []
    },
    {
        "id": "2f24cc9e728da7b0",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "Launch code editor on boot ",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 200,
        "y": 2900,
        "wires": [
            [
                "0c9f1b311a1160b4",
                "70e60aea63b08bcf"
            ]
        ]
    },
    {
        "id": "6e65fefad0ae8c68",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "From launch code editor",
        "mode": "link",
        "links": [
            "ef08ad9ecb7fca29"
        ],
        "x": 1345,
        "y": 2900,
        "wires": []
    },
    {
        "id": "17368fa557035a81",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\"bash \" & $globalContext('projectDir') & '/scripts/codeEditorLauncher.sh']",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 2900,
        "wires": [
            [
                "6e65fefad0ae8c68"
            ]
        ]
    },
    {
        "id": "70e60aea63b08bcf",
        "type": "http request",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.21:8888",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "5185155403df9d58",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "scope": [
            "70e60aea63b08bcf"
        ],
        "uncaught": false,
        "x": 650,
        "y": 2900,
        "wires": [
            [
                "b577f66ee2172ab6",
                "a10f537d5f2ea961"
            ]
        ]
    },
    {
        "id": "9316ea9c485af292",
        "type": "delay",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 2900,
        "wires": [
            [
                "17368fa557035a81"
            ]
        ]
    },
    {
        "id": "b577f66ee2172ab6",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delai",
                "pt": "msg",
                "to": "delay ? delay*2 : 3",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 2900,
        "wires": [
            [
                "9316ea9c485af292"
            ]
        ]
    },
    {
        "id": "20686310ad206fe6",
        "type": "status",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "",
        "scope": [
            "70e60aea63b08bcf"
        ],
        "x": 660,
        "y": 2940,
        "wires": [
            []
        ]
    },
    {
        "id": "44242e20df8e0781",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "HAVE TO check if just status node do the job",
        "info": "",
        "x": 930,
        "y": 2940,
        "wires": []
    },
    {
        "id": "0c9f1b311a1160b4",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "019d9a9cc09be55f",
        "name": "debug 122",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 2940,
        "wires": []
    },
    {
        "id": "6499174e576ce696",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "For dolibarr",
        "info": "",
        "x": 130,
        "y": 1560,
        "wires": []
    },
    {
        "id": "339a5e0f74c49149",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "put secret here",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "perseignUF",
        "payloadType": "str",
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "8b2b28e1026493d9"
            ]
        ]
    },
    {
        "id": "7a5a547b0df4892f",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "Setup your dolibarr here",
        "props": [
            {
                "p": "dolContainerName",
                "v": "dolibarr",
                "vt": "str"
            },
            {
                "p": "dolPort",
                "v": "8300",
                "vt": "str"
            },
            {
                "p": "dolTag",
                "v": "16",
                "vt": "str"
            },
            {
                "p": "dolVolumePath",
                "v": "../../../../dolibarr/dolibarr-docs",
                "vt": "str"
            },
            {
                "p": "dolCustomVolumePath",
                "v": "../../../../dolibarr/dolibarr-custom",
                "vt": "str"
            },
            {
                "p": "mysqlContainerName",
                "v": "dolibarr-mysql",
                "vt": "str"
            },
            {
                "p": "mariadTag",
                "v": "latest",
                "vt": "str"
            },
            {
                "p": "mysqlVolume",
                "v": "../../../../dolibarr/mysql-data",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 1640,
        "wires": [
            [
                "203e38f90378bc0b",
                "eaf6125428780d4b"
            ]
        ]
    },
    {
        "id": "ae3205e4b9cbea7d",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 620,
        "y": 1640,
        "wires": [
            [
                "700c16c4880824b3",
                "b0061efba9ec7a0a"
            ]
        ]
    },
    {
        "id": "700c16c4880824b3",
        "type": "yaml",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "property": "payload",
        "name": "",
        "x": 770,
        "y": 1640,
        "wires": [
            [
                "28c917d6eda9a305",
                "033d60e22c2af2c6"
            ]
        ]
    },
    {
        "id": "28c917d6eda9a305",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.services.dolibarr.image",
                "pt": "msg",
                "to": "'tuxgasy/dolibarr:' & dolTag",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.dolibarr.ports[0]",
                "pt": "msg",
                "to": "dolPort &':80'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.dolibarr.volumes[0]",
                "pt": "msg",
                "to": "dolVolumePath & ':/var/www/documents'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.dolibarr.volumes[1]",
                "pt": "msg",
                "to": "dolCustomVolumePath & ':/var/www/html/custom'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.mysql.image",
                "pt": "msg",
                "to": "'library/mariadb:' & mariadTag",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.mysql.volumes[0]",
                "pt": "msg",
                "to": "mysqlVolume & ':/var/lib/mysql'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.dolibarr.container_name",
                "pt": "msg",
                "to": "dolContainerName",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.services.mysql.container_name",
                "pt": "msg",
                "to": "mysqlContainerName",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1640,
        "wires": [
            [
                "f1bb665c6385aadf",
                "1d89c6c60e8e2b6e"
            ]
        ]
    },
    {
        "id": "8b2b28e1026493d9",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "mysql user",
        "filename": "$globalContext('projectDir') & '/secrets/mysql_user.secret'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 390,
        "y": 1820,
        "wires": [
            [
                "0e5877e98ddb2739"
            ]
        ]
    },
    {
        "id": "088213a593be532c",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "mysql password",
        "filename": "$globalContext('projectDir') & '/secrets/mysql_password.secret'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 400,
        "y": 1860,
        "wires": [
            [
                "0e5877e98ddb2739"
            ]
        ]
    },
    {
        "id": "134f74e33e524828",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "dolibarr user",
        "filename": "$globalContext('projectDir') & '/secrets/dolibarr_admin_username.secret'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 390,
        "y": 1900,
        "wires": [
            [
                "0e5877e98ddb2739"
            ]
        ]
    },
    {
        "id": "1daa769f65d84089",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "dolibarr password",
        "filename": "$globalContext('projectDir') & '/secrets/dolibarr_admin_password.secret'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 410,
        "y": 1940,
        "wires": [
            [
                "0e5877e98ddb2739"
            ]
        ]
    },
    {
        "id": "0e5877e98ddb2739",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1880,
        "wires": []
    },
    {
        "id": "6c52798ba73d8aaa",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "put secret here",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "perseigne1",
        "payloadType": "str",
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "088213a593be532c"
            ]
        ]
    },
    {
        "id": "58997504b6302423",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "put secret here",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "perseigneUF",
        "payloadType": "str",
        "x": 160,
        "y": 1900,
        "wires": [
            [
                "134f74e33e524828"
            ]
        ]
    },
    {
        "id": "b20c84178a2161b6",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "put secret here",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "perseigne1",
        "payloadType": "str",
        "x": 160,
        "y": 1940,
        "wires": [
            [
                "1daa769f65d84089"
            ]
        ]
    },
    {
        "id": "d0ddf9ad780f8607",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "'[\"docker-compose -f ' & $globalContext('projectDir') & '/dolibarr/docker-compose.yml up\"]'",
        "payloadType": "jsonata",
        "x": 130,
        "y": 2080,
        "wires": [
            [
                "0e5877e98ddb2739",
                "26f9aff4e4747cf1"
            ]
        ]
    },
    {
        "id": "f1bb665c6385aadf",
        "type": "yaml",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "property": "payload",
        "name": "",
        "x": 1150,
        "y": 1640,
        "wires": [
            [
                "10ff589546c10d32",
                "a06b71f9c5926940"
            ]
        ]
    },
    {
        "id": "10ff589546c10d32",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1400,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "203e38f90378bc0b",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$globalContext('projectDir') & '/dolibarr/docker-compose.yml'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 1640,
        "wires": [
            [
                "ae3205e4b9cbea7d"
            ]
        ]
    },
    {
        "id": "d2ec84eb3db780d5",
        "type": "template",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "env file for dolibarr",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "DOLI_INSTALL_AUTO=1\nDOLI_DB_HOST=mysql\nDOLI_DB_HOST_PORT=3306\nDOLI_DB_NAME=dolibarr\nDOLI_URL_ROOT=http://localhost:{{dolPort}}\nDOLI_NOCSRFCHECK=0\nWWW_USER_ID=33\nWWW_GROUP_ID=33\nPHP_INI_DATE_TIMEZONE=UTC\nPHP_INI_MEMORY_LIMIT=256M",
        "output": "str",
        "x": 650,
        "y": 1680,
        "wires": [
            [
                "bb8792732fcdc4b6",
                "71ddfd204b85eedf"
            ]
        ]
    },
    {
        "id": "eaf6125428780d4b",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$globalContext('projectDir') & '/dolibarr/env/dolibarr.env'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 1680,
        "wires": [
            [
                "d2ec84eb3db780d5"
            ]
        ]
    },
    {
        "id": "bb8792732fcdc4b6",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 900,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "b0061efba9ec7a0a",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1600,
        "wires": []
    },
    {
        "id": "033d60e22c2af2c6",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1600,
        "wires": []
    },
    {
        "id": "1d89c6c60e8e2b6e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "debug 65",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1600,
        "wires": []
    },
    {
        "id": "a06b71f9c5926940",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 1600,
        "wires": []
    },
    {
        "id": "9c089071d4ac6b20",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "Set up your docker compose",
        "info": "",
        "x": 180,
        "y": 1600,
        "wires": []
    },
    {
        "id": "bade2561cc1c5169",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "Create you secret file (no docker swarm so no sercret for now)",
        "info": "",
        "x": 280,
        "y": 1780,
        "wires": []
    },
    {
        "id": "1eacaa9229dcb29e",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "Launch the docker-compose",
        "info": "",
        "x": 180,
        "y": 2040,
        "wires": []
    },
    {
        "id": "8692c9d2e1f313c3",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9",
            "bc746456f276f19a"
        ],
        "x": 465,
        "y": 2080,
        "wires": []
    },
    {
        "id": "26f9aff4e4747cf1",
        "type": "json",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 2080,
        "wires": [
            [
                "8692c9d2e1f313c3"
            ]
        ]
    },
    {
        "id": "95a478c35f287810",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "To read ABSOLUTLY",
        "info": "At this point you must have a dolibarr up on the port you have set\nYou need to to the next buble to security",
        "x": 140,
        "y": 2360,
        "wires": []
    },
    {
        "id": "dbc1e7cfc8884e71",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "CREATE AN OTHER USER IN DOLIBARR AND GIVE ADMIN RIGHT WITH NEW CREDENTIAL",
        "info": "At this point you must have a dolibarr up on the port you have set\nYou need to to the next buble to security",
        "x": 370,
        "y": 2400,
        "wires": []
    },
    {
        "id": "71ddfd204b85eedf",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1720,
        "wires": []
    },
    {
        "id": "8635f7cfb216325c",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "Watcher on boot for doliabarr",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 200,
        "y": 2180,
        "wires": [
            [
                "7cb0a71630395136"
            ]
        ]
    },
    {
        "id": "845c39cba0ee9279",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\"bash \" & $globalContext('projectDir') & '/scripts/codeEditorLauncher.sh']",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 2180,
        "wires": [
            [
                "088b811e65dfaa5a"
            ]
        ]
    },
    {
        "id": "e682c04966762f98",
        "type": "http request",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "8c9dfd35ea195cfb",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "scope": [
            "e682c04966762f98"
        ],
        "uncaught": false,
        "x": 870,
        "y": 2180,
        "wires": [
            [
                "10598333a2888ff2"
            ]
        ]
    },
    {
        "id": "a0c8607e14ad9ef9",
        "type": "delay",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 2180,
        "wires": [
            [
                "845c39cba0ee9279"
            ]
        ]
    },
    {
        "id": "10598333a2888ff2",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delai",
                "pt": "msg",
                "to": "delay ? delay*2 : 3",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 2180,
        "wires": [
            [
                "a0c8607e14ad9ef9"
            ]
        ]
    },
    {
        "id": "997d8c1849b362f7",
        "type": "status",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "scope": [
            "e682c04966762f98"
        ],
        "x": 880,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "151050c2a585f7fe",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "HAVE TO check if just status node do the job",
        "info": "",
        "x": 1150,
        "y": 2220,
        "wires": []
    },
    {
        "id": "7cb0a71630395136",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "\"http://\"&$globalContext(\"ip\") &\":8300\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 2180,
        "wires": [
            [
                "e682c04966762f98"
            ]
        ]
    },
    {
        "id": "088b811e65dfaa5a",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "debug 125",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 2240,
        "wires": []
    },
    {
        "id": "8f1dab3002769cfa",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "Check if available on boot",
        "info": "",
        "x": 170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "39de74c3e1f0dd02",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "4ed571b02aa263c0",
        "name": "HAVE TO ADD dolibarr module of techsc in the project",
        "info": "At this point you must have a dolibarr up on the port you have set\nYou need to to the next buble to security",
        "x": 240,
        "y": 2280,
        "wires": []
    },
    {
        "id": "9a8fcf1aeb23d1da",
        "type": "http in",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "",
        "url": "postFile",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 3100,
        "wires": [
            [
                "716e5372cc31e9a6",
                "08e75563226f2f42"
            ]
        ]
    },
    {
        "id": "9fa9eefe8c8315e1",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "Handle post file",
        "info": "",
        "x": 140,
        "y": 3040,
        "wires": []
    },
    {
        "id": "716e5372cc31e9a6",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "debug 128",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 3140,
        "wires": []
    },
    {
        "id": "08e75563226f2f42",
        "type": "json",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 3100,
        "wires": [
            [
                "a74c7f586631fbb2"
            ]
        ]
    },
    {
        "id": "a74c7f586631fbb2",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.filePath",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 3100,
        "wires": [
            [
                "e2d22d7621344bac",
                "2616b6785cd00275"
            ]
        ]
    },
    {
        "id": "2616b6785cd00275",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 740,
        "y": 3100,
        "wires": [
            [
                "f04cc2253264eec7",
                "3b073a160af23a0e"
            ]
        ]
    },
    {
        "id": "e2d22d7621344bac",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "debug 132",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 3060,
        "wires": []
    },
    {
        "id": "3b073a160af23a0e",
        "type": "http response",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 3120,
        "wires": []
    },
    {
        "id": "f04cc2253264eec7",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "debug 133",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 3060,
        "wires": []
    },
    {
        "id": "42dfbf23b4c84968",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "",
        "scope": [
            "2616b6785cd00275"
        ],
        "uncaught": false,
        "x": 590,
        "y": 3160,
        "wires": [
            [
                "3b073a160af23a0e",
                "647370b82ac5594b"
            ]
        ]
    },
    {
        "id": "647370b82ac5594b",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "a85ec4860851e411",
        "name": "debug 138",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 3160,
        "wires": []
    },
    {
        "id": "c07b6699340fbcd5",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "For MQTT broker NOT USE BECAUSE NOT SUCCED TO GET A SECURE CONF FOR NOW",
        "info": "",
        "x": 360,
        "y": 3880,
        "wires": []
    },
    {
        "id": "a8aef4c62ebda58b",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "Install mosquitto",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S apt-get install mosquitto\"]",
        "payloadType": "jsonata",
        "x": 140,
        "y": 3940,
        "wires": [
            [
                "5f2e5d67487c7f52"
            ]
        ]
    },
    {
        "id": "5f2e5d67487c7f52",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 285,
        "y": 3920,
        "wires": []
    },
    {
        "id": "e0e0291ab706ea63",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "Enable service and create user",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S systemctl enable mosquitto\",\"sudo -S systemctl start mosquitto\",\"sudo -S mosquitto_passwd -c /etc/mosquitto/passwd rhasspy \"]",
        "payloadType": "jsonata",
        "x": 190,
        "y": 4020,
        "wires": [
            [
                "c003f97c2d6b1ecf"
            ]
        ]
    },
    {
        "id": "c003f97c2d6b1ecf",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 405,
        "y": 4020,
        "wires": []
    },
    {
        "id": "66145d63b4a3759b",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "To run in terminal",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo nano /etc/mosquitto/mosquitto.conf\"]",
        "payloadType": "jsonata",
        "x": 140,
        "y": 4120,
        "wires": [
            []
        ]
    },
    {
        "id": "0c83f1140aaa650a",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "THINGS TO DO HERE",
        "info": "put that at this end of the file of the nano command\n\npassword_file /etc/mosquitto/passwd\nallow_anonymous false",
        "x": 140,
        "y": 4080,
        "wires": []
    },
    {
        "id": "0364a6765fddcc39",
        "type": "mqtt in",
        "z": "58612799aa277ac1",
        "d": true,
        "g": "816dba1c45b8b78b",
        "name": "",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "91f1b589e74d876c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 830,
        "y": 4000,
        "wires": [
            [
                "d46a090167b6a697"
            ]
        ]
    },
    {
        "id": "d46a090167b6a697",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "debug 142",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 4020,
        "wires": []
    },
    {
        "id": "b89ece6cd278f964",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "",
        "scope": [
            "0364a6765fddcc39"
        ],
        "uncaught": false,
        "x": 790,
        "y": 4060,
        "wires": [
            [
                "d46a090167b6a697"
            ]
        ]
    },
    {
        "id": "1a0d64ee75fde097",
        "type": "mqtt out",
        "z": "58612799aa277ac1",
        "d": true,
        "g": "816dba1c45b8b78b",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "91f1b589e74d876c",
        "x": 990,
        "y": 4120,
        "wires": []
    },
    {
        "id": "7d75e0a4afcaf4dd",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "Create the certificate",
        "info": "thx to https://www.coxprod.org/domotique/securiser-la-connexion-mqtt-dans-rhasspy/4/\n\nLe premier, c’est “Organization Unit”. Ce champ nous permettra de mettre le rôle associé au certificat. Le second, c’est le champ “Common name”. Il faudra soit mettre le hostname soit son adresse IP. Donc si l’IP n’est pas fixe, préfère le hostname. Il ne faut pas que 2 certificats aient les mêmes informations, sinon, ça va foirer.\n\nsudo openssl req -out mosquitto.csr -key mosquitto.key -new\nComme tout à l’heure, il va falloir entrer quelques informations. Là aussi, il faudra bien faire attention aux 2 champs “Organization Name” et “Common name”. Par contre, ne rentre pas de “challenge password”. Tapes juste sur “Entrée”",
        "x": 130,
        "y": 4180,
        "wires": []
    },
    {
        "id": "b64045c99cd338d0",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 435,
        "y": 4240,
        "wires": []
    },
    {
        "id": "c22f3db703628382",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "",
        "props": [
            {
                "p": "certsPath",
                "v": "/etc/certs",
                "vt": "str"
            },
            {
                "p": "caPath",
                "v": "certsPath & '/ca'",
                "vt": "jsonata"
            },
            {
                "p": "country",
                "v": "FR",
                "vt": "str"
            },
            {
                "p": "state",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "locality",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "organization",
                "v": "TechSC",
                "vt": "str"
            },
            {
                "p": "organizationalUnit",
                "v": "ca",
                "vt": "str"
            },
            {
                "p": "email",
                "v": "accueil@techsc.fr",
                "vt": "str"
            },
            {
                "p": "applicationName",
                "v": "mosquitto",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 4240,
        "wires": [
            [
                "a6fc3bc21bc47895"
            ]
        ]
    },
    {
        "id": "a6fc3bc21bc47895",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "Script generator ssl",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t   \"sudo mkdir \"&certsPath,\t   \"sudo mkdir \"&caPath,\t   \"sudo openssl req -new -x509 -days 3650 -extensions v3_ca -keyout \"&caPath&\"/ca.key -out \"&caPath&\"/ca.crt\",\t   \"sudo chmod 600 \"&caPath&\"ca.key \"&caPath&\"/ca.crt\",\t   \"sudo mkdir \"&certsPath&\"/\"&applicationName,\t   \"sudo openssl genrsa -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key 2048\",\t   \"sudo openssl req -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr -key \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key -new\",\t   \"sudo openssl x509 -req -in \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr -CA \"&caPath&\"/ca.crt -CAkey \"&caPath&\"/ca.key -CAcreateserial -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".crt -days 3650\",\t   \"sudo chmod 600 \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".crt\" \t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 4240,
        "wires": [
            [
                "b64045c99cd338d0"
            ]
        ]
    },
    {
        "id": "a491c99282ffd706",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "THINGS TO DO HERE",
        "info": "sudo nano /etc/mosquitto/mosquitto.conf\n\n//## Si on veut autoriser aussi les connexions non chiffrees\n//listener 1883\n\n## Activation des connexions chifrees par TLS\nlistener 8883\ncafile /etc/mosquitto/certs/ca.crt\ncertfile /etc/mosquitto/certs/mosquitto.crt\nkeyfile /etc/mosquitto/certs/mosquitto.key\ntls_version tlsv1.2\nrequire_certificate true",
        "x": 140,
        "y": 4320,
        "wires": []
    },
    {
        "id": "eb313792563b107a",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.crt /etc/mosquitto/certs\",\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.csr /etc/mosquitto/certs\",\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.key /etc/mosquitto/certs\",\"sudo -S cp /etc/certs/ca/ca.crt /etc/mosquitto/certs/\",\"sudo -S chown -R mosquitto /etc/mosquitto/certs\",\"mosquitto_passwd -c passwordfile user\",\"cp -fr passwordfile /etc/mosquitto\"]",
        "payloadType": "json",
        "x": 110,
        "y": 4280,
        "wires": [
            [
                "7e79908e974385de"
            ]
        ]
    },
    {
        "id": "7e79908e974385de",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "816dba1c45b8b78b",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 255,
        "y": 4280,
        "wires": []
    },
    {
        "id": "54dbb3422c75859a",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "Command for node-red first install: boot at launch",
        "info": "",
        "x": 260,
        "y": 820,
        "wires": []
    },
    {
        "id": "601f6bedb356bf0d",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo systemctl enable nodered.service\"]",
        "payloadType": "json",
        "x": 190,
        "y": 860,
        "wires": [
            [
                "8bb6adaaf5f017e4"
            ]
        ]
    },
    {
        "id": "8bb6adaaf5f017e4",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 295,
        "y": 860,
        "wires": []
    },
    {
        "id": "5ff35737d4ef52c1",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "For node-red",
        "info": "",
        "x": 150,
        "y": 780,
        "wires": []
    },
    {
        "id": "c6dcbadb0ba46a75",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "THINGS TO DO HERE TO READ FOR SECURE NODE-RED Create the SSL certificat",
        "info": "If it's yout first ssl certificat dont forget to run the first step of the script generator for ssl on the right\nAfter that you can continue",
        "x": 380,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e90fbf86d0c30903",
        "type": "comment",
        "z": "58612799aa277ac1",
        "d": true,
        "g": "dd24392cc62ce355",
        "name": "THINGS TO DO HERE Command to run to generate conf of nlint ",
        "info": "Since it's npm i think no cd possible with my terminal so you have to run it in SSH terminal for now",
        "x": 310,
        "y": 920,
        "wires": []
    },
    {
        "id": "e989f5792b9f580e",
        "type": "inject",
        "z": "58612799aa277ac1",
        "d": true,
        "g": "dd24392cc62ce355",
        "name": "Command",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo systemctl enable nodered.service\"]",
        "payloadType": "json",
        "x": 180,
        "y": 960,
        "wires": [
            [
                "8a6e36bdadab66b9"
            ]
        ]
    },
    {
        "id": "8a6e36bdadab66b9",
        "type": "link out",
        "z": "58612799aa277ac1",
        "d": true,
        "g": "dd24392cc62ce355",
        "name": "",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 265,
        "y": 960,
        "wires": []
    },
    {
        "id": "13d3f95332c221fb",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "09ae005b0bb6d415"
            ]
        ]
    },
    {
        "id": "09ae005b0bb6d415",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "Load flow variable for template node",
        "rules": [
            {
                "t": "set",
                "p": "certPath",
                "pt": "msg",
                "to": "$flowContext(\"certsPath\") & '/nodered/nodered.crt'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "keyPath",
                "pt": "msg",
                "to": "$flowContext(\"certsPath\") & '/nodered/nodered.key'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1100,
        "wires": [
            [
                "8bbf779d582f7116"
            ]
        ]
    },
    {
        "id": "8bbf779d582f7116",
        "type": "template",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "",
        "field": "modifiedPart",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "    https: {\n        key: require(\"fs\").readFileSync(\"{{{keyPath}}}\"),\n        cert: require(\"fs\").readFileSync(\"{{{certPath}}}\")\n    },",
        "output": "str",
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "4b19419db163cf9f"
            ]
        ]
    },
    {
        "id": "4b19419db163cf9f",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "Take content and replace Option 1 static object in yout setting file and restart node-red",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4d475f99c5fd1661",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "dd24392cc62ce355",
        "name": "Modify the seetings.js file to put the path or SSL file",
        "info": "",
        "x": 270,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b1aa9621a3155dfd",
        "type": "http in",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "",
        "url": "getFile",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 3300,
        "wires": [
            [
                "3a1b4a368a31b699",
                "7e467b2169952b5f"
            ]
        ]
    },
    {
        "id": "7298c2ad9cc80421",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "Handle open file",
        "info": "",
        "x": 160,
        "y": 3260,
        "wires": []
    },
    {
        "id": "7e467b2169952b5f",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "debug 127",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 3340,
        "wires": []
    },
    {
        "id": "3a1b4a368a31b699",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 3300,
        "wires": [
            [
                "711b85d8fa7b882c",
                "2eb5ea13657c9fdb"
            ]
        ]
    },
    {
        "id": "711b85d8fa7b882c",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "debug 135",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 3260,
        "wires": []
    },
    {
        "id": "150764e5ffd5686c",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "",
        "scope": [
            "3a1b4a368a31b699"
        ],
        "uncaught": false,
        "x": 510,
        "y": 3360,
        "wires": [
            [
                "797aa4a5d6d908df",
                "f7bf6f9e81165281"
            ]
        ]
    },
    {
        "id": "f7bf6f9e81165281",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 3340,
        "wires": [
            [
                "2eb5ea13657c9fdb",
                "797aa4a5d6d908df"
            ]
        ]
    },
    {
        "id": "2eb5ea13657c9fdb",
        "type": "http response",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 920,
        "y": 3300,
        "wires": []
    },
    {
        "id": "797aa4a5d6d908df",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "843507352d7aecff",
        "name": "debug 134",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 3380,
        "wires": []
    },
    {
        "id": "bff5e4a52b0e5044",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "d6c669dc0430ee27",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 2395,
        "y": 820,
        "wires": []
    },
    {
        "id": "ff23321cb8626625",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "d6c669dc0430ee27",
        "name": "Script generator for ssl  YOU HAVE TO GO TO THE DASHBOARD TO RUN THE COMMAND YOU HAVE TO ADD -S TO EACH COMMAND WICH START WITH SUDO.",
        "info": "Modify the first inject node no fit your needs.",
        "x": 1970,
        "y": 780,
        "wires": []
    },
    {
        "id": "12a80d04e0c3584e",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "d6c669dc0430ee27",
        "name": "",
        "props": [
            {
                "p": "applicationName",
                "v": "ftp",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1600,
        "y": 860,
        "wires": [
            [
                "d4bb39bce57aea57"
            ]
        ]
    },
    {
        "id": "d4bb39bce57aea57",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "d6c669dc0430ee27",
        "name": "Script generator ssl if you already have a ca if not run the collond above",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t   \"sudo mkdir \"&$flowContext(\"certsPath\")&\"/\"&applicationName,\t   \"sudo openssl genrsa -out \"&$flowContext(\"certsPath\")&\"/\"&applicationName&\"/\"&applicationName&\".key 2048\",\t   \"sudo openssl req -out \"&$flowContext(\"certsPath\")&\"/\"&applicationName&\"/\"&applicationName&\".csr -key \"&$flowContext(\"certsPath\")&\"/\"&applicationName&\"/\"&applicationName&\".key -new\",\t   \"sudo openssl x509 -req -in \"&$flowContext(\"certsPath\")&\"/\"&applicationName&\"/\"&applicationName&\".csr -CA \"&$flowContext(\"caPath\")&\"/ca.crt -CAkey \"&$flowContext(\"caPath\")&\"/ca.key -CAcreateserial -out \"&$flowContext(\"certsPath\")&\"/\"&applicationName&\"/\"&applicationName&\".crt -days 3650\",\t   \"sudo chmod 600 \"&$flowContext(\"certsPath\")&\"/\"&applicationName&\"/\"&applicationName&\".csr \"&$flowContext(\"certsPath\")&\"/\"&applicationName&\"/\"&applicationName&\".key \"&$flowContext(\"certsPath\")&\"/\"&applicationName&\"/\"&applicationName&\".crt\" \t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2030,
        "y": 860,
        "wires": [
            [
                "424eb7699cab270f",
                "bff5e4a52b0e5044"
            ]
        ]
    },
    {
        "id": "424eb7699cab270f",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "d6c669dc0430ee27",
        "name": "debug 143",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2440,
        "y": 860,
        "wires": []
    },
    {
        "id": "44e5860cc3f5b74f",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "d6c669dc0430ee27",
        "name": "",
        "props": [
            {
                "p": "certsPath",
                "v": "/etc/certs",
                "vt": "str"
            },
            {
                "p": "caPath",
                "v": "certsPath & '/ca'",
                "vt": "jsonata"
            },
            {
                "p": "country",
                "v": "FR",
                "vt": "str"
            },
            {
                "p": "state",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "locality",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "organization",
                "v": "PerseigneUF",
                "vt": "str"
            },
            {
                "p": "organizationalUnit",
                "v": "ca",
                "vt": "str"
            },
            {
                "p": "email",
                "v": "accueil@techsc.fr",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1600,
        "y": 820,
        "wires": [
            [
                "cef540999b630fb7"
            ]
        ]
    },
    {
        "id": "7214f4f61c1de456",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "d6c669dc0430ee27",
        "name": "Script generator to create ssl ca",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t   \"sudo mkdir \"&certsPath,\t   \"sudo mkdir \"&caPath,\t   \"sudo openssl req -new -x509 -days 3650 -extensions v3_ca -keyout \"&caPath&\"/ca.key -out \"&caPath&\"/ca.crt\",\t   \"sudo chmod 600 \"&caPath&\"ca.key \"&caPath&\"/ca.crt\"\t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2130,
        "y": 820,
        "wires": [
            [
                "bff5e4a52b0e5044"
            ]
        ]
    },
    {
        "id": "cef540999b630fb7",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "d6c669dc0430ee27",
        "name": "global variable for ca",
        "rules": [
            {
                "t": "set",
                "p": "certsPath",
                "pt": "flow",
                "to": "certsPath",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "caPath",
                "pt": "flow",
                "to": "caPath",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "country",
                "pt": "flow",
                "to": "country",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "state",
                "pt": "flow",
                "to": "state",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "locality",
                "pt": "flow",
                "to": "locality",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "organization",
                "pt": "flow",
                "to": "organization",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "organizationalUnit",
                "pt": "flow",
                "to": "organizationalUnit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "email",
                "pt": "flow",
                "to": "email",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1860,
        "y": 820,
        "wires": [
            [
                "7214f4f61c1de456"
            ]
        ]
    },
    {
        "id": "6d15424931ec8ea4",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "THINGS TO DO HERE TO READ",
        "info": "For project dependencies:\nyouu can manage dependencies of the project but that is not egnough. you have to \"npm i\" for each dependencies.\n\nFor the dashboard:\nGo to the tab dashboard and find the comment node call \"TO DO FIRST\" and do what it tells you. ",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "8b9bf8042d6d0086",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2800,
        "wires": [
            [
                "470e7c7b3fdd0dd4"
            ]
        ]
    },
    {
        "id": "044736d06695925a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "['sshpass -p ' & password & ' ssh vicky@127.0.0.1']",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 2800,
        "wires": [
            [
                "f7a7f433f57b1adf"
            ]
        ]
    },
    {
        "id": "f7a7f433f57b1adf",
        "type": "change",
        "z": "57297ea9585b5f93",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$append(payload,[\"bluetoothctl\"])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 2800,
        "wires": [
            [
                "ae240d4f23c90b5c"
            ]
        ]
    },
    {
        "id": "ae240d4f23c90b5c",
        "type": "json",
        "z": "57297ea9585b5f93",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 190,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "c55cc453d177f340",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "name": "NEED TO ADD SOMETHING TO HANDLE \"npm run\" IT SEEMS It must be the part of command in swarm nodejs function",
        "info": "NEED TO ADD A && DETECTION\nSOMETHING GOES WRONG WITH THE AUTO EXCUTION THAT DOESNT WORK FOR AN ARRAY PUT YOU HAVE TO FORMAT IT LIKE THAT :)",
        "x": 1930,
        "y": 180,
        "wires": []
    },
    {
        "id": "470e7c7b3fdd0dd4",
        "type": "credentials",
        "z": "57297ea9585b5f93",
        "name": "",
        "props": [
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 390,
        "y": 2800,
        "wires": [
            [
                "044736d06695925a"
            ]
        ]
    },
    {
        "id": "9910400a70e3748f",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 240,
        "wires": []
    },
    {
        "id": "cfef9b965281e35e",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "function 5",
        "func": " //the array is the arguments\nlet commands = msg.payload.commands.split('\\n')\nlet cmdAndArgs = commands[0].split(' ')\nlet cmd = cmdAndArgs[0]\ncmdAndArgs.splice(0,1)\nlet args = cmdAndArgs\nvar child = cp.spawn(cmd,args);\n//node.send({\"args\":args})\n//node.send({ \"cmd\":cmd})\n//node.send({ \"commands\":commands})\nfor (let index = 1; index < commands.length; index++) {\n    const element = commands[index];\n    child.stdin.write(element+'\\n')\n}\nchild.stdout.on('data', function (data) {\n    msg.payload = data.toString()\n    msg.process = child\n    node.send(msg);\n});\nchild.stderr.on('data', function (data) {\n    msg.payload = data.toString()\n    msg.process = child\n    node.send(msg);\n})\nchild.stdin.end(); \nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cp",
                "module": "child_process"
            }
        ],
        "x": 660,
        "y": 200,
        "wires": [
            [
                "5dcd97a52a9af266",
                "a46c53a4f25125bf"
            ]
        ]
    },
    {
        "id": "3879658cfc8f39a6",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "",
        "props": [
            {
                "p": "commands",
                "v": "[\"bluetoothctl\", \"devices\", \"devices\"]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 220,
        "wires": [
            [
                "cfef9b965281e35e"
            ]
        ]
    },
    {
        "id": "99e6f7120bc13cf8",
        "type": "ui_form",
        "z": "57297ea9585b5f93",
        "d": true,
        "g": "b8f8611163248bdd",
        "name": "",
        "label": "",
        "group": "a1efc069e293d845",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "commands",
                "value": "commands",
                "type": "multiline",
                "required": true,
                "rows": 3
            }
        ],
        "formValue": {
            "commands": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 270,
        "y": 260,
        "wires": [
            [
                "9910400a70e3748f",
                "cfef9b965281e35e"
            ]
        ]
    },
    {
        "id": "5dcd97a52a9af266",
        "type": "ui_template",
        "z": "57297ea9585b5f93",
        "d": true,
        "g": "b8f8611163248bdd",
        "group": "a1efc069e293d845",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\"></div>\n<script>\n    (function(scope) {\n  scope.$watch('msg', function(msg) {\n    if (msg) {\n      // Do something when msg arrives\n      //$(\"#my_\"+scope.$id).html('<div>'+msg.payload+'</div>');\n      let p = document.createElement(\"p\");\n      $(\"#my_\"+scope.$id).append(msg.payload, p)\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1040,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a46c53a4f25125bf",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 180,
        "wires": []
    },
    {
        "id": "ec2f91b7c82fe538",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "Terminal one shot",
        "info": "",
        "x": 290,
        "y": 160,
        "wires": []
    },
    {
        "id": "f899bfee50c2c5f6",
        "type": "file",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "filename": "$globalContext(\"projectDir\")& \"/child.js\"",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1860,
        "y": 680,
        "wires": [
            [
                "7f82046bd9d0371b"
            ]
        ]
    },
    {
        "id": "5fe632846e1697cf",
        "type": "template",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "var cp = require('child_process');\nlet child = cp.spawn('{{command}}', {{{args}}})\nchild.stdout.on('data', function (data) {\n    process.stdout.write(data.toString())\n    //console.log(data);\n});\nchild.stderr.on('data', function (data) {\n    console.log(`${data}`);\n});\nprocess.stdin.on('data', function (data) {\n    child.stdin.write(data)\n})\n\nchild.on('close', (code) => {\n    console.log(`child process exited with code ${code}`);\n});\n\n//process.on(\"message\", function (message) {\n//    console.log(`Message from main.js: ${message}`);\n//    cp.stdin.write(message)\n//});\n//cp.stdout.on('data', function (data) {\n//    console.log(`Message from main.js: ${data}`)\n//    process.send(data)\n//});\n",
        "output": "str",
        "x": 2340,
        "y": 640,
        "wires": [
            [
                "f899bfee50c2c5f6"
            ]
        ]
    },
    {
        "id": "8db83594bc604f4d",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 640,
        "wires": []
    },
    {
        "id": "684d60b75c1cc9da",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 900,
        "wires": []
    },
    {
        "id": "44c756161c28b0e2",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 560,
        "wires": []
    },
    {
        "id": "8b3802d31611155a",
        "type": "daemon",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "command": "node",
        "args": "/home/perseigneUF/.node-red/projects/perseigneUF/child.js",
        "autorun": false,
        "cr": true,
        "redo": false,
        "op": "string",
        "closer": "SIGKILL",
        "x": 2590,
        "y": 720,
        "wires": [
            [
                "44c756161c28b0e2",
                "2d81644308115d7d",
                "265694c368031b88",
                "3b9751a158948df4",
                "74dc2426dfad908d"
            ],
            [
                "8db83594bc604f4d",
                "265694c368031b88",
                "3b9751a158948df4"
            ],
            [
                "684d60b75c1cc9da",
                "265694c368031b88",
                "3b9751a158948df4"
            ]
        ]
    },
    {
        "id": "7f82046bd9d0371b",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "start",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2330,
        "y": 680,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "05636ee319db6f24",
        "type": "json",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "args",
        "action": "",
        "pretty": false,
        "x": 2150,
        "y": 640,
        "wires": [
            [
                "5fe632846e1697cf"
            ]
        ]
    },
    {
        "id": "dc5517b9df8183b5",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "stop command",
        "props": [
            {
                "p": "kill",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2320,
        "y": 860,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "0e66b4ca4d045ec1",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Exit command",
        "tooltip": "",
        "color": "",
        "bgcolor": "#532c2c",
        "className": "",
        "icon": "fa-solid fa-ban",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2080,
        "y": 900,
        "wires": [
            [
                "07b4fddee5d12ac2"
            ]
        ]
    },
    {
        "id": "3d8c166dafde23ec",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Split string in words wich content ' or \"",
        "func": "if(msg.payload.args){\n    //handle space in args \"my args\" like\n    let args = []\n    let allIndex = []\n    let indexOfLastCut = 0\n    let indexOflasGuillemet\n    let indexOfLastSimpleQuote\n    let countOfGuillemet = 0\n    let countOfSimpleQuote = 0\n    let countOfspace = 0\n    for (let index = 0; index < msg.payload.args.length; index++) {\n        const element = msg.payload.args[index];\n        if (element === \"'\"){\n            countOfSimpleQuote++\n            indexOfLastSimpleQuote = index\n        }\n        if(index === msg.payload.args.length-1){\n            msg.indelascut = indexOfLastCut\n            msg.indexlasguile = indexOflasGuillemet\n            if (element !== '\"' && element !== \"'\" ){\n                if (indexOflasGuillemet === indexOfLastCut || indexOfLastSimpleQuote === indexOfLastCut ) {\n                    let arg = msg.payload.args.substring(indexOfLastCut+2)\n                    args.push(arg)\n                }else{\n                    let arg = msg.payload.args.substring(indexOfLastCut)\n                    args.push(arg)\n                }\n            }else{\n                let arg = msg.payload.args.substring(indexOfLastCut)\n                args.push(arg)\n            }      \n        }else{\n            if (element === '\"') {\n                indexOflasGuillemet = index\n                countOfGuillemet++\n            }\n            if (element === ' ') {\n                countOfspace++\n                if (countOfGuillemet % 2 === 0 && countOfSimpleQuote % 2 === 0) {\n                    let arg = msg.payload.args.substring(indexOfLastCut, index)\n                    args.push(arg)\n                    indexOfLastCut = index + 1    \n                } else {\n                }\n            }\n        }\n    }\n    msg.args = args\n}\nmsg.command = msg.payload.command\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 640,
        "wires": [
            [
                "05636ee319db6f24",
                "1961a1e8fed2c784"
            ]
        ]
    },
    {
        "id": "07b4fddee5d12ac2",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2310,
        "y": 900,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "733d567b31de5df5",
        "type": "ui_template",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "group": "6e16baac817e17b4",
        "name": "",
        "order": 1,
        "width": "20",
        "height": "5",
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\"></div>\n<script>\n    (function(scope) {\n  scope.$watch('msg', function(msg) {\n    if (msg) {\n      // Do something when msg arrives\n      //$(\"#my_\"+scope.$id).html('<div>'+msg.payload+'</div>');\n      let p = document.createElement(\"p\");\n      p.style.color='white'\n      //document.querySelector.(\"#my_\"+scope.$id).insertAdjacentHTML('beforeend', '<p>'+msg.payload+'</p>')\n      $(\"#my_\"+scope.$id).append('<pre style=\"font-size:16px; color:#eeeeee\">'+msg.payload+'</pre>');\n      //lines = msg.payload.split('\\n')\n      //for(i=0; i <= lines.length;i++){\n        //p.insertAdjacentHTML('beforeend', '<p>'+msg.payload+'</p>')\n      //}   \n      //$(\"#my_\"+scope.$id).append(p)\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 3100,
        "y": 760,
        "wires": [
            [
                "fbd8b34ce62e5998"
            ]
        ]
    },
    {
        "id": "dcbb085ee2ecca8b",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Repeat",
        "tooltip": "",
        "color": "",
        "bgcolor": "#d1b478",
        "className": "",
        "icon": "fa-regular fa-rotate-right",
        "payload": "commandsOutList",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 340,
        "y": 920,
        "wires": [
            [
                "707a42c2835a3c14",
                "0a8c19f4df98784d",
                "11024c778cd30379"
            ]
        ]
    },
    {
        "id": "628dfb2257610e39",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1620,
        "y": 680,
        "wires": [
            [
                "3d8c166dafde23ec",
                "372c7037c1474f67"
            ]
        ]
    },
    {
        "id": "5e50781edb13f822",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Terminal dynamique",
        "info": "",
        "x": 430,
        "y": 380,
        "wires": []
    },
    {
        "id": "037c66ba96df20be",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 1620,
        "wires": []
    },
    {
        "id": "be4aa8937a2551a3",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3600,
        "y": 1700,
        "wires": []
    },
    {
        "id": "24099d8cac2ab795",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "label": "Command with arguments",
        "tooltip": "",
        "group": "255455bc3795b06c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 2850,
        "y": 1660,
        "wires": [
            [
                "8a4fdf696c797978"
            ]
        ]
    },
    {
        "id": "564ff8ef50de58b1",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Format message for spawn",
        "func": "let fullCommand = msg.payload\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 1600,
        "wires": [
            [
                "285ddcd6faf866c9"
            ]
        ]
    },
    {
        "id": "4d39ba490ae7a81f",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start list",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-solid fa-play",
        "payload": "command",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 1560,
        "y": 1660,
        "wires": [
            [
                "037c66ba96df20be",
                "a3348e49115feabc",
                "b7249babe9ca16cc",
                "04cf2cb39f05fbf5"
            ]
        ]
    },
    {
        "id": "06043ac62e7edf8e",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext(\"index\") +1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2540,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "7de319477688b8ba",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Continue",
        "tooltip": "",
        "color": "",
        "bgcolor": "#d1b478",
        "className": "",
        "icon": "fa-solid fa-forward",
        "payload": "command",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 1620,
        "y": 1920,
        "wires": [
            [
                "b7249babe9ca16cc",
                "55cc69056770aa9f"
            ]
        ]
    },
    {
        "id": "dfd243663d89ff30",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commands",
                "pt": "flow",
                "to": "$eval(payload)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext('index') ? $flowContext('index') : 0 ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1760,
        "y": 1460,
        "wires": [
            [
                "3ba29ad018e06586",
                "fd4dd9381332bd43",
                "ad653b64c5bc3d1c"
            ]
        ]
    },
    {
        "id": "e6cfcb3d10177c46",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "index",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "$count($flowContext('commands'))-1",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2010,
        "y": 1920,
        "wires": [
            [
                "bdf43fa3a5a439e7",
                "a49a58dcf5918f7a"
            ],
            [
                "06043ac62e7edf8e"
            ]
        ]
    },
    {
        "id": "7df4342477554fec",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "label": "Commands",
        "tooltip": "",
        "group": "255455bc3795b06c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1550,
        "y": 1460,
        "wires": [
            [
                "dfd243663d89ff30"
            ]
        ]
    },
    {
        "id": "e53439d570dffd07",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Part to handle array of command",
        "info": "",
        "x": 1610,
        "y": 1380,
        "wires": []
    },
    {
        "id": "a3348e49115feabc",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "$count($flowContext('commands'))",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 1600,
        "wires": [
            [
                "83df3adbaa2a6c51"
            ],
            [
                "2c48e3b743c58dc6",
                "86cdf396ce6d4aa0"
            ]
        ]
    },
    {
        "id": "83df3adbaa2a6c51",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2300,
        "y": 1600,
        "wires": [
            [
                "24099d8cac2ab795",
                "c8f6c212fc68f165"
            ]
        ]
    },
    {
        "id": "285ddcd6faf866c9",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3570,
        "y": 1660,
        "wires": [
            [
                "be4aa8937a2551a3"
            ]
        ]
    },
    {
        "id": "cc7f04658e10487c",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "lastCommand",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2080,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "2c48e3b743c58dc6",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext(\"index\") +1",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('commands')[$flowContext('index')]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2300,
        "y": 1640,
        "wires": [
            [
                "24099d8cac2ab795",
                "560fe6956d93cb53"
            ]
        ]
    },
    {
        "id": "c8f6c212fc68f165",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 1540,
        "wires": []
    },
    {
        "id": "560fe6956d93cb53",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b7249babe9ca16cc",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Format message for spawn",
        "func": "let fullCommand = msg.payload.command\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1780,
        "wires": [
            [
                "cc7f04658e10487c"
            ]
        ]
    },
    {
        "id": "bdf43fa3a5a439e7",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2540,
        "y": 1900,
        "wires": [
            [
                "25e5be0676b5f6f8"
            ]
        ]
    },
    {
        "id": "ea6e70d0667d480d",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [
            {
                "p": "enabled",
                "v": "$globalContext('OSUser') ? true : false",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1330,
        "y": 1640,
        "wires": [
            [
                "4d39ba490ae7a81f"
            ]
        ]
    },
    {
        "id": "86cdf396ce6d4aa0",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2200,
        "y": 1700,
        "wires": [
            [
                "092dfa0718d148d9"
            ]
        ]
    },
    {
        "id": "dd42e2b99a2a7645",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset index",
        "tooltip": "",
        "color": "",
        "bgcolor": "#532c2c",
        "className": "",
        "icon": "fa-solid fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1590,
        "y": 2040,
        "wires": [
            [
                "18ecfed882d9cab8"
            ]
        ]
    },
    {
        "id": "18ecfed882d9cab8",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1820,
        "y": 2040,
        "wires": [
            [
                "79291a7a1150f807",
                "1fbd8cc10ee44cd0",
                "961702918836aa4d",
                "a6d16b412273335c"
            ]
        ]
    },
    {
        "id": "79291a7a1150f807",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 2040,
        "wires": [
            [
                "96d1beb6501d4661"
            ]
        ]
    },
    {
        "id": "1fbd8cc10ee44cd0",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 2080,
        "wires": [
            [
                "eeb33e9c9894d157"
            ]
        ]
    },
    {
        "id": "961702918836aa4d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "commands[0]",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 2120,
        "wires": [
            [
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "b2b6c35ccfe6517f",
        "type": "json",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1550,
        "y": 1500,
        "wires": [
            [
                "7df4342477554fec"
            ]
        ]
    },
    {
        "id": "3ba29ad018e06586",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "$count($flowContext('commands'))",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1910,
        "y": 1500,
        "wires": [
            [
                "b8028a182f6e3883"
            ],
            []
        ]
    },
    {
        "id": "b8028a182f6e3883",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$count($flowContext('commands')) = 1 & $flowContext('index') = 0 ? 1 : 0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2080,
        "y": 1500,
        "wires": [
            [
                "df6c15d9807db302"
            ]
        ]
    },
    {
        "id": "b4fc87ff7c293b7a",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3360,
        "y": 1560,
        "wires": []
    },
    {
        "id": "041efdc800181680",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3210,
        "y": 1660,
        "wires": [
            [
                "564ff8ef50de58b1",
                "b4fc87ff7c293b7a"
            ],
            [
                "285ddcd6faf866c9"
            ]
        ]
    },
    {
        "id": "a49a58dcf5918f7a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2540,
        "y": 1980,
        "wires": [
            [
                "6a9fa0bd8fd2fe78"
            ]
        ]
    },
    {
        "id": "8a4fdf696c797978",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3060,
        "y": 1660,
        "wires": [
            [
                "041efdc800181680"
            ]
        ]
    },
    {
        "id": "15f4a37073c29cdc",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1330,
        "y": 1400,
        "wires": [
            [
                "7a3554e3063ac472",
                "11735e05573fb370"
            ]
        ]
    },
    {
        "id": "7a3554e3063ac472",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Set flow variable",
        "rules": [
            {
                "t": "set",
                "p": "commands",
                "pt": "flow",
                "to": "$flowContext('commands') ? $flowContext('commands') : []",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 1440,
        "wires": [
            [
                "b2b6c35ccfe6517f"
            ]
        ]
    },
    {
        "id": "fd4dd9381332bd43",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('index') ? $flowContext('commands')[$flowContext('index')] : $flowContext('commands')[0]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2000,
        "y": 1440,
        "wires": [
            [
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "990a856009b4df1b",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear list",
        "tooltip": "",
        "color": "",
        "bgcolor": "#532c2c",
        "className": "",
        "icon": "fa-solid fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1600,
        "y": 2240,
        "wires": [
            [
                "7489632c2a204942"
            ]
        ]
    },
    {
        "id": "7489632c2a204942",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commands",
                "pt": "flow",
                "to": "[]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1780,
        "y": 2240,
        "wires": [
            [
                "6ac8777966c061e5",
                "7df4342477554fec",
                "18ecfed882d9cab8"
            ]
        ]
    },
    {
        "id": "6ac8777966c061e5",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 2240,
        "wires": [
            [
                "a046801adbd525d4"
            ]
        ]
    },
    {
        "id": "55cc69056770aa9f",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "running",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1790,
        "y": 1920,
        "wires": [
            [
                "e6cfcb3d10177c46",
                "8b3802d31611155a"
            ],
            [
                "e6cfcb3d10177c46",
                "1fc0dce79a6feefe"
            ]
        ]
    },
    {
        "id": "a9bf38fc141961ae",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2900,
        "y": 1900,
        "wires": [
            [
                "4d39ba490ae7a81f",
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "73cf18f32e5abc7b",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1310,
        "y": 1880,
        "wires": [
            [
                "b88faf03b44d1c0a"
            ]
        ]
    },
    {
        "id": "055a8ac1dad23671",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1310,
        "y": 2200,
        "wires": [
            [
                "7b3dca1a87b0dc5e"
            ]
        ]
    },
    {
        "id": "7b3dca1a87b0dc5e",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('commands') ? 1 : 0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1400,
        "y": 2240,
        "wires": [
            [
                "990a856009b4df1b"
            ]
        ]
    },
    {
        "id": "b88faf03b44d1c0a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$count($flowContext('commands')) = 1 or $flowContext('index') = 0  ? 0 : 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 1920,
        "wires": [
            [
                "7de319477688b8ba"
            ]
        ]
    },
    {
        "id": "25e5be0676b5f6f8",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2720,
        "y": 1900,
        "wires": [
            [
                "a9bf38fc141961ae"
            ]
        ]
    },
    {
        "id": "cbeb3dca73005cb3",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "DO NOT EXIT COMMAND AT THIS POINT YOU HAVE TO DO IT IN THE DASHBORD",
        "info": "That gonna break fonctionnality to add commands at the ed of the liste",
        "x": 2760,
        "y": 1860,
        "wires": []
    },
    {
        "id": "d67d684ecee6c676",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Index +1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1580,
        "y": 2360,
        "wires": [
            [
                "6feb6980b1214cbf"
            ]
        ]
    },
    {
        "id": "2c90c003888ef3a1",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Index -1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1580,
        "y": 2420,
        "wires": [
            [
                "b24f311005810a61"
            ]
        ]
    },
    {
        "id": "6feb6980b1214cbf",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext('index') +1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1780,
        "y": 2360,
        "wires": [
            [
                "03c239aeca73f949",
                "3abd54eb14b681f8"
            ]
        ]
    },
    {
        "id": "b24f311005810a61",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext('index') - 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1780,
        "y": 2420,
        "wires": [
            [
                "03c239aeca73f949",
                "3abd54eb14b681f8"
            ]
        ]
    },
    {
        "id": "03c239aeca73f949",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('commands')[$flowContext('index')] ? $flowContext('commands')[$flowContext('index')] : \" \" ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2040,
        "y": 2360,
        "wires": [
            [
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "3abd54eb14b681f8",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('index') > 0 ? 1 : 0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2040,
        "y": 2420,
        "wires": [
            [
                "78a24a7adeabe9c3",
                "06b1faf353de60fa"
            ]
        ]
    },
    {
        "id": "78a24a7adeabe9c3",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('index') > 0 ? 0 : 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2240,
        "y": 2440,
        "wires": [
            [
                "d93510c6fbb67516"
            ]
        ]
    },
    {
        "id": "60ac4d280c89f4de",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('index')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 2100,
        "wires": [
            [
                "dd42e2b99a2a7645"
            ]
        ]
    },
    {
        "id": "9a3d1961c9c303cd",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to Start list button",
        "links": [
            "a046801adbd525d4",
            "0675a67dbf5f226d",
            "eeb33e9c9894d157",
            "d0a82e3544f7a8b0",
            "d93510c6fbb67516",
            "4465fa74532be31f",
            "7362f4e09732f0d8"
        ],
        "x": 1365,
        "y": 1680,
        "wires": [
            [
                "4d39ba490ae7a81f"
            ]
        ]
    },
    {
        "id": "bb05228eade21d1f",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to Continue button",
        "links": [
            "a046801adbd525d4",
            "0675a67dbf5f226d",
            "6a9fa0bd8fd2fe78",
            "df6c15d9807db302",
            "96d1beb6501d4661",
            "049914dc3aa6e18a",
            "092dfa0718d148d9",
            "06b1faf353de60fa",
            "4465fa74532be31f"
        ],
        "x": 1475,
        "y": 1880,
        "wires": [
            [
                "7de319477688b8ba"
            ]
        ]
    },
    {
        "id": "4ad3e45a119c1ab8",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to Reset index button",
        "links": [
            "a046801adbd525d4",
            "06b1faf353de60fa"
        ],
        "x": 1465,
        "y": 2020,
        "wires": [
            [
                "dd42e2b99a2a7645"
            ]
        ]
    },
    {
        "id": "06b1faf353de60fa",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Index +1 and Index -1 button",
        "mode": "link",
        "links": [
            "4ad3e45a119c1ab8",
            "bb05228eade21d1f"
        ],
        "x": 2155,
        "y": 2380,
        "wires": []
    },
    {
        "id": "d93510c6fbb67516",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Index +1 and Index -1 button != 0",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd"
        ],
        "x": 2305,
        "y": 2360,
        "wires": []
    },
    {
        "id": "a48667c232bc72ea",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to text command input IN LIST",
        "links": [],
        "x": 2705,
        "y": 1620,
        "wires": [
            [
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "1fc0dce79a6feefe",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Continue button",
        "mode": "link",
        "links": [
            "74d28e415cac5e4b"
        ],
        "x": 1945,
        "y": 1960,
        "wires": []
    },
    {
        "id": "6a9fa0bd8fd2fe78",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Continue button end of list",
        "mode": "link",
        "links": [
            "bb05228eade21d1f"
        ],
        "x": 2685,
        "y": 1980,
        "wires": []
    },
    {
        "id": "df6c15d9807db302",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Commands text",
        "mode": "link",
        "links": [
            "bb05228eade21d1f"
        ],
        "x": 2195,
        "y": 1500,
        "wires": []
    },
    {
        "id": "96d1beb6501d4661",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Reset index button diseable",
        "mode": "link",
        "links": [
            "bb05228eade21d1f",
            "f6930578ff860b22"
        ],
        "x": 2155,
        "y": 2020,
        "wires": []
    },
    {
        "id": "eeb33e9c9894d157",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Reset index button enable",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd"
        ],
        "x": 2155,
        "y": 2060,
        "wires": []
    },
    {
        "id": "ca1a3b161424e5e9",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to commands",
        "links": [
            "2e5405bc8896e802",
            "40f7e1e7c55cd034",
            "67d3b5ce22f3522d",
            "73013c23ef540790",
            "c4d0127ebb81b796",
            "fb2f5a5457cc1c7b",
            "5401f83cc962f7c5",
            "8de50771ed9d3a9b",
            "e38177f099bbd16e",
            "554e2cdad38c152a",
            "eea0f3866282dea4",
            "d348509c533ac2a8",
            "43a79bd58eabb2a7",
            "8a6e36bdadab66b9"
        ],
        "x": 1355,
        "y": 1520,
        "wires": [
            [
                "b2b6c35ccfe6517f"
            ]
        ]
    },
    {
        "id": "04cf2cb39f05fbf5",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Format message for spawn",
        "func": "let fullCommand = flow.get(\"commands\")[0];\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1680,
        "wires": [
            [
                "0bd48ea4562be240"
            ]
        ]
    },
    {
        "id": "0bd48ea4562be240",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Start List button",
        "mode": "link",
        "links": [
            "74d28e415cac5e4b"
        ],
        "x": 1975,
        "y": 1680,
        "wires": []
    },
    {
        "id": "092dfa0718d148d9",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Start List button if list >1",
        "mode": "link",
        "links": [
            "bb05228eade21d1f"
        ],
        "x": 2315,
        "y": 1700,
        "wires": []
    },
    {
        "id": "2e5405bc8896e802",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Clear list button",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 1955,
        "y": 2220,
        "wires": []
    },
    {
        "id": "69abf9c7573503c3",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1310,
        "y": 2060,
        "wires": [
            [
                "60ac4d280c89f4de"
            ]
        ]
    },
    {
        "id": "a6d16b412273335c",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2010,
        "y": 2000,
        "wires": [
            [
                "07b4fddee5d12ac2"
            ]
        ]
    },
    {
        "id": "ad653b64c5bc3d1c",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 97",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 1420,
        "wires": []
    },
    {
        "id": "372c7037c1474f67",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 760,
        "wires": []
    },
    {
        "id": "9478cafaace3eda1",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 880,
        "wires": [
            [
                "668842fefb1ad86b"
            ],
            [
                "6b54aac46cb4c9b3"
            ]
        ]
    },
    {
        "id": "5e8044892e24ec72",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 920,
        "wires": []
    },
    {
        "id": "96f4d0b1004067bd",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.command & (payload.args ? ' ' & payload.args :  '')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1660,
        "y": 820,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "5c8e04ee1e796b6d",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "index",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "$count($flowContext('commands'))",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 820,
        "wires": [
            [
                "09f1ac7ac86f2fa8"
            ],
            []
        ]
    },
    {
        "id": "09f1ac7ac86f2fa8",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3120,
        "y": 820,
        "wires": [
            [
                "049914dc3aa6e18a"
            ]
        ]
    },
    {
        "id": "dc269403be70248b",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 440,
        "wires": [
            [
                "40fcc77c45bef21d"
            ]
        ]
    },
    {
        "id": "d7cefaf9832ce681",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Diseable on deploy",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 350,
        "y": 880,
        "wires": [
            [
                "dcbb085ee2ecca8b"
            ]
        ]
    },
    {
        "id": "2d81644308115d7d",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "child process exited with",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2970,
        "y": 680,
        "wires": [
            [
                "447f88e0a835b97a"
            ],
            [
                "16bce161060dd6ed"
            ]
        ]
    },
    {
        "id": "127cf7d29cea1234",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Format message for spawn",
        "func": "let fullCommand = msg.payload\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 760,
        "wires": [
            [
                "628dfb2257610e39"
            ]
        ]
    },
    {
        "id": "668842fefb1ad86b",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 860,
        "wires": [
            [
                "3d8c166dafde23ec"
            ],
            [
                "127cf7d29cea1234"
            ]
        ]
    },
    {
        "id": "c13e09dff09adfbd",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "daemonStatus",
                "pt": "flow",
                "to": "status.text",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 1120,
        "wires": [
            [
                "7d681acadaecfb5f",
                "f8cc71cc05ed9b0c"
            ]
        ]
    },
    {
        "id": "5a947aacab2c4eba",
        "type": "status",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "daemon status",
        "scope": [
            "8b3802d31611155a"
        ],
        "x": 1220,
        "y": 1160,
        "wires": [
            [
                "c13e09dff09adfbd"
            ]
        ]
    },
    {
        "id": "e481703bc59b4c72",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 1120,
        "wires": []
    },
    {
        "id": "9c8aca4bedc48d5e",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1860,
        "y": 1140,
        "wires": [
            [
                "e481703bc59b4c72",
                "d0a82e3544f7a8b0"
            ]
        ]
    },
    {
        "id": "7d681acadaecfb5f",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "running",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1550,
        "y": 1160,
        "wires": [
            [
                "1590d913477ecb52",
                "dff8087ee587c923"
            ],
            [
                "3554dd2e300a186d"
            ]
        ]
    },
    {
        "id": "16bce161060dd6ed",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3140,
        "y": 700,
        "wires": []
    },
    {
        "id": "3554dd2e300a186d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1720,
        "y": 1180,
        "wires": [
            [
                "6acb2b994b6e860f"
            ]
        ]
    },
    {
        "id": "1590d913477ecb52",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1720,
        "y": 1100,
        "wires": [
            [
                "fbb4165b4fadc15a"
            ]
        ]
    },
    {
        "id": "6b54aac46cb4c9b3",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 900,
        "wires": [
            [
                "96f4d0b1004067bd"
            ],
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "dff8087ee587c923",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "index",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1690,
        "y": 1140,
        "wires": [
            [
                "9c8aca4bedc48d5e"
            ]
        ]
    },
    {
        "id": "265694c368031b88",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "index",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2830,
        "y": 820,
        "wires": [
            [
                "5c8e04ee1e796b6d"
            ]
        ]
    },
    {
        "id": "3b9751a158948df4",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2860,
        "y": 760,
        "wires": [
            [
                "733d567b31de5df5",
                "4744804d51c8767e"
            ]
        ]
    },
    {
        "id": "1955d97621c6194f",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "group": "6e16baac817e17b4",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Record JSON",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1320,
        "y": 2560,
        "wires": [
            [
                "8cb281e27cb12913"
            ]
        ]
    },
    {
        "id": "fba7ea4f0c525b8f",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 2700,
        "wires": []
    },
    {
        "id": "76b45b809532e499",
        "type": "file",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2920,
        "y": 2700,
        "wires": [
            [
                "126bdc8d1fe884f0",
                "bb973f9e1bbddecc"
            ]
        ]
    },
    {
        "id": "e9699e2f6a049fe7",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "group": "6e16baac817e17b4",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Record as script",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1320,
        "y": 2600,
        "wires": [
            [
                "5ab7478a90317b26"
            ]
        ]
    },
    {
        "id": "e0c099377c2c48d3",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "label": "Filename without extension",
        "tooltip": "absloute or start from $HOME",
        "group": "6e16baac817e17b4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1480,
        "y": 2720,
        "wires": [
            [
                "b73225bfdbae241a"
            ]
        ]
    },
    {
        "id": "0dd47cebafd78a73",
        "type": "ui_toast",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2970,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "b73225bfdbae241a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1720,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "9fb37ef2271445f3",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Error: ENOENT: no such file or directory",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2250,
        "y": 2660,
        "wires": [
            [
                "abb24d721e50e418",
                "f27df0d26aedf15c"
            ],
            [
                "0dd47cebafd78a73"
            ]
        ]
    },
    {
        "id": "a47933f23ee978d7",
        "type": "catch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "scope": [
            "aaea082df6e0d28e"
        ],
        "uncaught": false,
        "x": 2090,
        "y": 2700,
        "wires": [
            [
                "fba7ea4f0c525b8f",
                "c295c8cbfb5211dc"
            ]
        ]
    },
    {
        "id": "aaea082df6e0d28e",
        "type": "file in",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2000,
        "y": 2560,
        "wires": [
            [
                "081925cde061cad5",
                "b6de463218f1e479"
            ]
        ]
    },
    {
        "id": "081925cde061cad5",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 2600,
        "wires": []
    },
    {
        "id": "d6f838746286e467",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$globalContext('projectDir') & '/' & $flowContext('filename') & extension",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1840,
        "y": 2560,
        "wires": [
            [
                "aaea082df6e0d28e"
            ]
        ]
    },
    {
        "id": "c295c8cbfb5211dc",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2100,
        "y": 2660,
        "wires": [
            [
                "9fb37ef2271445f3"
            ]
        ]
    },
    {
        "id": "126bdc8d1fe884f0",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 2740,
        "wires": []
    },
    {
        "id": "b6de463218f1e479",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File already exit. Content:' & payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2280,
        "y": 2580,
        "wires": [
            [
                "0dd47cebafd78a73"
            ]
        ]
    },
    {
        "id": "2fe10cf77563c81c",
        "type": "catch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "scope": [
            "76b45b809532e499"
        ],
        "uncaught": false,
        "x": 2690,
        "y": 2780,
        "wires": [
            [
                "0dd47cebafd78a73",
                "c831be1d8aab6ac2"
            ]
        ]
    },
    {
        "id": "abb24d721e50e418",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 59",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 2720,
        "wires": []
    },
    {
        "id": "c831be1d8aab6ac2",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 2780,
        "wires": []
    },
    {
        "id": "5ab7478a90317b26",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "extension",
                "pt": "msg",
                "to": ".sh",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 2600,
        "wires": [
            [
                "52b9b8c246361095"
            ]
        ]
    },
    {
        "id": "f27df0d26aedf15c",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "property": "extension",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": ".sh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": ".json",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2470,
        "y": 2680,
        "wires": [
            [
                "497be50704f809a8"
            ],
            [
                "6f1bc1a7b9c9f095"
            ]
        ]
    },
    {
        "id": "6f1bc1a7b9c9f095",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$flowContext('filename')&'.json'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "commands",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2680,
        "y": 2720,
        "wires": [
            [
                "76b45b809532e499"
            ]
        ]
    },
    {
        "id": "497be50704f809a8",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "function 8",
        "func": "if (flow.get('filename')[0] !== '/'){\n    msg.filename = global.get(\"projectDir\")+'/scripts/'+flow.get('filename')+'.sh'\n}else{\n    msg.filename = flow.get(\"filename\")\n}\nlet commands = flow.get(\"commands\");\nlet script = \"\"\nfor (let index = 0; index < commands.length; index++) {\n    const element = commands[index];\n    if(index === commands.length - 1){\n        script += element\n    }else{\n        script += element+ '\\n'\n    }\n}\nmsg.payload = script\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 2660,
        "wires": [
            [
                "76b45b809532e499"
            ]
        ]
    },
    {
        "id": "8cb281e27cb12913",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "extension",
                "pt": "msg",
                "to": ".json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 2560,
        "wires": [
            [
                "52b9b8c246361095"
            ]
        ]
    },
    {
        "id": "83dcd2bef897c63e",
        "type": "exec",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 3270,
        "y": 2700,
        "wires": [
            [
                "2dae94e0a5a67ff8",
                "833281452e6d2faa"
            ],
            [
                "2dae94e0a5a67ff8",
                "833281452e6d2faa"
            ],
            [
                "2dae94e0a5a67ff8",
                "833281452e6d2faa"
            ]
        ]
    },
    {
        "id": "bb973f9e1bbddecc",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "property": "extension",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": ".sh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": ".json",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3050,
        "y": 2640,
        "wires": [
            [
                "e1b464488f392996"
            ],
            []
        ]
    },
    {
        "id": "e1b464488f392996",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'chmod +x ' & filename",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3200,
        "y": 2640,
        "wires": [
            [
                "83dcd2bef897c63e"
            ]
        ]
    },
    {
        "id": "2dae94e0a5a67ff8",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3420,
        "y": 2700,
        "wires": []
    },
    {
        "id": "52b9b8c246361095",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1670,
        "y": 2580,
        "wires": [
            [
                "052ce13702c43cdd"
            ],
            [
                "052ce13702c43cdd"
            ],
            [
                "d6f838746286e467"
            ]
        ]
    },
    {
        "id": "07fdd76ed660d4e3",
        "type": "ui_toast",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1910,
        "y": 2660,
        "wires": [
            []
        ]
    },
    {
        "id": "052ce13702c43cdd",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please provide a filename",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1720,
        "y": 2660,
        "wires": [
            [
                "07fdd76ed660d4e3"
            ]
        ]
    },
    {
        "id": "833281452e6d2faa",
        "type": "ui_toast",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 3410,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "447f88e0a835b97a",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Status of child processus",
        "func": "if (msg.payload.includes('child process exited with')){\n    node.status({ fill: \"red\", shape: \"ring\", text: \"child process exited with\" });\n    flow.set(\"childProcessStatus\", \"stopped\");\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3190,
        "y": 660,
        "wires": [
            [
                "acf896f91e62ebb9"
            ]
        ]
    },
    {
        "id": "acf896f91e62ebb9",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3380,
        "y": 660,
        "wires": []
    },
    {
        "id": "be0d1711cdc49ac1",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1520,
        "wires": []
    },
    {
        "id": "11735e05573fb370",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1360,
        "wires": [
            [
                "a3348e49115feabc"
            ]
        ]
    },
    {
        "id": "aa17940305d40738",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "child process exited with",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 940,
        "wires": [
            [
                "07b4fddee5d12ac2"
            ],
            []
        ]
    },
    {
        "id": "d9210aa9864f709a",
        "type": "status",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "scope": [
            "447f88e0a835b97a"
        ],
        "x": 1960,
        "y": 940,
        "wires": [
            [
                "aa17940305d40738"
            ]
        ]
    },
    {
        "id": "9c223c328c2c1229",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "label": "Hidden Command",
        "tooltip": "",
        "group": "297b1964920fbcef",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "password",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 500,
        "wires": [
            [
                "7f2f743ebaeb222d"
            ]
        ]
    },
    {
        "id": "cac216a938770ad4",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "label": "Command out of the list",
        "tooltip": "",
        "group": "297b1964920fbcef",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 730,
        "y": 440,
        "wires": [
            [
                "e34bac8166d30631"
            ]
        ]
    },
    {
        "id": "40fcc77c45bef21d",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Run command out of the list",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "commandOutList",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 380,
        "y": 660,
        "wires": [
            [
                "b710b47357afff69",
                "d7280d184dc694b7"
            ]
        ]
    },
    {
        "id": "e34bac8166d30631",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commandOutList",
                "pt": "flow",
                "to": "payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "dc269403be70248b",
                "f214607e192146ac"
            ]
        ]
    },
    {
        "id": "4e85502b0cdbb08b",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            },
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 910,
        "y": 680,
        "wires": [
            [
                "9d9d7260b0dc6059"
            ],
            [
                "9d9d7260b0dc6059"
            ],
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "9d9d7260b0dc6059",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Format message for spawn",
        "func": "let fullCommand = msg.payload\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 620,
        "wires": [
            [
                "3d8c166dafde23ec",
                "e0b42ba5f51af29d"
            ]
        ]
    },
    {
        "id": "e0b42ba5f51af29d",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 560,
        "wires": []
    },
    {
        "id": "707a42c2835a3c14",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Because no JSONATA expression on button",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[$count(payload)-1]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 920,
        "wires": [
            [
                "9478cafaace3eda1",
                "5e8044892e24ec72",
                "f4150bd9112e79d5"
            ]
        ]
    },
    {
        "id": "f214607e192146ac",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 400,
        "wires": []
    },
    {
        "id": "b710b47357afff69",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commandsOutList",
                "pt": "flow",
                "to": "$append($flowContext('commandsOutList'), payload )",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "4e85502b0cdbb08b",
                "b3a2db7da76826cc",
                "a0aab47871bf4d0e"
            ]
        ]
    },
    {
        "id": "2e0f75ce20fba878",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Repeat all",
        "tooltip": "",
        "color": "",
        "bgcolor": "#d1b478",
        "className": "",
        "icon": "fa-regular fa-rotate-right",
        "payload": "commandsOutList",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 1360,
        "wires": [
            [
                "cfe3b14e2bddbf6a",
                "7c99e16850770331"
            ]
        ]
    },
    {
        "id": "11024c778cd30379",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Merge in list at Index",
        "tooltip": "All hidden commands are NOT SAVED",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-regular fa-rotate-right",
        "payload": "commandsOutList",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 1100,
        "wires": [
            [
                "9e39d1b269bca6f1",
                "be0d1711cdc49ac1"
            ]
        ]
    },
    {
        "id": "e709214485f5f8dd",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Diseable on deploy",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 1280,
        "wires": [
            [
                "81e980f5c7b5363f"
            ]
        ]
    },
    {
        "id": "6a25e18d8a8a5346",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 480,
        "wires": [
            [
                "e84e8c0191c253f9"
            ]
        ]
    },
    {
        "id": "e84e8c0191c253f9",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Set flow variable",
        "rules": [
            {
                "t": "set",
                "p": "commandOutList",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "commandsOutList",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "daemonStatus",
                "pt": "flow",
                "to": "stopped",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 540,
        "wires": [
            [
                "5dd43c642137b6b6"
            ]
        ]
    },
    {
        "id": "5dd43c642137b6b6",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 600,
        "wires": [
            [
                "40fcc77c45bef21d"
            ]
        ]
    },
    {
        "id": "e4c1887aa955a2ec",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "e2c596f862f807c1"
            ]
        ]
    },
    {
        "id": "e2c596f862f807c1",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1060,
        "wires": [
            [
                "11024c778cd30379"
            ]
        ]
    },
    {
        "id": "7f2f743ebaeb222d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 500,
        "wires": [
            [
                "705b4607cb4e54cf"
            ]
        ]
    },
    {
        "id": "6b4a9b0521c14524",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1300,
        "wires": []
    },
    {
        "id": "d7280d184dc694b7",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 720,
        "wires": [
            [
                "dcbb085ee2ecca8b",
                "11024c778cd30379"
            ]
        ]
    },
    {
        "id": "b3a2db7da76826cc",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "$count($flowContext('commandsOutList'))",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "acb41c72b270cbac"
            ]
        ]
    },
    {
        "id": "acb41c72b270cbac",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "2e0f75ce20fba878"
            ]
        ]
    },
    {
        "id": "a0aab47871bf4d0e",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 620,
        "wires": []
    },
    {
        "id": "0a8c19f4df98784d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1020,
        "wires": [
            [
                "2e0f75ce20fba878"
            ]
        ]
    },
    {
        "id": "41b1f0df6391aabf",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "function 10",
        "func": "if(msg.payload !== \"Cancel\"){\n    let commands = flow.get(\"commands\");\n    let commandsOutList = flow.get(\"commandsOutList\");\n    let addAtIndex = msg.payload\n    commands.splice(addAtIndex, 0, ...commandsOutList)\n    flow.set(\"commands\", commands);\n    flow.set(\"index\", flow.get(\"index\")+commandsOutList.length);\n    msg.payload = commands\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1160,
        "wires": [
            [
                "6b4a9b0521c14524",
                "b2b6c35ccfe6517f"
            ]
        ]
    },
    {
        "id": "f4150bd9112e79d5",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commandsOutList",
                "pt": "flow",
                "to": "$append($flowContext('commandsOutList'), payload )",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "9e39d1b269bca6f1",
        "type": "ui_toast",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Send index",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 730,
        "y": 1100,
        "wires": [
            [
                "41b1f0df6391aabf",
                "5daf26229a34ec6d"
            ]
        ]
    },
    {
        "id": "5daf26229a34ec6d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload != 'Cancel' ? true : false",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 1100,
        "wires": [
            [
                "0675a67dbf5f226d"
            ]
        ]
    },
    {
        "id": "af47437bc74e05a2",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 89",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1440,
        "wires": []
    },
    {
        "id": "a046801adbd525d4",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From Clear list button",
        "mode": "link",
        "links": [
            "4ad3e45a119c1ab8",
            "9a3d1961c9c303cd",
            "bb05228eade21d1f"
        ],
        "x": 2265,
        "y": 2020,
        "wires": []
    },
    {
        "id": "0675a67dbf5f226d",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From Merge at index button",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd",
            "bb05228eade21d1f"
        ],
        "x": 1085,
        "y": 1100,
        "wires": []
    },
    {
        "id": "74d28e415cac5e4b",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Got to Child Processus",
        "links": [
            "0bd48ea4562be240",
            "1fc0dce79a6feefe"
        ],
        "x": 1735,
        "y": 600,
        "wires": [
            [
                "3d8c166dafde23ec"
            ]
        ]
    },
    {
        "id": "049914dc3aa6e18a",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon response",
        "mode": "link",
        "links": [
            "bb05228eade21d1f"
        ],
        "x": 3265,
        "y": 820,
        "wires": []
    },
    {
        "id": "6acb2b994b6e860f",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon-status",
        "mode": "link",
        "links": [
            "f6930578ff860b22"
        ],
        "x": 1855,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f6930578ff860b22",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to Exit command button",
        "links": [
            "6acb2b994b6e860f",
            "fbb4165b4fadc15a",
            "96d1beb6501d4661"
        ],
        "x": 1955,
        "y": 900,
        "wires": [
            [
                "0e66b4ca4d045ec1"
            ]
        ]
    },
    {
        "id": "d0a82e3544f7a8b0",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon-status if running and index not null",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd"
        ],
        "x": 1945,
        "y": 1180,
        "wires": []
    },
    {
        "id": "fbb4165b4fadc15a",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon-status if running and index not null enable=true",
        "mode": "link",
        "links": [
            "f6930578ff860b22"
        ],
        "x": 1865,
        "y": 1100,
        "wires": []
    },
    {
        "id": "a23460e2039e2240",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2090,
        "y": 820,
        "wires": [
            [
                "f7e50795bbbe828e"
            ]
        ]
    },
    {
        "id": "f7e50795bbbe828e",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('daemonStatus') = 'running' ? 1 : 0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2080,
        "y": 860,
        "wires": [
            [
                "0e66b4ca4d045ec1"
            ]
        ]
    },
    {
        "id": "f8cc71cc05ed9b0c",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon-status for automated lsit",
        "mode": "link",
        "links": [
            "d4f78a45877d861b"
        ],
        "x": 1575,
        "y": 1060,
        "wires": []
    },
    {
        "id": "0a9601a0b978d84a",
        "type": "rbe",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "_msgid",
        "topi": "topic",
        "x": 370,
        "y": 1620,
        "wires": [
            [
                "b3b58ad074a2b566"
            ]
        ]
    },
    {
        "id": "c3e5157c333c3465",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpCommandsOutList",
                "pt": "flow",
                "to": "commandsOutList",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "tmpCommandsOutList[0]",
                "tot": "flow"
            },
            {
                "t": "delete",
                "p": "commandsOutList",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1460,
        "wires": [
            [
                "baa2cf368634c41f"
            ]
        ]
    },
    {
        "id": "66bf2097b327336e",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "$flowContext(\"indexCommandOutList\")",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "$count($flowContext(\"tmpCommandsOutList\"))",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 1620,
        "wires": [
            [
                "af47437bc74e05a2",
                "ea2b5f79579f1d4a",
                "9f9aa054ed5b3070"
            ],
            [
                "8a3271e120fc0949",
                "dcdd569d049123a4"
            ]
        ]
    },
    {
        "id": "cfe3b14e2bddbf6a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "autoLoad",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 1420,
        "wires": [
            [
                "c3e5157c333c3465"
            ]
        ]
    },
    {
        "id": "ea2b5f79579f1d4a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "autoLoad",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "indexCommandOutList",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "tmpCommandsOutList",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1560,
        "wires": [
            [
                "dcdd569d049123a4"
            ]
        ]
    },
    {
        "id": "81e980f5c7b5363f",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "autoLoad",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "tmpCommandsOutList",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1320,
        "wires": [
            [
                "2e0f75ce20fba878"
            ]
        ]
    },
    {
        "id": "7c99e16850770331",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From repeat all button",
        "mode": "link",
        "links": [
            "816b0666cf836929"
        ],
        "x": 495,
        "y": 1380,
        "wires": []
    },
    {
        "id": "816b0666cf836929",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to kill daemon-node",
        "links": [
            "7c99e16850770331"
        ],
        "x": 2095,
        "y": 1000,
        "wires": [
            [
                "07b4fddee5d12ac2"
            ]
        ]
    },
    {
        "id": "8a3271e120fc0949",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 90",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1680,
        "wires": []
    },
    {
        "id": "c66ed3dda5290e99",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 91",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1720,
        "wires": []
    },
    {
        "id": "c377f1e581915fd5",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 92",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1560,
        "wires": []
    },
    {
        "id": "1ac64cb8c2b56f2d",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 1340,
        "wires": [
            [
                "b710b47357afff69"
            ]
        ]
    },
    {
        "id": "74dc2426dfad908d",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "To handle autoLoad no status possible beacause of kill process",
        "property": "autoLoad",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3030,
        "y": 600,
        "wires": [
            [
                "f081cb68bd6a63b6"
            ]
        ]
    },
    {
        "id": "b0e63695bcd5c315",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From daemon and child",
        "mode": "link",
        "links": [
            "cc5ad03705d058e4",
            "ff2965f7510c868d"
        ],
        "x": 3515,
        "y": 600,
        "wires": []
    },
    {
        "id": "ff2965f7510c868d",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to autoLoad",
        "links": [
            "b0e63695bcd5c315"
        ],
        "x": 265,
        "y": 1620,
        "wires": [
            [
                "c377f1e581915fd5",
                "0a9601a0b978d84a"
            ]
        ]
    },
    {
        "id": "b3b58ad074a2b566",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "indexCommandOutList",
                "pt": "flow",
                "to": "$flowContext('indexCommandOutList') ? $flowContext('indexCommandOutList')+1 : 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 1660,
        "wires": [
            [
                "c66ed3dda5290e99",
                "66bf2097b327336e"
            ]
        ]
    },
    {
        "id": "dcdd569d049123a4",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('tmpCommandsOutList')[$flowContext('indexCommandOutList')]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 1600,
        "wires": [
            [
                "baa2cf368634c41f"
            ]
        ]
    },
    {
        "id": "23e2f51aa5001862",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clean temporary list",
        "tooltip": "",
        "color": "",
        "bgcolor": "#532c2c",
        "className": "",
        "icon": "fa-solid fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 380,
        "y": 1800,
        "wires": [
            [
                "9a99865feeda8c41",
                "af71c28ef446236c"
            ]
        ]
    },
    {
        "id": "9a99865feeda8c41",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "tmpCommandsOutList",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "9a24a7fd6de2c5f3",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Diseable on deploy",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 1760,
        "wires": [
            [
                "23e2f51aa5001862"
            ]
        ]
    },
    {
        "id": "af71c28ef446236c",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 1840,
        "wires": [
            [
                "2e0f75ce20fba878",
                "11024c778cd30379",
                "dcbb085ee2ecca8b"
            ]
        ]
    },
    {
        "id": "28f99a18b712b8c7",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 93",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3420,
        "y": 820,
        "wires": []
    },
    {
        "id": "c2e0b987362039af",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 94",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3440,
        "y": 740,
        "wires": []
    },
    {
        "id": "ef08ad9ecb7fca29",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to Reapeat all button to run array of command in payload",
        "links": [
            "27b05f485af9e106",
            "be19391959d36958",
            "ffa58bf3e16ae1ed",
            "f02b7cef527c5636",
            "d8531d8ab46e07bd"
        ],
        "x": 325,
        "y": 1980,
        "wires": [
            [
                "ec3f6ba6983f80ae",
                "1f43d49576bb375f"
            ]
        ]
    },
    {
        "id": "ec3f6ba6983f80ae",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "For external load",
        "rules": [
            {
                "t": "set",
                "p": "commandsOutList",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1940,
        "wires": [
            [
                "cfe3b14e2bddbf6a"
            ]
        ]
    },
    {
        "id": "1f43d49576bb375f",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 95",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 2020,
        "wires": []
    },
    {
        "id": "1961a1e8fed2c784",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 96",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 540,
        "wires": []
    },
    {
        "id": "1b86a3e86f103adf",
        "type": "http in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "url": "/terminal",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 2100,
        "wires": [
            [
                "3232e7606df8c0a1"
            ]
        ]
    },
    {
        "id": "8f21bd4ae9af0a4e",
        "type": "http response",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3320,
        "y": 960,
        "wires": []
    },
    {
        "id": "4cc671b399e9511e",
        "type": "rbe",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1010,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "19870d67117f182f",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 990,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "4744804d51c8767e",
        "type": "join",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3490,
        "y": 900,
        "wires": [
            [
                "8f21bd4ae9af0a4e",
                "2490e2898b93d57a"
            ]
        ]
    },
    {
        "id": "2490e2898b93d57a",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 110",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 1180,
        "wires": []
    },
    {
        "id": "9f9aa054ed5b3070",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "res",
                "pt": "msg",
                "to": "currentWebResp",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3240,
        "y": 900,
        "wires": [
            [
                "bb51e76e19282ad0",
                "4744804d51c8767e"
            ]
        ]
    },
    {
        "id": "bb51e76e19282ad0",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 111",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3590,
        "y": 840,
        "wires": []
    },
    {
        "id": "fbd8b34ce62e5998",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "$flowContext(\"indexCommandOutList\")",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "$count($flowContext(\"tmpCommandsOutList\"))-1",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3270,
        "y": 780,
        "wires": [
            [
                "28f99a18b712b8c7",
                "9f9aa054ed5b3070"
            ],
            []
        ]
    },
    {
        "id": "3232e7606df8c0a1",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "currentWebResp",
                "pt": "flow",
                "to": "res",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2060,
        "wires": [
            [
                "ec3f6ba6983f80ae"
            ]
        ]
    },
    {
        "id": "f081cb68bd6a63b6",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "lastCommand",
                "pt": "msg",
                "to": "$flowContext(\"indexCommandOutList\") ? $flowContext(\"tmpCommandsOutList\")[$flowContext(\"indexCommandOutList\")] : $flowContext(\"tmpCommandsOutList\")[0]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3340,
        "y": 500,
        "wires": [
            [
                "08717e5d7a7b1e2d",
                "0efe17d66efb0d0d"
            ]
        ]
    },
    {
        "id": "08717e5d7a7b1e2d",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 131",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3530,
        "y": 460,
        "wires": []
    },
    {
        "id": "43c0975e7bb96e1a",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to Run command out of the list button",
        "links": [
            "4465fa74532be31f"
        ],
        "x": 205,
        "y": 600,
        "wires": [
            [
                "40fcc77c45bef21d"
            ]
        ]
    },
    {
        "id": "0efe17d66efb0d0d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$substring(payload,0, $length(payload)-1)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3440,
        "y": 560,
        "wires": [
            [
                "b0e63695bcd5c315"
            ]
        ]
    },
    {
        "id": "58adc702736ecdcc",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "TO DO FIRST",
        "info": "Modify in the node below the arguments field to fit to your project path",
        "x": 2610,
        "y": 660,
        "wires": []
    },
    {
        "id": "d851f6856439bb51",
        "type": "ui_template",
        "z": "ebafe26feeec49ee",
        "group": "c321b890973a1573",
        "name": "",
        "order": 1,
        "width": "50",
        "height": "33",
        "format": "\n\n        <title>Babylon Template</title>\n\n        <style>\n            html, body {\n                overflow: hidden;\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }\n\n            #renderCanvas {\n                width: 100%;\n                height: 100%;\n                touch-action: none;\n            }\n        </style>\n\n        <!-- <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n        <script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n        <script src=\"https://code.jquery.com/pep/0.4.3/pep.js\"></script> -->\n\n\n        <div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n\n    <canvas id=\"renderCanvas\" touch-action=\"none\"></canvas> <!-- touch-action=\"none\" for best results from PEP -->\n        </div>\n\n    <script>\n        (function(scope,msg){\n            console.log(scope.$id)\n        //declare function\n        const canvasBabylon = document.getElementById(\"renderCanvas\"); // Get the canvas element\n        const engineBabylon = new BABYLON.Engine(canvasBabylon, true); // Generate the BABYLON 3D engine\n        \n        // Add your code here matching the playground format\n        var createScene = function() {\n            var scene = new BABYLON.Scene(engineBabylon);\n            const camera = new BABYLON.ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 3, new BABYLON.Vector3(0, 0, 0), scene);\n            camera.attachControl(renderCanvas, true);\n            const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n            scene.onPointerObservable.add((pointerInfo) => {      \t\t\n                switch (pointerInfo.type) {\n\t\t\t        //case BABYLON.PointerEventTypes.POINTERDOWN:\n\t\t\t\t    //    if(pointerInfo.pickInfo.hit && pointerInfo.pickInfo.pickedMesh != ground) {\n                    //        pointerDown(pointerInfo.pickInfo.pickedMesh)\n                    //    }\n\t\t\t\t    //    break;\n\t\t\t        //case BABYLON.PointerEventTypes.POINTERUP:\n                    //    pointerUp();\n\t\t\t\t    //    break;\n\t\t\t        //case BABYLON.PointerEventTypes.POINTERMOVE:          \n                    //    pointerMove();\n\t\t\t\t    //    break;\n                }\n            });\n            return scene\n           \n        };\n\n\n        const sceneBabylon = createScene(); //Call the createScene function\n\n        // Register a render loop to repeatedly render the scene\n        engineBabylon.runRenderLoop(function () {\n                sceneBabylon.render();\n        });\n\n        // Watch for browser/canvas resize events\n        window.addEventListener(\"resize\", function () {\n                engineBabylon.resize();\n        });\n        //do some stuff at boot\n        //Part on Message AND on relaod if YOU SET reload last value on refresh on THIS NODE\n        //The $watch is leave because if you dont use ui template node that gonna be an entry on websocket or mqqt for exmple \n            scope.$watch('msg', function(msg) {\n                //if you put someting outise the if below that gonna be run on page reload if reload last value on refresh\n                if (msg) {\n                    \n                }\n                //NO CODE\n            })\n        })(scope);\n        \n    </script>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "0e6e6c7faaf3e6c0"
            ]
        ]
    },
    {
        "id": "9f64324540e4e391",
        "type": "ui_template",
        "z": "ebafe26feeec49ee",
        "group": "297b1964920fbcef",
        "name": "Load local cdn",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<script src=\"/cdn/babylonjs/babylon.js\"></script>\n<script src=\"/cdn/babylonjs/babylonjs.loaders.min.js\"></script>\n<script src=\"/cdn/pepjs/pep.js\"></script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 160,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "b8a8dab813c086ce",
        "type": "inject",
        "z": "ebafe26feeec49ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "24b53e40ae6720ed"
            ]
        ]
    },
    {
        "id": "24b53e40ae6720ed",
        "type": "function",
        "z": "ebafe26feeec49ee",
        "name": "function 14",
        "func": "let cdns = [\n    \"https://cdn.babylonjs.com/babylon.js\",\n    \"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\",\n    \"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\",\n]\nfor(let i=0; i<cdns.length;i++){\n    let filename = cdns[i].substring(cdns[i].lastIndexOf(\"/\")+1);\n    let cdn = {}\n    msg.url = cdns[i]\n    msg.filename = global.get(\"projectDir\")+'/cdn/monaco-editor/'+filename\n    node.send(msg)\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "6abd048f47cee4c3"
            ]
        ]
    },
    {
        "id": "6abd048f47cee4c3",
        "type": "http request",
        "z": "ebafe26feeec49ee",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "bd506e54533e0b3d"
            ]
        ]
    },
    {
        "id": "bd506e54533e0b3d",
        "type": "file",
        "z": "ebafe26feeec49ee",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5471c7b870efb158",
        "type": "comment",
        "z": "ebafe26feeec49ee",
        "name": "Get the cdn",
        "info": "",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "7b8167f4bbde89f0",
        "type": "comment",
        "z": "ebafe26feeec49ee",
        "name": "Load cdn in the header of the app. No choice actually with template node",
        "info": "",
        "x": 340,
        "y": 240,
        "wires": []
    },
    {
        "id": "3fd8241cb6d8416e",
        "type": "comment",
        "z": "ebafe26feeec49ee",
        "name": "Generate the ui view",
        "info": "",
        "x": 170,
        "y": 420,
        "wires": []
    },
    {
        "id": "06c47563e3c18ab2",
        "type": "link in",
        "z": "ebafe26feeec49ee",
        "name": "Go to 3D view",
        "links": [],
        "x": 105,
        "y": 460,
        "wires": [
            [
                "d851f6856439bb51"
            ]
        ]
    },
    {
        "id": "0e6e6c7faaf3e6c0",
        "type": "link out",
        "z": "ebafe26feeec49ee",
        "name": "From the 3D view",
        "mode": "link",
        "links": [],
        "x": 375,
        "y": 460,
        "wires": []
    },
    {
        "id": "564286a72a488cd9",
        "type": "websocket in",
        "z": "b21e8c38dec5d4ca",
        "g": "ea9fd99eb20cf596",
        "name": "",
        "server": "64695929c27c81fa",
        "client": "",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "c4ecf933327ec42c",
                "3dc1d5e0261dedd1"
            ]
        ]
    },
    {
        "id": "679e9cb349dabd5d",
        "type": "websocket out",
        "z": "b21e8c38dec5d4ca",
        "g": "926a3de759a09145",
        "name": "",
        "server": "9445b5d08fba6030",
        "client": "",
        "x": 4550,
        "y": 1020,
        "wires": []
    },
    {
        "id": "6fa2566e69874edd",
        "type": "function",
        "z": "b21e8c38dec5d4ca",
        "g": "926a3de759a09145",
        "name": "Be carreful if you hcange something her, you gonna have to midify the code of the web assistant accordingly",
        "func": "msg.payload= {\"data\":msg.payload, \"text\": msg.textSpeaked, \"content-type\": msg.headers[\"content-type\"]}\nreturn { payload: msg.payload}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4570,
        "y": 1080,
        "wires": [
            [
                "679e9cb349dabd5d"
            ]
        ]
    },
    {
        "id": "14ba0782f846418a",
        "type": "subflow:8555359a6f46144d",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "x": 3900,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "be2c1445918b65d3",
        "type": "subflow:b726d2ccc1e4b848",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "x": 3460,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "4a13ecbed6107f80",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 3530,
        "y": 640,
        "wires": [
            [
                "ce209c8f16145de7"
            ]
        ]
    },
    {
        "id": "cdbda907f4afb19a",
        "type": "subflow:8b17cbb5aaac470d",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "env": [
            {
                "name": "method",
                "value": "post",
                "type": "str"
            }
        ],
        "x": 4020,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "4e4e33f03b0e991f",
        "type": "subflow:330978c5.bafdb8",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "x": 3830,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "7bb5d30afec797ea",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "g": "ea9fd99eb20cf596",
        "name": "",
        "property": "payload.fromAssistant",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 1100,
        "wires": [
            [
                "bf3e86b3ff63402c",
                "0330a96831d6ab57"
            ],
            [
                "edf2e3443b2259f9",
                "faf8ea544dbf3a88"
            ]
        ]
    },
    {
        "id": "c4ecf933327ec42c",
        "type": "json",
        "z": "b21e8c38dec5d4ca",
        "g": "ea9fd99eb20cf596",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 210,
        "y": 1040,
        "wires": [
            [
                "7bb5d30afec797ea"
            ]
        ]
    },
    {
        "id": "75e0fddae13b131b",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "48fc088220fe72bb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 1040,
        "wires": [
            [
                "0a7a7febd1710121"
            ]
        ]
    },
    {
        "id": "f6bf16378606fd8f",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "Launch web assistant on boot and board control on dashboard",
        "info": "",
        "x": 300,
        "y": 460,
        "wires": []
    },
    {
        "id": "fcc67c353efa5285",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "name": "Copy the folder and create the script",
        "info": "",
        "x": 200,
        "y": 40,
        "wires": []
    },
    {
        "id": "f993010858becaec",
        "type": "file in",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "filename": "$flowContext(\"projectDir\")&'/vosk/serve.js'",
        "filenameType": "jsonata",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3bfa9ca0e5b5c408",
        "type": "template",
        "z": "b21e8c38dec5d4ca",
        "name": "server.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "const express = require('express');\nconst path = require('path')\nconst app = express();\nconst PORT = {{port}}\n\napp.use(express.static('public'));\n\napp.listen(PORT, () => console.log(`Server listening on port: ${PORT}`));",
        "output": "str",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "2557ea3cad287fc8"
            ]
        ]
    },
    {
        "id": "ce2be019fa6dfc7a",
        "type": "inject",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "props": [
            {
                "p": "port",
                "v": "3300",
                "vt": "num"
            },
            {
                "p": "destination",
                "v": "vosk4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "0044911c40a29142"
            ]
        ]
    },
    {
        "id": "2557ea3cad287fc8",
        "type": "file",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "filename": "$globalContext(\"projectDir\")&'/vosk/server.js'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 640,
        "y": 120,
        "wires": [
            [
                "1f056fda422c11e4"
            ]
        ]
    },
    {
        "id": "a415271c2d6dfbbe",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "name": "command to copy the vosk folder",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "['cp -r '&$globalContext(\"projectDir\")&'/vosk '&destination]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 120,
        "wires": [
            [
                "511809cae7226bf1",
                "87b58c7ad73fd298"
            ]
        ]
    },
    {
        "id": "511809cae7226bf1",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "name": "debug 145",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 160,
        "wires": []
    },
    {
        "id": "87b58c7ad73fd298",
        "type": "link out",
        "z": "b21e8c38dec5d4ca",
        "name": "From assistant web copy folder and create the script",
        "mode": "link",
        "links": [
            "ef08ad9ecb7fca29"
        ],
        "x": 1515,
        "y": 40,
        "wires": []
    },
    {
        "id": "0044911c40a29142",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "webAssistantPort",
                "pt": "global",
                "to": "$string(port)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "webAssistantPath",
                "pt": "global",
                "to": "destination",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "3bfa9ca0e5b5c408"
            ]
        ]
    },
    {
        "id": "34a357f07e6e22bd",
        "type": "file",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "filename": "$globalContext(\"projectDir\")&'/vosk/webAssistantLauncher.sh'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "a415271c2d6dfbbe"
            ]
        ]
    },
    {
        "id": "1f056fda422c11e4",
        "type": "template",
        "z": "b21e8c38dec5d4ca",
        "name": "webAssistantLauncher.sh",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "cd {{destination}}\nnode server.js\n",
        "output": "str",
        "x": 850,
        "y": 120,
        "wires": [
            [
                "34a357f07e6e22bd"
            ]
        ]
    },
    {
        "id": "e82262cb99a2dbca",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "name": "THINGS TO DO HERE",
        "info": "Go the folder than you set before and run in a terminal\nnpm i",
        "x": 160,
        "y": 180,
        "wires": []
    },
    {
        "id": "71b3d163d21c731a",
        "type": "exec",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1190,
        "y": 580,
        "wires": [
            [
                "5f448d3783031ec4"
            ],
            [
                "5f448d3783031ec4"
            ],
            [
                "5f448d3783031ec4"
            ]
        ]
    },
    {
        "id": "7e88acedd6fd7e9b",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'bash ' & $globalContext(\"webAssistantPath\")&'/webAssistantLauncher.sh'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 580,
        "wires": [
            [
                "71b3d163d21c731a"
            ]
        ]
    },
    {
        "id": "04c2025af58e0acb",
        "type": "status",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "scope": [
            "71b3d163d21c731a"
        ],
        "x": 920,
        "y": 660,
        "wires": [
            [
                "e482216fc457a42f",
                "dc3197fa7a25b6f5"
            ]
        ]
    },
    {
        "id": "ce332a573287547d",
        "type": "ui_button",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "group": "08ec154b16f96b31",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Start",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 550,
        "y": 580,
        "wires": [
            [
                "5b4a66322ad0c4b5"
            ]
        ]
    },
    {
        "id": "01122154f7b49aac",
        "type": "ui_button",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "group": "08ec154b16f96b31",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 530,
        "y": 760,
        "wires": [
            [
                "909872c71831d1b0",
                "f9cb7bbb39d5bcbd",
                "34d284932aa2e51b",
                "5c9d6dcc66e37b80"
            ]
        ]
    },
    {
        "id": "b537a6a2d84128a0",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "debug 147",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 640,
        "wires": []
    },
    {
        "id": "9fb084c1552066a3",
        "type": "exec",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 990,
        "y": 760,
        "wires": [
            [
                "1339310a2853d515"
            ],
            [
                "1339310a2853d515"
            ],
            [
                "1339310a2853d515"
            ]
        ]
    },
    {
        "id": "909872c71831d1b0",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'kill ' & $flowContext(\"webAssistantPid\")",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 760,
        "wires": [
            [
                "9fb084c1552066a3"
            ]
        ]
    },
    {
        "id": "1339310a2853d515",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "debug 148",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 760,
        "wires": []
    },
    {
        "id": "e482216fc457a42f",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "blue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 660,
        "wires": [
            [
                "d5dfe1d380ee1201"
            ],
            [
                "7be6957c67f7b79d"
            ]
        ]
    },
    {
        "id": "d5dfe1d380ee1201",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "webAssistantPid",
                "pt": "flow",
                "to": "$substring(status.text, 4)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 640,
        "wires": [
            [
                "b537a6a2d84128a0"
            ]
        ]
    },
    {
        "id": "3f727e9021443e59",
        "type": "ui_toast",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1570,
        "y": 680,
        "wires": []
    },
    {
        "id": "7be6957c67f7b79d",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "status.text",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 680,
        "wires": [
            [
                "3f727e9021443e59"
            ]
        ]
    },
    {
        "id": "5b4a66322ad0c4b5",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "property": "enabled",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 580,
        "wires": [
            [
                "7e88acedd6fd7e9b",
                "97b326de78cc2bd6"
            ]
        ]
    },
    {
        "id": "c1ef39dba16ca951",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 760,
        "wires": [
            [
                "01122154f7b49aac"
            ]
        ]
    },
    {
        "id": "97b326de78cc2bd6",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 680,
        "wires": [
            [
                "c1ef39dba16ca951",
                "ce332a573287547d"
            ]
        ]
    },
    {
        "id": "f9cb7bbb39d5bcbd",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 660,
        "wires": [
            [
                "ce332a573287547d"
            ]
        ]
    },
    {
        "id": "34d284932aa2e51b",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 820,
        "wires": [
            [
                "01122154f7b49aac"
            ]
        ]
    },
    {
        "id": "dc3197fa7a25b6f5",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "debug 149",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 700,
        "wires": []
    },
    {
        "id": "5f448d3783031ec4",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "debug 150",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 500,
        "wires": []
    },
    {
        "id": "48213293d72ad8c7",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://'&$globalContext(\"ip\")&':'&$globalContext(\"webAssistantPort\")",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 500,
        "wires": [
            [
                "a9c0aa59246a1e8d"
            ]
        ]
    },
    {
        "id": "9a5dbb25d355fe9d",
        "type": "inject",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "Launch web assistant on boot ",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 230,
        "y": 500,
        "wires": [
            [
                "48213293d72ad8c7"
            ]
        ]
    },
    {
        "id": "590dea6121e465f6",
        "type": "catch",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "scope": [
            "a9c0aa59246a1e8d"
        ],
        "uncaught": false,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "ce332a573287547d"
            ]
        ]
    },
    {
        "id": "a9c0aa59246a1e8d",
        "type": "http request",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 500,
        "wires": [
            [
                "ae24cfdf41aebbbb",
                "47bedc13b0949fa5"
            ]
        ]
    },
    {
        "id": "86db7d8867a3dd88",
        "type": "exec",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 990,
        "y": 820,
        "wires": [
            [
                "3dc1d5e0261dedd1"
            ],
            [
                "3dc1d5e0261dedd1"
            ],
            [
                "3dc1d5e0261dedd1"
            ]
        ]
    },
    {
        "id": "3dc1d5e0261dedd1",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "debug 156",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 820,
        "wires": []
    },
    {
        "id": "ae24cfdf41aebbbb",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 460,
        "wires": [
            [
                "ce332a573287547d"
            ]
        ]
    },
    {
        "id": "47bedc13b0949fa5",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 500,
        "wires": [
            [
                "01122154f7b49aac"
            ]
        ]
    },
    {
        "id": "5c9d6dcc66e37b80",
        "type": "function",
        "z": "b21e8c38dec5d4ca",
        "g": "34b71ed9cc8e31d6",
        "name": "function 17",
        "func": "let pid = parseInt(flow.get(\"webAssistantPid\")) +1\nmsg.payload = 'kill ' + pid.toString()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 800,
        "wires": [
            [
                "86db7d8867a3dd88"
            ]
        ]
    },
    {
        "id": "bf3e86b3ff63402c",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "g": "48fc088220fe72bb",
        "name": "debug 157",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 1000,
        "wires": []
    },
    {
        "id": "edf2e3443b2259f9",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "g": "ea9fd99eb20cf596",
        "name": "debug 158",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1120,
        "wires": []
    },
    {
        "id": "0330a96831d6ab57",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "g": "48fc088220fe72bb",
        "name": "",
        "property": "payload.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 1040,
        "wires": [
            [
                "75e0fddae13b131b"
            ]
        ]
    },
    {
        "id": "e09f33bf1e12b8d1",
        "type": "inject",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3410,
        "y": 640,
        "wires": [
            [
                "4a13ecbed6107f80"
            ]
        ]
    },
    {
        "id": "4d2e9a87f07ec79c",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "name": "debug 159",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a66c2b7ddfb07cfc",
        "type": "subflow:9bc00d62.26d47",
        "z": "b21e8c38dec5d4ca",
        "g": "926a3de759a09145",
        "name": "",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "protocol",
                "value": "http",
                "type": "str"
            }
        ],
        "x": 4550,
        "y": 1140,
        "wires": [
            [
                "4d2e9a87f07ec79c",
                "6fa2566e69874edd"
            ]
        ]
    },
    {
        "id": "ce209c8f16145de7",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "log",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3540,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "837dcd89ca25b988",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "actions",
                "type": "str"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 3650,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "420f3da951ebaed0",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check actions",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 2280,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "276682c855842828",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check objects",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 2640,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ca2f6394ae10f574",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check tools",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 3150,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "1bf77208259c0485",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check user",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 3730,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "433c68513309cead",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check locations",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 4200,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "043df0e9056f1fca",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check users",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 2630,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "881363479df69560",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Envirronement",
        "info": "",
        "x": 4200,
        "y": 180,
        "wires": []
    },
    {
        "id": "e465e455218add27",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Destinataire",
        "info": "",
        "x": 3730,
        "y": 180,
        "wires": []
    },
    {
        "id": "9c54af1c0bcc7965",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Moyens",
        "info": "",
        "x": 3130,
        "y": 180,
        "wires": []
    },
    {
        "id": "9330f4c54f3b93e9",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check machines",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 4200,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8ff0679511b38b0c",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check machines",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 3740,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "2810c01749861565",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "object of process",
        "info": "",
        "x": 2640,
        "y": 180,
        "wires": []
    },
    {
        "id": "857e15cc119dd6e1",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check contacts",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 2640,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6f17cfb2d6cca5fd",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check contacts",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 3740,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7d52b71aa635a196",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Name of the thing to do",
        "info": "",
        "x": 2300,
        "y": 180,
        "wires": []
    },
    {
        "id": "70aa97d150fd2e75",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "slot",
                "pt": "msg",
                "to": "[\"créer\", \"lis\", \"modifie\", \"supprime\",\"selectionne\",\"copie\",\"colle\",\"pris\",\"mis\",\"jetter\", ]",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2030,
        "y": 240,
        "wires": [
            [
                "420f3da951ebaed0"
            ]
        ]
    },
    {
        "id": "1ea9ad780633f4f7",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "slot",
                "pt": "msg",
                "to": "[\"nano\", \"node\", \"curl\"]",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2910,
        "y": 220,
        "wires": [
            [
                "ca2f6394ae10f574"
            ]
        ]
    },
    {
        "id": "c08b6a372af98cb7",
        "type": "subflow:0b3044d14d300449",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "Check communicationWays",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            },
            {
                "name": "path",
                "value": "rhasspy/days",
                "type": "str"
            },
            {
                "name": "slot",
                "value": "[\"lundi\"]",
                "type": "json"
            },
            {
                "name": "saveDifferences",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 3200,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e2ec4505207659df",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "slot",
                "pt": "msg",
                "to": "[\"terminal\", \"http\", \"https\",\"sms\",\"appel\"]",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2910,
        "y": 260,
        "wires": [
            [
                "c08b6a372af98cb7"
            ]
        ]
    },
    {
        "id": "70f0ae8aafac8b46",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "slot",
                "pt": "msg",
                "to": "[\"jarvis\", \"alex\",\"manon\"]",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3490,
        "y": 220,
        "wires": [
            [
                "1bf77208259c0485"
            ]
        ]
    },
    {
        "id": "0a45cb6c1af9287b",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "slot",
                "pt": "msg",
                "to": "[\"maman\", \"jean-yves\"]",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3490,
        "y": 300,
        "wires": [
            [
                "6f17cfb2d6cca5fd"
            ]
        ]
    },
    {
        "id": "1b902f571374e961",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "slot",
                "pt": "msg",
                "to": "[\"vicky\", \"laurent\", \"john\"]",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3490,
        "y": 260,
        "wires": [
            [
                "8ff0679511b38b0c"
            ]
        ]
    },
    {
        "id": "6c8c9595f507e3f9",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "slot",
                "pt": "msg",
                "to": "[\"maison\", \"garage\", \"entrepôt frais\"]",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3970,
        "y": 220,
        "wires": [
            [
                "433c68513309cead"
            ]
        ]
    },
    {
        "id": "9f8611db3392ebd6",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "slot",
                "pt": "msg",
                "to": "[\"vicky\", \"laurent\", \"john\"]",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3970,
        "y": 260,
        "wires": [
            [
                "9330f4c54f3b93e9"
            ]
        ]
    },
    {
        "id": "d22c1c635f38c59c",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "name": "debug 164",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3490,
        "y": 860,
        "wires": []
    },
    {
        "id": "88a2515f25c5bff9",
        "type": "inject",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2000,
        "y": 320,
        "wires": [
            [
                "70aa97d150fd2e75"
            ]
        ]
    },
    {
        "id": "7685699edbeb4c5d",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "property": "slots",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3550,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "bba2830f4695938f",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "48fc088220fe72bb",
        "name": "Just to speech the text in the input field",
        "info": "",
        "x": 1010,
        "y": 960,
        "wires": []
    },
    {
        "id": "437348d92a066b38",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "5f1ccdabb35acbee",
        "name": "We gonna try to do all with the concept of processus",
        "info": "So that all the \"thing\" we nedd. Maybe input of processus but i this point i am not sure that what  not confused wih object off process",
        "x": 2130,
        "y": 80,
        "wires": []
    },
    {
        "id": "e2ae91ff1eb6f409",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "g": "3c50c0a21d330b67",
        "name": "We separate by intent in sentence.ini here",
        "property": "payload.intent.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NeedMore",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Propertie",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1100,
        "y": 1520,
        "wires": [
            [
                "b9dd19225a7cad8b"
            ],
            [],
            []
        ]
    },
    {
        "id": "67fbb02e1d276549",
        "type": "subflow:cb421e9f379bf642",
        "z": "b21e8c38dec5d4ca",
        "g": "3c50c0a21d330b67",
        "name": "",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 1340,
        "wires": [
            [
                "4d2e9a87f07ec79c",
                "e6e3755980dd23e4"
            ]
        ]
    },
    {
        "id": "faf8ea544dbf3a88",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "ea9fd99eb20cf596",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 1160,
        "wires": [
            [
                "5e07fe4cc8fadc8c",
                "e67245e0a0036c2c"
            ]
        ]
    },
    {
        "id": "5e07fe4cc8fadc8c",
        "type": "function",
        "z": "b21e8c38dec5d4ca",
        "g": "3c50c0a21d330b67",
        "name": "drop sentence with one word that 's a false detection because no keyword is used for now",
        "func": "if(msg.payload.includes(' ')){\n    node.send(msg)\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1280,
        "wires": [
            [
                "67fbb02e1d276549"
            ]
        ]
    },
    {
        "id": "b83e948173ba6cf0",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "name": "NeedMore",
        "info": "",
        "x": 1600,
        "y": 1320,
        "wires": []
    },
    {
        "id": "b9dd19225a7cad8b",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Je peux pas ' & payload.slots.actions & $replace(payload.raw_text,payload.slots.actions,' ') & \" avec ce que tu me donnes. Je suis pas magiciens. Veux-tu m'apprendre ce que c'est?\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1620,
        "y": 1360,
        "wires": [
            [
                "01292ace217459b5"
            ]
        ]
    },
    {
        "id": "0a7a7febd1710121",
        "type": "function",
        "z": "b21e8c38dec5d4ca",
        "g": "926a3de759a09145",
        "name": "Language detection",
        "func": "if(!msg.language){\n    let englishWords = [' is ', ' have ', ' was ', ' had ', ' there ', ' who ', ' wich ']\n    for (let index = 0; index < englishWords.length; index++) {\n        const element = englishWords[index];\n        if(msg.payload.includes(element)){\n            msg.language = \"en-US\"\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4350,
        "y": 1140,
        "wires": [
            [
                "a66c2b7ddfb07cfc"
            ]
        ]
    },
    {
        "id": "866ce3466d0807f2",
        "type": "function",
        "z": "b21e8c38dec5d4ca",
        "name": "function 18",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e67245e0a0036c2c",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "g": "0c071a316d636b7b",
        "name": "One word command",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "valide",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "oui",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "annule",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "non",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 200,
        "y": 1440,
        "wires": [
            [
                "1b8657d75834892c"
            ],
            [
                "1b8657d75834892c"
            ],
            [],
            []
        ]
    },
    {
        "id": "0779aa78918e0523",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "0c071a316d636b7b",
        "name": "One word command. NEVER CONNECT TO RHASSPY OUT execpt for the cance response",
        "info": " They can just be used in a context like validation NEVER CONNECT TO RHASSPY OUT use a trigger of flow variable",
        "x": 400,
        "y": 1360,
        "wires": []
    },
    {
        "id": "e6e3755980dd23e4",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "g": "3c50c0a21d330b67",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "lastCommand",
                "pt": "flow",
                "to": "$flowContext(\"lastCommands\") ? $append($flowContext(\"lastCommands\"), payload): [payload]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "session",
                "pt": "flow",
                "to": "_session",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 1420,
        "wires": [
            [
                "e2ae91ff1eb6f409"
            ]
        ]
    },
    {
        "id": "5d15462fedcdd9de",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "3c50c0a21d330b67",
        "name": "Store session of websocket and rhasspy detection ",
        "info": "",
        "x": 1070,
        "y": 1380,
        "wires": []
    },
    {
        "id": "ddc5cd725857caf6",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "ea9fd99eb20cf596",
        "name": "Part to handle text message from webAssistant",
        "info": "",
        "x": 260,
        "y": 960,
        "wires": []
    },
    {
        "id": "89b147df82f0a439",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "926a3de759a09145",
        "name": "Part to output the audio data to the webAssistant",
        "info": "",
        "x": 4400,
        "y": 960,
        "wires": []
    },
    {
        "id": "c80de6de902336e8",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "g": "3c50c0a21d330b67",
        "name": "Get the intent from Rhasspy",
        "info": "",
        "x": 940,
        "y": 1220,
        "wires": []
    },
    {
        "id": "1b8657d75834892c",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "g": "0c071a316d636b7b",
        "name": "Switch by intent",
        "property": "lastCommand.intent.name",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "NeedMore",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 1420,
        "wires": [
            [
                "fce43233b08fbfe8"
            ]
        ]
    },
    {
        "id": "fce43233b08fbfe8",
        "type": "link out",
        "z": "b21e8c38dec5d4ca",
        "g": "0c071a316d636b7b",
        "name": "From validation",
        "mode": "link",
        "links": [
            "e77415f049659462"
        ],
        "x": 595,
        "y": 1420,
        "wires": []
    },
    {
        "id": "e77415f049659462",
        "type": "link in",
        "z": "b21e8c38dec5d4ca",
        "name": "NeedMore S2",
        "links": [
            "fce43233b08fbfe8"
        ],
        "x": 1635,
        "y": 1460,
        "wires": [
            [
                "09d6cbb0664e274f"
            ]
        ]
    },
    {
        "id": "41d48f870fc1873c",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "name": "NeedMore S2",
        "info": "",
        "x": 1710,
        "y": 1420,
        "wires": []
    },
    {
        "id": "6bf2387fac8f6074",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Pour m'apprendre ce qu'est \" & $replace(payload.raw_text,payload.slots.actions,' ')& \", tu dois me le définir.\"\t& \"Pour cela je dois disposer de propriété et d'une valeur de cette propriété. Tu peux spécifier une unité, un maximun, un minimum. Commence toujours par dire le nom puis la valeur. \"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 1440,
        "wires": [
            [
                "fcb225c279e7b2da"
            ]
        ]
    },
    {
        "id": "09d6cbb0664e274f",
        "type": "switch",
        "z": "b21e8c38dec5d4ca",
        "name": "Switch by action",
        "property": "lastCommand.slots[\"actions\"]",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "créer",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1780,
        "y": 1460,
        "wires": [
            [
                "6bf2387fac8f6074"
            ],
            []
        ]
    },
    {
        "id": "231eeb2b1de7da3c",
        "type": "change",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "webAssistantPort",
                "pt": "global",
                "to": "$string(port)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "webAssistantPath",
                "pt": "global",
                "to": "destination",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "0e89f7963110fb23",
        "type": "inject",
        "z": "b21e8c38dec5d4ca",
        "name": "Copy inject above here",
        "props": [
            {
                "p": "port",
                "v": "3300",
                "vt": "num"
            },
            {
                "p": "destination",
                "v": "vosk",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "231eeb2b1de7da3c"
            ]
        ]
    },
    {
        "id": "99faf8fb346873f4",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "name": "Store global variable on boot Be sure that was the same than above",
        "info": "",
        "x": 300,
        "y": 320,
        "wires": []
    },
    {
        "id": "b532dbf82f366996",
        "type": "subflow:653ca3b33715d85b",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "env": [
            {
                "name": "host",
                "value": "192.168.1.21",
                "type": "str"
            },
            {
                "name": "port",
                "value": "12101",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 1840,
        "wires": [
            [
                "aa0da8c0de2b3a2e",
                "b6c476a8b5149a6a"
            ]
        ]
    },
    {
        "id": "d778fe1e0cb4e35c",
        "type": "subflow:8555359a6f46144d",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "x": 1800,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "3bf61d84740de36a",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "name": "Propertie",
        "info": "",
        "x": 1620,
        "y": 1560,
        "wires": []
    },
    {
        "id": "0a3d052a04dfd69a",
        "type": "inject",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 1820,
        "wires": [
            [
                "b532dbf82f366996"
            ]
        ]
    },
    {
        "id": "aa0da8c0de2b3a2e",
        "type": "debug",
        "z": "b21e8c38dec5d4ca",
        "name": "debug 165",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b6c476a8b5149a6a",
        "type": "function",
        "z": "b21e8c38dec5d4ca",
        "name": "Put unknown words in senteces",
        "func": "msg.words = Object.keys(msg.payload)\nmsg.payload = \"Je ne suis pas sur de la prononciation de \"\nfor (let index = 0; index < msg.words.length; index++) {\n    const element = msg.words[index];\n    //if last element\n    if(index === msg.words.length-1){\n        msg.payload += element + \". Pour le moment si ma prononciation est correcte, tu dois valider sur l'interface de rhasspy.\"\n    }else{\n        msg.payload += element + \", \"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1860,
        "wires": [
            [
                "aa0da8c0de2b3a2e",
                "03ebdfe68c833d33"
            ]
        ]
    },
    {
        "id": "03ebdfe68c833d33",
        "type": "link out",
        "z": "b21e8c38dec5d4ca",
        "name": "From unknown words",
        "mode": "link",
        "links": [
            "f183f1f5049b0b6a"
        ],
        "x": 1055,
        "y": 1860,
        "wires": []
    },
    {
        "id": "f183f1f5049b0b6a",
        "type": "link in",
        "z": "b21e8c38dec5d4ca",
        "name": "Go to webAssistant",
        "links": [
            "01292ace217459b5",
            "fcb225c279e7b2da",
            "03ebdfe68c833d33"
        ],
        "x": 4045,
        "y": 1260,
        "wires": [
            [
                "0a7a7febd1710121"
            ]
        ]
    },
    {
        "id": "01292ace217459b5",
        "type": "link out",
        "z": "b21e8c38dec5d4ca",
        "name": "From NeedMore",
        "mode": "link",
        "links": [
            "f183f1f5049b0b6a"
        ],
        "x": 1815,
        "y": 1360,
        "wires": []
    },
    {
        "id": "fcb225c279e7b2da",
        "type": "link out",
        "z": "b21e8c38dec5d4ca",
        "name": "From NeedMore S2",
        "mode": "link",
        "links": [
            "f183f1f5049b0b6a"
        ],
        "x": 2175,
        "y": 1440,
        "wires": []
    },
    {
        "id": "179fc6e5b57d138d",
        "type": "inject",
        "z": "b21e8c38dec5d4ca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "créer une piscine",
        "payloadType": "str",
        "x": 460,
        "y": 1260,
        "wires": [
            [
                "5e07fe4cc8fadc8c"
            ]
        ]
    },
    {
        "id": "d2a4e25582a1ed9b",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "name": "Sentence remove when train",
        "info": "[Propertie]\n([0..100]{value}) [($units){units}] [(maximum [0..100]{maximum})] [(minimum [0..100]{minimum})]",
        "x": 180,
        "y": 1740,
        "wires": []
    },
    {
        "id": "0fd7cc1b5ef96229",
        "type": "comment",
        "z": "b21e8c38dec5d4ca",
        "name": "TO READ TO UNDERSTANT THE LOGIC OF THE ASSISTANT",
        "info": "For NLU, that what the intent detection to be simple, RASA NLU is a big player.\nWith RASA you can train you an AI model and you can handle chain of command with prediction of the next things to do.",
        "x": 2170,
        "y": 420,
        "wires": []
    },
    {
        "id": "45957de74b408f54",
        "type": "function",
        "z": "c464cce32785f35b",
        "name": "function 11",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "587ad696ce771e9e",
        "type": "http in",
        "z": "c464cce32785f35b",
        "name": "",
        "url": "/testmic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 510,
        "y": 580,
        "wires": [
            [
                "70be20c88e77f5f6",
                "5879fe76aaa3d71a",
                "670defeed537939d",
                "497f873539e87932"
            ]
        ]
    },
    {
        "id": "120b0bf3c06b7d41",
        "type": "http response",
        "z": "c464cce32785f35b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1320,
        "y": 700,
        "wires": []
    },
    {
        "id": "70be20c88e77f5f6",
        "type": "template",
        "z": "c464cce32785f35b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<div>coucou</div>\n<script>\n    function getLocalStream() {\n        navigator.mediaDevices.getUserMedia({video: false, audio: true}).then((stream) => {\n            window.localStream = stream;\n            window.localAudio.srcObject = stream;\n            window.localAudio.autoplay = true;\n    }).catch((err) => {\n        console.error(`you got an error: ${err}`)\n    });\n    }\n    \n    getLocalStream();\n</script>",
        "output": "str",
        "x": 900,
        "y": 800,
        "wires": [
            [
                "120b0bf3c06b7d41",
                "0f0280acd0ca2901"
            ]
        ]
    },
    {
        "id": "0f0280acd0ca2901",
        "type": "debug",
        "z": "c464cce32785f35b",
        "name": "debug 112",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 740,
        "wires": []
    },
    {
        "id": "f5cbb29ac358353d",
        "type": "debug",
        "z": "c464cce32785f35b",
        "name": "debug 137",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 460,
        "wires": []
    },
    {
        "id": "d4f36983d3e4d45e",
        "type": "buffer-parser",
        "z": "c464cce32785f35b",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1630,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "5879fe76aaa3d71a",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "d": true,
        "group": "10ad1fb7bcc90a34",
        "name": "Video",
        "order": 1,
        "width": "19",
        "height": "12",
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n      <style>\n        \n      \n        video {\n          background-color: black;\n          margin-bottom: 1rem;\n        }\n      \n        #error {\n          color: red;\n          padding: 0.6rem;\n          background-color: rgb(236 157 157);\n          margin-bottom: 0.6rem;\n          display: none;\n        }\n      </style>\n \n    <title>GetUserMedia demo</title>\n  <body>\n    <h1> WebRTC getUserMedia() demo</h1>\n  \n    <!-- If you use the playsinline attribute then \n      the video is played \"inline\". If you omit this \n      attribute then it works normal in the desktop\n      browsers, but for the mobile browsers, the video \n      takes the fullscreen by default. And don't forget\n      to use the autoplay attribute-->\n    <video id='video' width=\"600\" height=\"300\" autoplay playsinline>\n      Sorry, video element not supported in your browsers\n    </video>\n    <div id=\"error\"></div>\n    <div id=\"button-container\">\n      <button onclick=\"openCamera()\"> Open Camera</button>\n      <!-- Close Camera button -->\n      <button onclick='closeCamera()'>Close Camera</button>\n    </div>\n  </body>\n</div>\n<script>\n  var count = 0\n  const videoElem = document.getElementById('video');\n  const errorElem = document.getElementById('error');\n  let receivedMediaStream = null;\n  \n  //Declare the MediaStreamConstraints object\n  const constraints = {\n  audio: true,\n  video: true\n  }\n  \n  function openCamera() {\n  //Ask the User for the access of the device camera and microphone\n  navigator.mediaDevices.getUserMedia(constraints)\n  .then(mediaStream => {\n  // The received mediaStream contains both the\n  // video and audio media data\n  navigator.mediaDevices.getUserMedia({video: true})\n  \n  //Add the mediaStream directly to the source of the video element\n  // using the srcObject attribute\n  videoElem.srcObject = mediaStream;\n  \n  // make the received mediaStream available globally\n  receivedMediaStream = mediaStream;\n  \n  }).catch(err => {\n  // handling the error if any\n  errorElem.innerHTML = err;\n  errorElem.style.display = \"block\";\n  });\n  \n  }\n  \n  \n  const closeCamera = () => {\n  if (!receivedMediaStream) {\n  errorElem.innerHTML = \"Camera is already closed!\";\n  errorElem.style.display = \"block\";\n  } else {\n  /* MediaStream.getTracks() returns an array of all the\n  MediaStreamTracks being used in the received mediaStream\n  we can iterate through all the mediaTracks and\n  stop all the mediaTracks by calling its stop() method*/\n  receivedMediaStream.getTracks().forEach(mediaTrack => {\n  mediaTrack.stop();\n  });\n  errorElem.innerHTML = \"Camera closed successfully!\"\n  errorElem.style.display = \"block\";\n  }\n  }\n(function() {\n  \n  //function testit(msg,scope) {\n  //  count = count+1;\n  //  console.log(\"In testit \" + msg.payload + \" count = \" + count);\n  //  scope.send({payload: \"from testit \" + msg.payload + \" count = \" + count});\n  //}\n  (function(scope) {\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      //testit(msg, scope);\n    }\n  });\n})(scope);\n})();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 970,
        "y": 520,
        "wires": [
            [
                "0f0280acd0ca2901"
            ]
        ]
    },
    {
        "id": "c342c4e185812e94",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "d": true,
        "group": "10ad1fb7bcc90a34",
        "name": "Mic",
        "order": 1,
        "width": "19",
        "height": "12",
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n      <style>\n        \n      \n        video {\n          background-color: black;\n          margin-bottom: 1rem;\n        }\n      \n        #error {\n          color: red;\n          padding: 0.6rem;\n          background-color: rgb(236 157 157);\n          margin-bottom: 0.6rem;\n          display: none;\n        }\n      </style>\n \n    <title>GetUserMedia demo</title>\n  <body>\n    <h1> WebRTC getUserMedia() demo</h1>\n  \n    <!-- If you use the playsinline attribute then \n      the video is played \"inline\". If you omit this \n      attribute then it works normal in the desktop\n      browsers, but for the mobile browsers, the video \n      takes the fullscreen by default. And don't forget\n      to use the autoplay attribute-->\n    <video id='video' width=\"600\" height=\"300\" autoplay playsinline>\n      Sorry, video element not supported in your browsers\n    </video>\n    <div id=\"error\"></div>\n    <div id=\"button-container\">\n      <button onclick=\"openCamera()\"> Open Camera</button>\n      <!-- Close Camera button -->\n      <button onclick='closeCamera()'>Close Camera</button>\n    </div>\n  </body>\n</div>\n<script>\n  var count = 0\n  const videoElem = document.getElementById('video');\n  const errorElem = document.getElementById('error');\n  let receivedMediaStream = null;\n  \n  //Declare the MediaStreamConstraints object\n  const constraints = {\n  audio: true,\n  video: true\n  }\n  \n  function openCamera() {\n  //Ask the User for the access of the device camera and microphone\n  navigator.mediaDevices.getUserMedia(constraints)\n  .then(mediaStream => {\n  // The received mediaStream contains both the\n  // video and audio media data\n  \n  //Add the mediaStream directly to the source of the video element\n  // using the srcObject attribute\n  videoElem.srcObject = mediaStream;\n  \n  // make the received mediaStream available globally\n  receivedMediaStream = mediaStream;\n  \n  }).catch(err => {\n  // handling the error if any\n  errorElem.innerHTML = err;\n  errorElem.style.display = \"block\";\n  });\n  \n  }\n  \n  \n  const closeCamera = () => {\n  if (!receivedMediaStream) {\n  errorElem.innerHTML = \"Camera is already closed!\";\n  errorElem.style.display = \"block\";\n  } else {\n  /* MediaStream.getTracks() returns an array of all the\n  MediaStreamTracks being used in the received mediaStream\n  we can iterate through all the mediaTracks and\n  stop all the mediaTracks by calling its stop() method*/\n  receivedMediaStream.getTracks().forEach(mediaTrack => {\n  mediaTrack.stop();\n  });\n  errorElem.innerHTML = \"Camera closed successfully!\"\n  errorElem.style.display = \"block\";\n  }\n  }\n(function() {\n  \n  //function testit(msg,scope) {\n  //  count = count+1;\n  //  console.log(\"In testit \" + msg.payload + \" count = \" + count);\n  //  scope.send({payload: \"from testit \" + msg.payload + \" count = \" + count});\n  //}\n  (function(scope) {\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      //testit(msg, scope);\n    }\n  });\n})(scope);\n})();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 930,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "670defeed537939d",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "group": "10ad1fb7bcc90a34",
        "name": "Video",
        "order": 1,
        "width": "19",
        "height": "12",
        "format": "<div id=\"mymedia\" style=\"{{'color:'+theme.base_color}}\">\n      <style>\n        \n      \n        video {\n          background-color: black;\n          margin-bottom: 1rem;\n        }\n      \n        #error {\n          color: red;\n          padding: 0.6rem;\n          background-color: rgb(236 157 157);\n          margin-bottom: 0.6rem;\n          display: none;\n        }\n      </style>\n \n    <title>GetUserMedia demo</title>\n  \n    <div id=\"container\">\n  \n      <h1><a href=\"//webrtc.github.io/samples/\" title=\"WebRTC samples homepage\">WebRTC samples</a>\n        <span>MediaRecorder</span>\n      </h1>\n  \n      <p>For more information see the MediaStream Recording API <a\n          href=\"http://w3c.github.io/mediacapture-record/MediaRecorder.html\"\n          title=\"W3C MediaStream Recording API Editor's Draft\">Editor's&nbsp;Draft</a>.</p>\n  \n      <video id=\"gum\" playsinline autoplay muted></video>\n      <video id=\"recorded\" playsinline loop></video>\n  \n      <div>\n        <button id=\"start\">Start camera</button>\n        <button id=\"record\" disabled>Start Recording</button>\n        <button id=\"play\" disabled>Play</button>\n        <button id=\"download\" disabled>Download</button>\n      </div>\n  \n      <div>\n        Recording format: <select id=\"codecPreferences\" disabled></select>\n      </div>\n      <div>\n        <h4>Media Stream Constraints options</h4>\n        <p>Echo cancellation: <input type=\"checkbox\" id=\"echoCancellation\"></p>\n      </div>\n\n      <!--HTMLfrom TechSC -->\n  \n      <div>\n        <span id=\"errorMsg\"></span>\n      </div>\n  \n      <a href=\"https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/record\"\n        title=\"View source for this page on GitHub\" id=\"viewSource\">View source on GitHub</a>\n  \n    </div>\n  \n    <!-- include adapter for srcObject shim -->\n    <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n  \n</div>\n<script>\n    (function(scope,msg) {\n        //console.log(scope.global.get(\"projectDir\"))\n        console.log(scope)\n         /*\n        * Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n        *\n        * Use of this source code is governed by a BSD-style license\n        * that can be found in the LICENSE file in the root of the source\n        * tree.\n        */\n        \n        // This code is adapted from\n        // https://rawgit.com/Miguelao/demos/master/mediarecorder.html\n        \n        'use strict';\n        \n        /* globals MediaRecorder */\n        \n        let mediaRecorder;\n        let recordedBlobs;\n        \n        //From TechSC\n        let recordLitleBlob;\n        \n        const codecPreferences = document.querySelector('#codecPreferences');\n        \n        const errorMsgElement = document.querySelector('span#errorMsg');\n        const recordedVideo = document.querySelector('video#recorded');\n        const recordButton = document.querySelector('button#record');\n        recordButton.addEventListener('click', () => {\n        if (recordButton.textContent === 'Start Recording') {\n        startRecording();\n        } else {\n        stopRecording();\n        recordButton.textContent = 'Start Recording';\n        playButton.disabled = false;\n        downloadButton.disabled = false;\n        codecPreferences.disabled = false;\n        }\n        });\n        \n        const playButton = document.querySelector('button#play');\n        playButton.addEventListener('click', () => {\n        const mimeType = codecPreferences.options[codecPreferences.selectedIndex].value.split(';', 1)[0];\n        const superBuffer = new Blob(recordedBlobs, {type: mimeType});\n        recordedVideo.src = null;\n        recordedVideo.srcObject = null;\n        recordedVideo.src = window.URL.createObjectURL(superBuffer);\n        recordedVideo.controls = true;\n        recordedVideo.play();\n        });\n        scope.send({payload:\"test\"})\n        const downloadButton = document.querySelector('button#download');\n        downloadButton.addEventListener('click', () => {\n        const blob = new Blob(recordedBlobs, {type: 'video/webm'});\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url;\n        a.download = 'test.webm';\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(() => {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n        }, 100);\n        });\n        \n        function handleDataAvailable(event) {\n            if (event.data && event.data.size > 0) {\n                recordedBlobs.push(event.data);\n                console.log(event.target.stream.getTracks())\n                scope.send(event.data)\n            }\n        }\n        \n        function getSupportedMimeTypes() {\n          const possibleTypes = [\n            'video/webm;codecs=vp9,opus',\n            'video/webm;codecs=vp8,opus',\n            'video/webm;codecs=h264,opus',\n            'video/mp4;codecs=h264,aac',\n          ];\n          return possibleTypes.filter(mimeType => {\n          return MediaRecorder.isTypeSupported(mimeType);\n          });\n        }\n        \n        function generateUIList(settingWithCoicesInArray){\n          let select = document.createElement('select')\n          for(i=0; i < settingWithCoicesInArray; i++){\n            let option = document.createElement('option');\n            option.text, option.value = settingWithCoicesInArray\n            select.appendChild(option)\n          }\n          return select\n        }\n        scope.send({payload: \"preload\"});\n        function isSupportedConstraints(){\n          let supported = navigator.mediaDevices.getSupportedConstraints();\n          document.querySelector('#mymedia').appendChild(generateUIList(supported))\n        }\n        \n        isSupportedConstraints()\n            \n        //function fron TechSC\n        function recordBlob(blobSize){\n          //setTimeout(() => {()},b)\n          recordedLittleBlob = [];\n          const mimeType = codecPreferences.options[codecPreferences.selectedIndex].value;\n          const options = {mimeType};\n          try {\n            mediaRecorder = new MediaRecorder(window.stream, options);\n          } catch (e) {\n            console.error('Exception while creating MediaRecorder:', e);\n            errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;\n            return;\n          }\n          console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n          mediaRecorder.onstop = (event) => {\n            console.log('Recorder stopped: ', event);\n            console.log('Recorded Blobs: ', recordedBlobs);\n          };\n          window.setInterval(mediaRecorder.requestData(),1000)\n          mediaRecorder.ondataavailable = handleDataAvailable;\n          mediaRecorder.start();\n          console.log('MediaRecorder started', mediaRecorder);\n        }\n        \n        function startRecording() {\n          recordedBlobs = [];\n          const mimeType = codecPreferences.options[codecPreferences.selectedIndex].value;\n          const options = {mimeType};\n          try {\n            mediaRecorder = new MediaRecorder(window.stream, options);\n          } catch (e) {\n              console.error('Exception while creating MediaRecorder:', e);\n              errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;\n              return;\n            } \n          console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n          recordButton.textContent = 'Stop Recording';\n          playButton.disabled = true;\n          downloadButton.disabled = true;\n          codecPreferences.disabled = true;\n          mediaRecorder.onstop = (event) => {\n            console.log('Recorder stopped: ', event);\n            console.log('Recorded Blobs: ', recordedBlobs);\n          };\n          mediaRecorder.ondataavailable = handleDataAvailable;\n          mediaRecorder.start(2000);\n          console.log('MediaRecorder started', mediaRecorder);\n        }\n        \n        function stopRecording() {\n        mediaRecorder.stop();\n        }\n        \n        function handleSuccess(stream) {\n            recordButton.disabled = false;\n            console.log('getUserMedia() got stream:', stream);\n            window.stream = stream;\n            \n            const gumVideo = document.querySelector('video#gum');\n            gumVideo.srcObject = stream;\n            \n            getSupportedMimeTypes().forEach(mimeType => {\n            const option = document.createElement('option');\n            option.value = mimeType;\n            option.innerText = option.value;\n            codecPreferences.appendChild(option);\n            });\n            codecPreferences.disabled = false;\n        }\n        \n        async function init(constraints) {\n          try {\n            const stream = await navigator.mediaDevices.getUserMedia(constraints);\n            handleSuccess(stream);\n          } catch (e) {\n            console.error('navigator.getUserMedia error:', e);\n            errorMsgElement.innerHTML = `navigator.getUserMedia error:${e.toString()}`;\n          }\n        }\n        \n        document.querySelector('button#start').addEventListener('click', async () => {\n            document.querySelector('button#start').disabled = true;\n            const hasEchoCancellation = document.querySelector('#echoCancellation').checked;\n            const constraints = {\n                audio: {\n                    echoCancellation: {exact: hasEchoCancellation}\n                },\n                video: {\n                    width: 1280, height: 720\n                }\n            };\n            console.log('Using media constraints:', constraints);\n            await init(constraints);\n        });\n        scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n            //testit(msg, scope);\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1410,
        "y": 560,
        "wires": [
            [
                "0f0280acd0ca2901"
            ]
        ]
    },
    {
        "id": "497f873539e87932",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "d": true,
        "group": "219ad68d9fd685f8",
        "name": "Audio",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n    \n        <div id=\"container\">\n    \n            <h1><a href=\"//webrtc.github.io/samples/\" title=\"WebRTC samples homepage\">WebRTC samples</a>\n                <span>getUserMedia, audio only</span>\n            </h1>\n    \n            <audio id=\"gum-local\" controls autoplay></audio>\n    \n            <p class=\"warning\">Warning: if you're not using headphones, pressing play will cause feedback.</p>\n    \n            <p>Render the audio stream from an audio-only <code>getUserMedia()</code> call with an audio element.</p>\n    \n            <p>The <code>MediaStream</code> object <code><em>stream</em></code> passed to the <code>getUserMedia()</code>\n                callback is in global scope, so you can inspect it from the console.</p>\n            <div>\n                <span id=\"errorMsg\"></span>\n            </div>\n    \n            <a href=\"https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/audio\"\n                title=\"View source for this page on GitHub\" id=\"viewSource\">View source on GitHub</a>\n    \n        </div>\n    \n        <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n</div>\n<script>\n\n  (function(scope) {\n    /*\n    * Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n    *\n    * Use of this source code is governed by a BSD-style license\n    * that can be found in the LICENSE file in the root of the source\n    * tree.\n    */\n    \n    'use strict';\n    \n    // Put variables in global scope to make them available to the browser console.\n    const audio = document.querySelector('audio');\n    \n    const constraints = window.constraints = {\n        audio: true,\n        video: false\n    };\n\n    function handleSuccess(stream) {\n        const audioTracks = stream.getAudioTracks();\n        console.log('Got stream with constraints:', constraints);\n        console.log('Using audio device: ' + audioTracks[0].label);\n        stream.oninactive = function() {\n            console.log('Stream ended');\n        };\n        window.stream = stream; // make variable available to browser console\n        audio.srcObject = stream;\n    }\n    \n    function handleError(error) {\n        const errorMessage = 'navigator.MediaDevices.getUserMedia error: ' + error.message + ' ' + error.name;\n        document.getElementById('errorMsg').innerText = errorMessage;\n        console.log(errorMessage);\n    }\n    \n    function startRecording() {\n          recordedBlobs = [];\n          const mimeType = codecPreferences.options[codecPreferences.selectedIndex].value;\n          const options = {mimeType};\n          try {\n            mediaRecorder = new MediaRecorder(window.stream, options);\n          } catch (e) {\n              console.error('Exception while creating MediaRecorder:', e);\n              errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;\n              return;\n            } \n          console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n          recordButton.textContent = 'Stop Recording';\n          playButton.disabled = true;\n          downloadButton.disabled = true;\n          codecPreferences.disabled = true;\n          mediaRecorder.onstop = (event) => {\n            console.log('Recorder stopped: ', event);\n            console.log('Recorded Blobs: ', recordedBlobs);\n          };\n          mediaRecorder.ondataavailable = handleDataAvailable;\n          mediaRecorder.start(2000);\n          console.log('MediaRecorder started', mediaRecorder);\n    }\n    //navigator.mediaDevices.getUserMedia(constraints).then((devices) =>{\n    //    console.log(devices);\n    //     handleSuccess;\n    //}).catch(handleError);\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      //testit(msg, scope);\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1410,
        "y": 500,
        "wires": [
            [
                "0f0280acd0ca2901"
            ]
        ]
    },
    {
        "id": "aa151d437be95f9e",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "d": true,
        "group": "219ad68d9fd685f8",
        "name": "video cam ptz",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n    <body>\n    \n      <div id=\"container\">\n        <h1><a href=\"//webrtc.github.io/samples/\" title=\"WebRTC samples homepage\">WebRTC samples</a>\n          <span>Control Pan-Tilt-Zoom Camera</span>\n        </h1>\n    \n        <video id=\"gum-local\" autoplay playsinline></video>\n        <button id=\"showVideo\">Open camera</button>\n    \n        <div>\n          <div class=\"label\">Pan:</div>\n          <input name=\"pan\" type=\"range\" disabled>\n        </div>\n        <div>\n          <div class=\"label\">Tilt:</div>\n          <input name=\"tilt\" type=\"range\" disabled>\n        </div>\n        <div>\n          <div class=\"label\">Zoom:</div>\n          <input name=\"zoom\" type=\"range\" disabled>\n        </div>\n    \n        <div id=\"errorMsg\"></div>\n    \n        <p>Display the video stream from <code>getUserMedia()</code> in a video\n          element and control pan, tilt, and zoom if camera supports Pan-Tilt-Zoom.</p>\n    \n        <p>The <code>MediaStreamTrack</code> object <code>track</code> is in\n          global scope, so you can inspect it from the console.</p>\n    \n        <a href=\"https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/pan-tilt-zoom\"\n          title=\"View source for this page on GitHub\" id=\"viewSource\">View source on GitHub</a>\n      </div>\n    \n      <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n\n    \n    </body>\n</div>\n<script>\n/*\n* Copyright (c) 2020 The WebRTC project authors. All Rights Reserved.\n*\n* Use of this source code is governed by a BSD-style license\n* that can be found in the LICENSE file in the root of the source\n* tree.\n*/\n'use strict';\n\n// Put variables in global scope to make them available to the browser console.\nconst constraints = window.constraints = {\nvideo: {\npan: true, tilt: true, zoom: true\n}\n};\n\nfunction handleSuccess(stream) {\nconst video = document.querySelector('video');\nconst videoTracks = stream.getVideoTracks();\nconsole.log('Got stream with constraints:', constraints);\nconsole.log(`Using video device: ${videoTracks[0].label}`);\nvideo.srcObject = stream;\n\n// make track variable available to browser console.\nconst [track] = [window.track] = stream.getVideoTracks();\nconst capabilities = track.getCapabilities();\nconst settings = track.getSettings();\n\nfor (const ptz of ['pan', 'tilt', 'zoom']) {\n// Check whether camera supports pan/tilt/zoom.\nif (!(ptz in settings)) {\nerrorMsg(`Camera does not support ${ptz}.`);\ncontinue;\n}\n\n// Map it to a slider element.\nconst input = document.querySelector(`input[name=${ptz}]`);\ninput.min = capabilities[ptz].min;\ninput.max = capabilities[ptz].max;\ninput.step = capabilities[ptz].step;\ninput.value = settings[ptz];\ninput.disabled = false;\ninput.oninput = async event => {\ntry {\nconst constraints = {advanced: [{[ptz]: input.value}]};\nawait track.applyConstraints(constraints);\n} catch (err) {\nconsole.error('applyConstraints() failed: ', err);\n}\n};\n}\n}\n\nfunction handleError(error) {\nif (error.name === 'NotAllowedError') {\nerrorMsg('Permissions have not been granted to use your camera, ' +\n'you need to allow the page access to your devices in ' +\n'order for the demo to work.');\n}\nerrorMsg(`getUserMedia error: ${error.name}`, error);\n}\n\nfunction errorMsg(msg, error) {\nconst errorElement = document.querySelector('#errorMsg');\nerrorElement.innerHTML += `<p>${msg}</p>`;\nif (typeof error !== 'undefined') {\nconsole.error(error);\n}\n}\n\nasync function init(e) {\ntry {\nconst stream = await navigator.mediaDevices.getUserMedia(constraints);\nhandleSuccess(stream);\ne.target.disabled = true;\n} catch (e) {\nhandleError(e);\n}\n}\n\ndocument.querySelector('#showVideo').addEventListener('click', e => init(e));\n(function() {\n  (function(scope) {\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      //testit(msg, scope);\n    }\n  });\n})(scope);\n})();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b1ff99f4b683d95e",
        "type": "template",
        "z": "c464cce32785f35b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 1040,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "9f6cd0b395da697e",
        "type": "mqtt in",
        "z": "c464cce32785f35b",
        "d": true,
        "name": "",
        "topic": "hermes/audioServer/toggleOn",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "91f1b589e74d876c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1440,
        "y": 340,
        "wires": [
            [
                "64be324304859bf0"
            ]
        ]
    },
    {
        "id": "64be324304859bf0",
        "type": "debug",
        "z": "c464cce32785f35b",
        "name": "debug 141",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 420,
        "wires": []
    },
    {
        "id": "6741c6f9884fa6d8",
        "type": "watch",
        "z": "c464cce32785f35b",
        "d": true,
        "name": "",
        "files": "",
        "recursive": "",
        "x": 370,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "1e7467415c70c7dd",
        "type": "file in",
        "z": "c464cce32785f35b",
        "name": "",
        "filename": "$globalContext(\"projectDir\")& \"/dashboard/js/audio.js\"",
        "filenameType": "jsonata",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 540,
        "y": 420,
        "wires": [
            [
                "7cda457f2be29bc2",
                "f5cbb29ac358353d"
            ]
        ]
    },
    {
        "id": "7cda457f2be29bc2",
        "type": "change",
        "z": "c464cce32785f35b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ignoreMe",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 400,
        "wires": [
            [
                "332406291265bb91"
            ]
        ]
    },
    {
        "id": "332406291265bb91",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "group": "219ad68d9fd685f8",
        "name": "Audio",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n    \n        <div id=\"container\">\n    \n            <h1><a href=\"//webrtc.github.io/samples/\" title=\"WebRTC samples homepage\">WebRTC samples</a>\n                <span>getUserMedia, audio only</span>\n            </h1>\n    \n            <audio id=\"gum-local\" controls autoplay></audio>\n    \n            <p class=\"warning\">Warning: if you're not using headphones, pressing play will cause feedback.</p>\n    \n            <p>Render the audio stream from an audio-only <code>getUserMedia()</code> call with an audio element.</p>\n    \n            <p>The <code>MediaStream</code> object <code><em>stream</em></code> passed to the <code>getUserMedia()</code>\n                callback is in global scope, so you can inspect it from the console.</p>\n            <div>\n                <span id=\"errorMsg\"></span>\n            </div>\n    \n            <a href=\"https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/audio\"\n                title=\"View source for this page on GitHub\" id=\"viewSource\">View source on GitHub</a>\n    \n        </div>\n    \n        <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n</div>\n<script>\n\n  (function(scope,msg) {\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      if(msg.ignoreMe){\n        {{msg.payload}}\n      }else{\n      //testit(msg, scope);\n      }\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1010,
        "y": 400,
        "wires": [
            [
                "0f0280acd0ca2901"
            ]
        ]
    },
    {
        "id": "b96867df0d9df84e",
        "type": "inject",
        "z": "c464cce32785f35b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 460,
        "wires": [
            [
                "1e7467415c70c7dd"
            ]
        ]
    },
    {
        "id": "2d58b3939317c4da",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "group": "d10294dd6b7b5321",
        "name": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Text edito</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n    <script type=\"application/javascript\" src=\"https://cdn.jsdelivr.net/npm/vosk-browser@0.0.5/dist/vosk.js\"></script>\n</head>\n\n<body>\n\t\t<body>\n\t\t\t<div id=\"wrapper\">\n\t\t\t\t<button id=\"trigger\" type=\"button\" onclick=\"start()\">Start recognition</button>\n\t\t\t\t<div id=\"recognition-result\"><span id=\"partial\"></span></div>\n\t\t\t</div>\n\t\t\n\t\t</body>\n    <!-- OR ANY OTHER AMD LOADER HERE INSTEAD OF loader.js -->\n    <script>\n\t\tasync function start() {\n\t\t\tconst model = await Vosk.createModel('vosk-model-small-fr-0.22.zip');\n\t\t\n\t\t\tconst recognizer = new model.KaldiRecognizer();\n\t\t\trecognizer.on(\"result\", (message) => {\n\t\t\t\tconsole.log(`Result: ${message.result.text}`);\n\t\t\t});\n\t\t\trecognizer.on(\"partialresult\", (message) => {\n\t\t\t\tconsole.log(`Partial result: ${message.result.partial}`);\n\t\t\t});\n\t\t\t\n\t\t\tconst mediaStream = await navigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo: false,\n\t\t\t\taudio: {\n\t\t\t\t\techoCancellation: true,\n\t\t\t\t\tnoiseSuppression: true,\n\t\t\t\t\tchannelCount: 1,\n\t\t\t\t\tsampleRate: 16000\n\t\t\t\t},\n\t\t\t});\n\t\t\t\n\t\t\tconst audioContext = new AudioContext();\n\t\t\tconst recognizerNode = audioContext.createScriptProcessor(4096, 1, 1)\n\t\t\trecognizerNode.onaudioprocess = (event) => {\n\t\t\t\ttry {\n\t\t\t\t\trecognizer.acceptWaveform(event.inputBuffer)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('acceptWaveform failed', error)\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst source = audioContext.createMediaStreamSource(mediaStream);\n\t\t\tsource.connect(recognizerNode);\n\t\t\n\t\t}\n\t\twindow.onload = init;\n    </script>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 420,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d3ca19d3e33e200d",
        "type": "debug",
        "z": "c464cce32785f35b",
        "name": "debug 153",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 680,
        "wires": []
    },
    {
        "id": "aadefe364c43d471",
        "type": "change",
        "z": "c464cce32785f35b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "time",
                "pt": "msg",
                "to": "$fromMillis($millis(),'[H01]:[m01]:[s01] [D01]:[M01]:[Y0001]', '+0100')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "vickyCurrentFlow",
                "pt": "msg",
                "to": "$globalContext(\"vickyCurrentFlow\")[$count($globalContext(\"vickyCurrentFlow\"))-1]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 700,
        "wires": [
            [
                "8a460b838bd5e6d2"
            ]
        ]
    },
    {
        "id": "8a460b838bd5e6d2",
        "type": "template",
        "z": "c464cce32785f35b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<div class=\"vickyChat\">\n    <div class=\"vickyChatHeader\">\n        <p style=\"grid-column: 1 / 3;  grid-row: 1;\">{{time}}</p>\n        <p style=\"grid-column: 3;  grid-row: 1; text-align: end;\">{{_msgid}}</p>\n    </div>    \n    <p>coucou</p>\n    <div class=\"vickyChatFooter\">\n        <p id=\"vickyFlow{{_msgid}}\" style=\"grid-column: 1 / 3;  grid-row: 1;\" >flow: <span>{{vickyCurrentFlow.name}}</span> step: <span>{{vickyCurrentFlow.step}}</span></p>\n        <p id=\"userCall{{_msgid}}\" style=\"grid-column: 3;  grid-row: 1; text-align: end;\"><span>{{global.currentUser.name}}</span></p>\n    </div>  \n</div>\n\n",
        "output": "str",
        "x": 1060,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "4ad73d97a8a8594f",
        "type": "inject",
        "z": "c464cce32785f35b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 740,
        "y": 620,
        "wires": [
            [
                "aadefe364c43d471"
            ]
        ]
    },
    {
        "id": "229282bd8fe440c1",
        "type": "file",
        "z": "b52d06897a68ca8c",
        "name": "",
        "filename": "/home/vicky/.node-red/projects/techscorangepi/cdn/monaco-editor/loader.min.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2040,
        "y": 440,
        "wires": [
            [
                "c8e3a16e7225ca23"
            ]
        ]
    },
    {
        "id": "374194b8d831d30b",
        "type": "http request",
        "z": "b52d06897a68ca8c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs/loader.min.js\"",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1630,
        "y": 460,
        "wires": [
            [
                "229282bd8fe440c1"
            ]
        ]
    },
    {
        "id": "593ff95ec6da4b1a",
        "type": "inject",
        "z": "b52d06897a68ca8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1500,
        "y": 360,
        "wires": [
            [
                "374194b8d831d30b"
            ]
        ]
    },
    {
        "id": "c8e3a16e7225ca23",
        "type": "debug",
        "z": "b52d06897a68ca8c",
        "name": "debug 139",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 560,
        "wires": []
    },
    {
        "id": "a73c0537f0828da0",
        "type": "catch",
        "z": "b52d06897a68ca8c",
        "name": "",
        "scope": [
            "229282bd8fe440c1",
            "374194b8d831d30b",
            "9853f1497609b1d8"
        ],
        "uncaught": false,
        "x": 2090,
        "y": 580,
        "wires": [
            [
                "c8e3a16e7225ca23"
            ]
        ]
    },
    {
        "id": "068945106f09d2b0",
        "type": "file",
        "z": "b52d06897a68ca8c",
        "name": "",
        "filename": "/home/vicky/.node-red/projects/techscorangepi/cdn/monaco-editor/loader.min.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2000,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "7e6ffd352c94a590",
        "type": "function",
        "z": "b52d06897a68ca8c",
        "name": "function 13",
        "func": "let cdns = [\n    \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/loader.min.js\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor/editor.main.min.css\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor/editor.main.min.js\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor/editor.main.js\"\n]\nfor(let i=0; i<cdns.length;i++){\n    let filename = cdns[i].substring(cdns[i].lastIndexOf(\"/\")+1);\n    let cdn = {}\n    msg.url = cdns[i]\n    msg.filename = global.get(\"projectDir\")+'/cdn/monaco-editor/'+filename\n    node.send(msg)\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 640,
        "wires": [
            [
                "09474a3e7196c3d5"
            ]
        ]
    },
    {
        "id": "fe4a89a2881fa76f",
        "type": "debug",
        "z": "b52d06897a68ca8c",
        "name": "debug 140",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 720,
        "wires": []
    },
    {
        "id": "344901047d8e0c8d",
        "type": "inject",
        "z": "b52d06897a68ca8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 720,
        "wires": [
            [
                "7e6ffd352c94a590"
            ]
        ]
    },
    {
        "id": "9853f1497609b1d8",
        "type": "file",
        "z": "b52d06897a68ca8c",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1920,
        "y": 660,
        "wires": [
            [
                "c8e3a16e7225ca23"
            ]
        ]
    },
    {
        "id": "09474a3e7196c3d5",
        "type": "http request",
        "z": "b52d06897a68ca8c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1750,
        "y": 700,
        "wires": [
            [
                "fe4a89a2881fa76f",
                "9853f1497609b1d8"
            ]
        ]
    },
    {
        "id": "c63eb9419245c180",
        "type": "ui_template",
        "z": "b52d06897a68ca8c",
        "d": true,
        "group": "d229163f35bc3e17",
        "name": "",
        "order": 1,
        "width": 6,
        "height": 33,
        "format": "\n\t\t<div>\n\t\t\t<h2>Text editor</h2>\n\t\t\t<div id=\"container\" style=\"width: auto; height: 600px; border: 1px solid grey; background: rgb(62, 55, 55);\"></div>\n\t\t\t<div>\n\t\t\t\t<form action=\"\" method=\"get\" class=\"form\" id=\"openFile\">\n\t\t\t\t\t<div class=\"form\">\n\t\t\t\t\t  <input type=\"text\" name=\"filename\" id=\"filename\"  placeholder=\"FilePath\" required>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form\">\n\t\t\t\t\t  <input type=\"submit\" value=\"Open file\">\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<form action=\"\" method=\"get\" class=\"form\" id=\"sendFile\">\n\t\t\t\t\t<div class=\"form\">\n\t\t\t\t\t  <input type=\"submit\" value=\"Send file\">\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"render\">\n\t\t\t<h2>Render</h2>\n\t\t</div>\n\t\t\n\t\t<!-- OR ANY OTHER AMD LOADER HERE INSTEAD OF loader.js -->\n\t\t<script src=\"/node_modules/monaco-editor/min/vs/loader.js\"></script>\n\t\t<script>\n\t\t\t//require.config({ paths: { vs: '../node_modules/monaco-editor/min/vs' } });\n\t\t\tvar editor\n\t\t\t//require(['vs/editor/editor.main'], function () {\n\t\t\t\teditor = monaco.editor.create(document.getElementById('container'), {\n\t\t\t\t\tvalue: ['function x() {', '\\tconsole.log(\"Hello world!\");', '}'].join('\\n'),\n\t\t\t\t\tlanguage: 'javascript'\n\t\t\t\t});\n\t\t\t\tvar form = document.getElementById(\"openFile\");\n\t\t\t\tfunction loadFile(event){\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tvar filePath = (document.getElementById('filename').value)\n\t\t\t\t\tconsole.log(filePath)\n\t\t\t\t\t//http.get(filePath)\n\t\t\t\t\tPromise.all([xhr('http://192.168.1.21:1880/getFile',filePath)]).then(function (r) {\n\n\t\t\t\t\t\tconsole.log(r)\n\t\t\t\t\t\tif(r[0].response.substring(0,4).includes(\"Error\")){\n\t\t\t\t\t\t\talert(r[0].response)\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tvar modelFormat\n\t\t\t\t\t\t\tif(filePath.includes(\".js\")){\n\t\t\t\t\t\t\t\tvar script = document.createElement(\"script\")\n\t\t\t\t\t\t\t\tscript.textContent = r[0].response\n\t\t\t\t\t\t\t\tdocument.getElementById('render').insertAdjacentElement(\"beforeend\",script)\n\t\t\t\t\t\t\t\tmodelFormat = \"javascript\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(filePath.includes(\".html\")){\n\t\t\t\t\t\t\t\tconsole.log(\"in html\")\n\t\t\t\t\t\t\t\tif(filePath !== \"monaco-editor/samples/browser-amd-editor/index.html\"){\n\t\t\t\t\t\t\t\t\tdocument.getElementById('render').insertAdjacentHTML(\"beforeend\",r[0].response)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmodelFormat = \"html\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar originalTxt = r[0].responseText;\n\t\t\t\t\t\t\t//var modifiedTxt = r[1].responseText;\n\n\t\t\t\t\t\t\teditor.setModel(monaco.editor.createModel(originalTxt, modelFormat));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\t\n\t\t\t\tform.addEventListener('submit', loadFile);\n\t\t\t//});\n\n\t\t\tvar form = document.getElementById(\"sendFile\");\n\t\t\tform.addEventListener('submit', sendFile);\n\t\t\tfunction sendFile(event){\n\t\t\t\tevent.preventDefault();\n\t\t\t\tconsole.log(\"coucou\")\n\t\t\t\tvar filePath = (document.getElementById('filename').value)\n\t\t\t\tvar value = editor.getValue()\n\t\t\t\txhr('http://192.168.1.21:1880/postFile',JSON.stringify({\"filePath\":filePath, 'value': value})).then((r) => {\n\t\t\t\t\tconsole.log(r.response)\n\t\t\t\t\tif(r.response.includes(\"Error\")){\n\t\t\t\t\t\talert(r.response)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\n\t\t\t\n\n\t\t</script>\n\t\t<script>\n\t\t\t\n\n\t\t\tfunction xhr(url,body) {\n\t\t\t\tvar req = null;\n\t\t\t\treturn new Promise(\n\t\t\t\t\tfunction (c, e) {\n\t\t\t\t\t\treq = new XMLHttpRequest();\n\t\t\t\t\t\t\n\t\t\t\t\t\treq.onreadystatechange = function () {\n\t\t\t\t\t\t\tif (req._canceled) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (req.readyState === 4) {\n\t\t\t\t\t\t\t\tif ((req.status >= 200 && req.status < 300) || req.status === 1223) {\n\t\t\t\t\t\t\t\t\tc(req);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\te(req);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treq.onreadystatechange = function () {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treq.open('POST', url, true);\n\t\t\t\t\t\treq.responseType = '';\n\t\t\t\t\t\tconsole.log(body)\n\t\t\t\t\t\treq.send(body);\n\t\t\t\t\t},\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\treq._canceled = true;\n\t\t\t\t\t\treq.abort();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t</script>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1880,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "29fc1c90f17c315e",
        "type": "ui_template",
        "z": "b52d06897a68ca8c",
        "d": true,
        "group": "297b1964920fbcef",
        "name": "Load local cdn",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<script src=\"/cdn/monaco-editor/loader.min.js\"></script>\n<script src=\"/cdn/monaco-editor/editor.main.min.js\"></script>\n<script src=\"/cdn/monaco-editor/editor.main.min.css\"></script>\n<script src=\"/cdn/monaco-editor/editor.main.js\"></script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1640,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4d9c289e14ba42d6",
        "type": "comment",
        "z": "b52d06897a68ca8c",
        "name": "Launch code editor on boot",
        "info": "",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "217704d4bcad8509",
        "type": "debug",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 140,
        "wires": []
    },
    {
        "id": "59676d069a581d48",
        "type": "function",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "name": "function 4",
        "func": "var lines = msg.payload.split('\\n')\nvar connections = []\nfor (let index = 1; index < lines.length-1; index++) {\n    const fields = lines[index];\n    let fieldsA = fields.split(' ')\n    for (let j = 0; j < fieldsA.length; j++) {\n        if(fieldsA[j] === \"\" && fieldsA[j+1] === \"\"){\n            fieldsA.splice(j,1)\n            j--\n        };\n        if(fieldsA[j] !== \"\" && fieldsA[j + 1] !== \"\"){\n            fieldsA[j] = fieldsA[j] + ' ' + fieldsA[j+1]\n            fieldsA.splice(j+1, 1)\n        }\n    }\n    let connection = {}\n    let cleanConnection = fieldsA.filter(field => { return field !== \"\" })\n    if (cleanConnection[0] === \"*\"){\n        connection.icon_name = \"fa-solid fa-wifi\"\n        cleanConnection.splice(0,1)\n    }\n    connection.BSSID = cleanConnection[0]\n    connection.SSID = cleanConnection[1]\n    connection.mode = cleanConnection[2]\n    connection.chan = cleanConnection[3]\n    connection.rate = cleanConnection[4] + ' ' + cleanConnection[5]\n    connection.signal = cleanConnection[6]\n    connection.bars = cleanConnection[7]\n    connection.security = [cleanConnection[8],cleanConnection[9]]\n    //For the lsit node\n    connection.title = connection.SSID\n    connection.description = connection.signal\n    connection.menu = [\"Connect\"]\n    connections.push(connection)\n    \n}\nmsg.connexions = connections\nmsg.payload = connections\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "d1944d4ac30b8216",
                "c280ced4041a7ec7",
                "9b0b777f741c8465"
            ]
        ]
    },
    {
        "id": "a97adb91c59c3879",
        "type": "inject",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "fbe6a4c43eea3e9a"
            ]
        ]
    },
    {
        "id": "c280ced4041a7ec7",
        "type": "ui_list",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "group": "1588cad9498681c1",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "lineType": "two",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 690,
        "y": 160,
        "wires": [
            [
                "a24271ceb763c696",
                "aa1e2348a08323c8"
            ]
        ]
    },
    {
        "id": "60f468b672d670a2",
        "type": "ui_button",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "name": "",
        "group": "1588cad9498681c1",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-regular fa-rotate-right",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "fbe6a4c43eea3e9a"
            ]
        ]
    },
    {
        "id": "fbe6a4c43eea3e9a",
        "type": "exec",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "command": "nmcli dev wifi",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 330,
        "y": 180,
        "wires": [
            [
                "59676d069a581d48"
            ],
            [],
            []
        ]
    },
    {
        "id": "a24271ceb763c696",
        "type": "exec",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "command": "nmcli --ask dev wifi connect ",
        "addpay": "payload.SSID",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "217704d4bcad8509",
                "fac21ad93363355e"
            ],
            [
                "217704d4bcad8509",
                "fac21ad93363355e"
            ],
            [
                "217704d4bcad8509",
                "fac21ad93363355e"
            ]
        ]
    },
    {
        "id": "aa1e2348a08323c8",
        "type": "debug",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 120,
        "wires": []
    },
    {
        "id": "9b0b777f741c8465",
        "type": "debug",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 100,
        "wires": []
    },
    {
        "id": "fac21ad93363355e",
        "type": "ui_template",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "group": "1588cad9498681c1",
        "name": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\"></div>\n<script>\n    (function(scope) {\n  scope.$watch('msg', function(msg) {\n    if (msg) {\n      // Do something when msg arrives\n      //$(\"#my_\"+scope.$id).html('<div>'+msg.payload+'</div>');\n      $(\"#my_\"+scope.$id).append('<p>'+msg.payload+'</p>')\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1360,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d1944d4ac30b8216",
        "type": "json",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 200,
        "wires": [
            [
                "fac21ad93363355e"
            ]
        ]
    },
    {
        "id": "9cd7edf4b42d2e4f",
        "type": "comment",
        "z": "cda9a4b5dd195f96",
        "g": "03423aacbab5be01",
        "name": "Connections",
        "info": "",
        "x": 150,
        "y": 100,
        "wires": []
    },
    {
        "id": "c097c68981d496a9",
        "type": "ui_form",
        "z": "cda9a4b5dd195f96",
        "g": "9dfbbd3b29955812",
        "name": "",
        "label": "",
        "group": "22bc3a7da6967b57",
        "order": 10,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "URL",
                "value": "url",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Name & destination",
                "value": "path",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "url": "",
            "path": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "ac74bc9e3ee12790"
            ]
        ]
    },
    {
        "id": "6791a042e8c651aa",
        "type": "debug",
        "z": "cda9a4b5dd195f96",
        "g": "9dfbbd3b29955812",
        "name": "debug 144",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 380,
        "wires": []
    },
    {
        "id": "3a786062ccb8d471",
        "type": "exec",
        "z": "cda9a4b5dd195f96",
        "g": "9dfbbd3b29955812",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "6791a042e8c651aa",
                "443842786d200b1a"
            ],
            [
                "6791a042e8c651aa",
                "443842786d200b1a"
            ],
            [
                "6791a042e8c651aa",
                "443842786d200b1a"
            ]
        ]
    },
    {
        "id": "443842786d200b1a",
        "type": "ui_toast",
        "z": "cda9a4b5dd195f96",
        "g": "9dfbbd3b29955812",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 920,
        "y": 420,
        "wires": []
    },
    {
        "id": "ac74bc9e3ee12790",
        "type": "change",
        "z": "cda9a4b5dd195f96",
        "g": "9dfbbd3b29955812",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"curl \" & payload.url & \" --output \" & payload.path",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 380,
        "wires": [
            [
                "156c345e5a568130",
                "3a786062ccb8d471"
            ]
        ]
    },
    {
        "id": "156c345e5a568130",
        "type": "debug",
        "z": "cda9a4b5dd195f96",
        "g": "9dfbbd3b29955812",
        "name": "debug 145",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 520,
        "wires": []
    },
    {
        "id": "7d47eb7deca75274",
        "type": "comment",
        "z": "cda9a4b5dd195f96",
        "g": "9dfbbd3b29955812",
        "name": "Download file with  pi on pi",
        "info": "",
        "x": 190,
        "y": 320,
        "wires": []
    },
    {
        "id": "eaf1ee88e00d9406",
        "type": "debug",
        "z": "cda9a4b5dd195f96",
        "g": "3769455bbb18be83",
        "name": "debug 167",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 840,
        "wires": []
    },
    {
        "id": "dc3d51f8ecedc5f1",
        "type": "comment",
        "z": "cda9a4b5dd195f96",
        "g": "3769455bbb18be83",
        "name": "Download file with  pi on pi",
        "info": "",
        "x": 210,
        "y": 640,
        "wires": []
    },
    {
        "id": "4c6c3c86226eb43e",
        "type": "ui_upload",
        "z": "cda9a4b5dd195f96",
        "g": "3769455bbb18be83",
        "group": "272472e074141e70",
        "title": "upload",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 5,
        "chunk": 256,
        "transfer": "binary",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "a6a82660b6ace126"
            ]
        ]
    },
    {
        "id": "a6a82660b6ace126",
        "type": "join",
        "z": "cda9a4b5dd195f96",
        "g": "3769455bbb18be83",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 250,
        "y": 760,
        "wires": [
            [
                "8259d817ba4c9098"
            ]
        ]
    },
    {
        "id": "8259d817ba4c9098",
        "type": "file",
        "z": "cda9a4b5dd195f96",
        "g": "3769455bbb18be83",
        "name": "",
        "filename": "\"home/perseigneUF/Downloads/\" & file.name",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 620,
        "y": 900,
        "wires": [
            [
                "eaf1ee88e00d9406"
            ]
        ]
    },
    {
        "id": "a104ed35b61b7c4a",
        "type": "ui_template",
        "z": "cda9a4b5dd195f96",
        "group": "18cdadd15d72d136",
        "name": "OCR",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<script>\n    function progressUpdate(packet){\n\tvar log = document.getElementById('log');\n\n\tif(log.firstChild && log.firstChild.status === packet.status){\n\t\tif('progress' in packet){\n\t\t\tvar progress = log.firstChild.querySelector('progress')\n\t\t\tprogress.value = packet.progress\n\t\t}\n\t}else{\n\t\tvar line = document.createElement('div');\n\t\tline.status = packet.status;\n\t\tvar status = document.createElement('div')\n\t\tstatus.className = 'status'\n\t\tstatus.appendChild(document.createTextNode(packet.status))\n\t\tline.appendChild(status)\n\n\t\tif('progress' in packet){\n\t\t\tvar progress = document.createElement('progress')\n\t\t\tprogress.value = packet.progress\n\t\t\tprogress.max = 1\n\t\t\tline.appendChild(progress)\n\t\t}\n\n\n\t\tif(packet.status == 'done'){\n\t\t\tvar pre = document.createElement('pre')\n\t\t\tpre.appendChild(document.createTextNode(packet.data.data.text))\n\t\t\tline.innerHTML = ''\n\t\t\tline.appendChild(pre)\n\n\t\t}\n\n\t\tlog.insertBefore(line, log.firstChild)\n\t}\n}\n\nasync function recognizeFile(file) {\n\tdocument.querySelector(\"#log\").innerHTML = ''\n  const lang = document.querySelector('#langsel').value\n  const data = await Tesseract.recognize(file, lang, {\n    logger: progressUpdate,\n  });\n  progressUpdate({ status: 'done', data });\n}\n</script>\n<select id=\"langsel\" onchange=\"window.lastFile && recognizeFile(window.lastFile)\">\n<option value='afr'     > Afrikaans             </option>\n<option value='ara'     > Arabic                </option>\n<option value='aze'     > Azerbaijani           </option>\n<option value='bel'     > Belarusian            </option>\n<option value='ben'     > Bengali               </option>\n<option value='bul'     > Bulgarian             </option>\n<option value='cat'     > Catalan               </option>\n<option value='ces'     > Czech                 </option>\n<option value='chi_sim' > Chinese               </option>\n<option value='chi_tra' > Traditional Chinese   </option>\n<option value='chr'     > Cherokee              </option>\n<option value='dan'     > Danish                </option>\n<option value='deu'     > German                </option>\n<option value='ell'     > Greek                 </option>\n<option value='eng'     selected> English                </option>\n<option value='enm'     > English (Old)         </option>\n<option value='meme'     > Internet Meme                </option>\n<option value='epo'     > Esperanto             </option>\n<option value='epo_alt' > Esperanto alternative </option>\n<option value='est'     > Estonian              </option>\n<option value='eus'     > Basque                </option>\n<option value='fin'     > Finnish               </option>\n<option value='fra'     > French                </option>\n<option value='frk'     > Frankish              </option>\n<option value='frm'     > French (Old)          </option>\n<option value='glg'     > Galician              </option>\n<option value='grc'     > Ancient Greek         </option>\n<option value='heb'     > Hebrew                </option>\n<option value='hin'     > Hindi                 </option>\n<option value='hrv'     > Croatian              </option>\n<option value='hun'     > Hungarian             </option>\n<option value='ind'     > Indonesian            </option>\n<option value='isl'     > Icelandic             </option>\n<option value='ita'     > Italian               </option>\n<option value='ita_old' > Italian (Old)         </option>\n<option value='jpn'     > Japanese              </option>\n<option value='kan'     > Kannada               </option>\n<option value='kor'     > Korean                </option>\n<option value='lav'     > Latvian               </option>\n<option value='lit'     > Lithuanian            </option>\n<option value='mal'     > Malayalam             </option>\n<option value='mkd'     > Macedonian            </option>\n<option value='mlt'     > Maltese               </option>\n<option value='msa'     > Malay                 </option>\n<option value='nld'     > Dutch                 </option>\n<option value='nor'     > Norwegian             </option>\n<option value='pol'     > Polish                </option>\n<option value='por'     > Portuguese            </option>\n<option value='ron'     > Romanian              </option>\n<option value='rus'     > Russian               </option>\n<option value='slk'     > Slovakian             </option>\n<option value='slv'     > Slovenian             </option>\n<option value='spa'     > Spanish               </option>\n<option value='spa_old' > Old Spanish           </option>\n<option value='sqi'     > Albanian              </option>\n<option value='srp'     > Serbian (Latin)       </option>\n<option value='swa'     > Swahili               </option>\n<option value='swe'     > Swedish               </option>\n<option value='tam'     > Tamil                 </option>\n<option value='tel'     > Telugu                </option>\n<option value='tgl'     > Tagalog               </option>\n<option value='tha'     > Thai                  </option>\n<option value='tur'     > Turkish               </option>\n<option value='ukr'     > Ukrainian             </option>\n<option value='vie'     > Vietnamese            </option>\n</select>\n\n<button onclick=\"recognizeFile('../../tests/assets/images/simple.png')\">Sample Image</button>\n<input type=\"file\" onchange=\"recognizeFile(window.lastFile=this.files[0])\">\n\n<div id=\"log\"></div>\n\n\n<style>\n    #log>div {\n        color: white;\n        border-top: 1px solid #dadada;\n        padding: 9px;\n        display: flex;\n    }\n\n    #log>div:first-child {\n        border: 0;\n    }\n\n\n    .status {\n        min-width: 250px;\n    }\n\n    #log {\n        border: 1px solid #dadada;\n        padding: 10px;\n        margin-top: 20px;\n        min-height: 100px;\n    }\n\n    body {\n        font-family: sans-serif;\n        margin: 30px;\n    }\n\n    progress {\n        display: block;\n        width: 100%;\n        transition: opacity 0.5s linear;\n    }\n\n    progress[value=\"1\"] {\n        opacity: 0.5;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "b697053add0e9fa5",
        "type": "ui_template",
        "z": "cda9a4b5dd195f96",
        "group": "297b1964920fbcef",
        "name": "Load local cdn",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<script src=\"/cdn/tesseract/tesseract.min.js\"></script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 180,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "06993af6cbe9302f",
        "type": "inject",
        "z": "cda9a4b5dd195f96",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1160,
        "wires": [
            [
                "802e46c42ca005ea"
            ]
        ]
    },
    {
        "id": "802e46c42ca005ea",
        "type": "function",
        "z": "cda9a4b5dd195f96",
        "name": "function 19",
        "func": "let cdns = [\n    \"https://unpkg.com/tesseract.js@4.0.0/dist/tesseract.min.js\"\n]\nfor(let i=0; i<cdns.length;i++){\n    let filename = cdns[i].substring(cdns[i].lastIndexOf(\"/\")+1);\n    let cdn = {}\n    msg.url = cdns[i]\n    msg.filename = global.get(\"projectDir\")+'/cdn/tesseract/'+filename\n    node.send(msg)\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1160,
        "wires": [
            [
                "04615031c7f74fc6"
            ]
        ]
    },
    {
        "id": "04615031c7f74fc6",
        "type": "http request",
        "z": "cda9a4b5dd195f96",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "0d35e9f522a4dc93"
            ]
        ]
    },
    {
        "id": "0d35e9f522a4dc93",
        "type": "file",
        "z": "cda9a4b5dd195f96",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 800,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "518b12c441185f2a",
        "type": "comment",
        "z": "cda9a4b5dd195f96",
        "name": "Get the cdn",
        "info": "",
        "x": 190,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0a8828d00519de30",
        "type": "comment",
        "z": "cda9a4b5dd195f96",
        "name": "Load cdn in the header of the app. No choice actually with template node",
        "info": "",
        "x": 360,
        "y": 1240,
        "wires": []
    },
    {
        "id": "1c8a38ef422e6f80",
        "type": "ui_worldmap",
        "z": "11571c3a0d218a3e",
        "group": "da3770b5c883bcfa",
        "order": 1,
        "width": "50",
        "height": "30",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 520,
        "y": 200,
        "wires": []
    },
    {
        "id": "a9b6b69e537a473f",
        "type": "comment",
        "z": "11571c3a0d218a3e",
        "name": "Here we handle stuff for the wordlmap",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "967f7c93b79bb2c0",
        "type": "inject",
        "z": "2acb5f6dedaa6446",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "c028d17efd4e0bce"
            ]
        ]
    },
    {
        "id": "8ddfbb0f430b83fc",
        "type": "subflow:c38e097dab2ac14e",
        "z": "2acb5f6dedaa6446",
        "name": "",
        "x": 310,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "2ec11d4fd27db3e5",
        "type": "subflow:54526e03f83ee9e5",
        "z": "2acb5f6dedaa6446",
        "name": "",
        "x": 310,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "c028d17efd4e0bce",
        "type": "subflow:e0b88d23ec56febb",
        "z": "2acb5f6dedaa6446",
        "name": "",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "63c20b8843d2d499"
            ]
        ]
    },
    {
        "id": "63c20b8843d2d499",
        "type": "debug",
        "z": "2acb5f6dedaa6446",
        "name": "debug 170",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 300,
        "wires": []
    },
    {
        "id": "7193a4bdc416d737",
        "type": "http in",
        "z": "9ede64b79636f3da",
        "name": "",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "32dc87dcf31c12f0",
                "2825793943e079d7"
            ]
        ]
    },
    {
        "id": "32dc87dcf31c12f0",
        "type": "debug",
        "z": "9ede64b79636f3da",
        "name": "debug 168",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 100,
        "wires": []
    },
    {
        "id": "c318ed42d6586b80",
        "type": "http in",
        "z": "9ede64b79636f3da",
        "name": "",
        "url": "/test",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "5f616e0552374e9b",
                "dea9274b5514b71b"
            ]
        ]
    },
    {
        "id": "5f616e0552374e9b",
        "type": "debug",
        "z": "9ede64b79636f3da",
        "name": "debug 169",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 200,
        "wires": []
    },
    {
        "id": "2825793943e079d7",
        "type": "http response",
        "z": "9ede64b79636f3da",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 400,
        "y": 160,
        "wires": []
    },
    {
        "id": "dea9274b5514b71b",
        "type": "http response",
        "z": "9ede64b79636f3da",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 340,
        "y": 300,
        "wires": []
    }
]