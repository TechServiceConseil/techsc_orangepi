[
    {
        "id": "58612799aa277ac1",
        "type": "tab",
        "label": "Installation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "57297ea9585b5f93",
        "type": "tab",
        "label": "Dahsboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2b674150e0c6799d",
        "type": "tab",
        "label": "JSONata Functions",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c464cce32785f35b",
        "type": "tab",
        "label": "Camera and Mic",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28793e94f444a9a6",
        "type": "tab",
        "label": "Sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4318d1d99e7fe2da",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ebafe26feeec49ee",
        "type": "tab",
        "label": "3D view",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b52d06897a68ca8c",
        "type": "tab",
        "label": "Text editor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5030d00b88df4be5",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "1c3881de7afa11d5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 320,
                "wires": [
                    {
                        "id": "1c3881de7afa11d5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "test",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a85c93b74d9f6110",
        "type": "subflow",
        "name": "Manage npm package",
        "info": "",
        "category": "Administration",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "65a17d791a657925"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2880,
                "y": 640,
                "wires": [
                    {
                        "id": "f0c7f88db9a0a39f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "path",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "packageName",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-inbox",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action",
                "type": "str",
                "value": "install",
                "ui": {
                    "icon": "font-awesome/fa-plus-circle",
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Install"
                                },
                                "v": "install"
                            },
                            {
                                "l": {
                                    "en-US": "Uninstall"
                                },
                                "v": "uninstall"
                            },
                            {
                                "l": {
                                    "en-US": "Check"
                                },
                                "v": "list --depth=0"
                            },
                            {
                                "l": {
                                    "en-US": "Check with dependencies"
                                },
                                "v": "list"
                            }
                        ]
                    }
                }
            },
            {
                "name": "save",
                "type": "bool",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-save",
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "saveInDependencies",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "removeIfVulnerabilityFound",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "safeMode",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#A6BBCF",
        "inputLabels": [
            "{path, packageName}"
        ],
        "outputLabels": [
            "payload and log"
        ]
    },
    {
        "id": "accc01d78c5b390d",
        "type": "group",
        "z": "58612799aa277ac1",
        "name": "1st step",
        "style": {
            "label": true
        },
        "nodes": [
            "099f6275bdac6398",
            "ac9878e5150ff640",
            "b5969e7614beb79c",
            "61885aca941ee99a",
            "3b986ba732de0ec3",
            "feb6423ccda74b39",
            "09da2f49e5f73653",
            "1a0ee4d754397b65",
            "90e07e991d03a7f5",
            "b65237e8d3b302fa",
            "398286c135d72f4e",
            "a486d072b002a4d8",
            "6e315e8005f93db6",
            "725f5a0cbb20fa86",
            "2d811df439c064d7",
            "a31ed93da07587de",
            "26858a679202fcc1",
            "f0aa98ca142d18ba"
        ],
        "x": 54,
        "y": 39,
        "w": 2072,
        "h": 282
    },
    {
        "id": "03423aacbab5be01",
        "type": "group",
        "z": "57297ea9585b5f93",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "217704d4bcad8509",
            "59676d069a581d48",
            "a97adb91c59c3879",
            "c280ced4041a7ec7",
            "60f468b672d670a2",
            "fbe6a4c43eea3e9a",
            "a24271ceb763c696",
            "aa1e2348a08323c8",
            "9b0b777f741c8465",
            "fac21ad93363355e",
            "d1944d4ac30b8216",
            "9cd7edf4b42d2e4f"
        ],
        "x": 34,
        "y": 19,
        "w": 1392,
        "h": 182
    },
    {
        "id": "b8f8611163248bdd",
        "type": "group",
        "z": "57297ea9585b5f93",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "9910400a70e3748f",
            "cfef9b965281e35e",
            "3879658cfc8f39a6",
            "99e6f7120bc13cf8",
            "5dcd97a52a9af266",
            "a46c53a4f25125bf",
            "ec2f91b7c82fe538"
        ],
        "x": 34,
        "y": 239,
        "w": 1032,
        "h": 182
    },
    {
        "id": "18e263da0ce661a2",
        "type": "group",
        "z": "57297ea9585b5f93",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "f899bfee50c2c5f6",
            "5fe632846e1697cf",
            "8db83594bc604f4d",
            "684d60b75c1cc9da",
            "44c756161c28b0e2",
            "8b3802d31611155a",
            "7f82046bd9d0371b",
            "05636ee319db6f24",
            "dc5517b9df8183b5",
            "0e66b4ca4d045ec1",
            "3d8c166dafde23ec",
            "07b4fddee5d12ac2",
            "733d567b31de5df5",
            "dcbb085ee2ecca8b",
            "628dfb2257610e39",
            "5e50781edb13f822",
            "c0b40a7272cfab76",
            "372c7037c1474f67",
            "9478cafaace3eda1",
            "5e8044892e24ec72",
            "96f4d0b1004067bd",
            "5c8e04ee1e796b6d",
            "09f1ac7ac86f2fa8",
            "dc269403be70248b",
            "d7cefaf9832ce681",
            "2d81644308115d7d",
            "127cf7d29cea1234",
            "668842fefb1ad86b",
            "c13e09dff09adfbd",
            "5a947aacab2c4eba",
            "e481703bc59b4c72",
            "9c8aca4bedc48d5e",
            "7d681acadaecfb5f",
            "16bce161060dd6ed",
            "3554dd2e300a186d",
            "1590d913477ecb52",
            "6b54aac46cb4c9b3",
            "dff8087ee587c923",
            "265694c368031b88",
            "3b9751a158948df4",
            "42bb49f4356c0595",
            "447f88e0a835b97a",
            "acf896f91e62ebb9",
            "be0d1711cdc49ac1",
            "11735e05573fb370",
            "aa17940305d40738",
            "d9210aa9864f709a",
            "9c223c328c2c1229",
            "cac216a938770ad4",
            "40fcc77c45bef21d",
            "e34bac8166d30631",
            "4e85502b0cdbb08b",
            "9d9d7260b0dc6059",
            "705b4607cb4e54cf",
            "53590d1add8b6432",
            "e0b42ba5f51af29d",
            "707a42c2835a3c14",
            "f214607e192146ac",
            "b710b47357afff69",
            "2e0f75ce20fba878",
            "11024c778cd30379",
            "e709214485f5f8dd",
            "6a25e18d8a8a5346",
            "e84e8c0191c253f9",
            "5dd43c642137b6b6",
            "e4c1887aa955a2ec",
            "e2c596f862f807c1",
            "7f2f743ebaeb222d",
            "6b4a9b0521c14524",
            "d7280d184dc694b7",
            "b3a2db7da76826cc",
            "acb41c72b270cbac",
            "a0aab47871bf4d0e",
            "0a8c19f4df98784d",
            "41b1f0df6391aabf",
            "f4150bd9112e79d5",
            "9e39d1b269bca6f1",
            "5daf26229a34ec6d",
            "af47437bc74e05a2",
            "a046801adbd525d4",
            "0675a67dbf5f226d",
            "74d28e415cac5e4b",
            "049914dc3aa6e18a",
            "6acb2b994b6e860f",
            "f6930578ff860b22",
            "d0a82e3544f7a8b0",
            "fbb4165b4fadc15a",
            "a23460e2039e2240",
            "f7e50795bbbe828e",
            "f8cc71cc05ed9b0c",
            "0a9601a0b978d84a",
            "c3e5157c333c3465",
            "66bf2097b327336e",
            "cfe3b14e2bddbf6a",
            "ea2b5f79579f1d4a",
            "81e980f5c7b5363f",
            "7c99e16850770331",
            "816b0666cf836929",
            "8a3271e120fc0949",
            "c66ed3dda5290e99",
            "c377f1e581915fd5",
            "1ac64cb8c2b56f2d",
            "74dc2426dfad908d",
            "b0e63695bcd5c315",
            "ff2965f7510c868d",
            "b3b58ad074a2b566",
            "baa2cf368634c41f",
            "dcdd569d049123a4",
            "23e2f51aa5001862",
            "9a99865feeda8c41",
            "9a24a7fd6de2c5f3",
            "af71c28ef446236c",
            "28f99a18b712b8c7",
            "c2e0b987362039af",
            "ef08ad9ecb7fca29",
            "ec3f6ba6983f80ae",
            "1f43d49576bb375f",
            "1961a1e8fed2c784",
            "1b86a3e86f103adf",
            "8f21bd4ae9af0a4e",
            "4cc671b399e9511e",
            "19870d67117f182f",
            "4744804d51c8767e",
            "2490e2898b93d57a",
            "9f9aa054ed5b3070",
            "bb51e76e19282ad0",
            "fbd8b34ce62e5998",
            "3232e7606df8c0a1",
            "f081cb68bd6a63b6",
            "08717e5d7a7b1e2d",
            "43c0975e7bb96e1a",
            "0efe17d66efb0d0d"
        ],
        "x": 24,
        "y": 459,
        "w": 3568,
        "h": 2508
    },
    {
        "id": "46c394b9fe31938d",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "65be65f0c18bde6c",
            "8853f4539368887d",
            "d35856b40d4ffe51",
            "15fe6a9b748a6092",
            "5971d165d1b8a667",
            "0893c7f837f491cd",
            "55298a4a8bc38ec7",
            "15cbe60d4ffff951",
            "e529a5508c89fa15",
            "fe7422360750cb6c",
            "fb2f5a5457cc1c7b",
            "030fec169548bea3",
            "b8de4704a104b73c",
            "dcf2c5b5ac2dd430",
            "cfd60e7ccea45963",
            "91f62606491c9d51",
            "e4f8e748553849f6",
            "67d3b5ce22f3522d",
            "fc628bbe4830e99a",
            "be19391959d36958",
            "0cea6e3b47383061",
            "d72a687de4c05810",
            "cb5d047df11119e7",
            "b59efcd9c69b3c8a",
            "a3374e50370878b6",
            "de1fd53ecadbdd70"
        ],
        "x": 54,
        "y": 4039,
        "w": 1312,
        "h": 622
    },
    {
        "id": "14bc35a7e871612e",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Aggregation functions",
        "style": {
            "label": true
        },
        "nodes": [
            "7f7a4f9ed924376d",
            "01f76c339f4adbd0",
            "156d2db7093d7558",
            "081cd34d6d10eff0",
            "199fed429d430789",
            "2f9225a89d7fc482",
            "4db6caf373859923",
            "e484adc4ab3f4dfe",
            "599ebbfcc3bfb18c",
            "af16cf6a74150575",
            "b40ecdc26eb65a87",
            "c542a10e1e9711be"
        ],
        "x": 634,
        "y": 59
    },
    {
        "id": "bd78a6345689686e",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Numeric functions",
        "style": {
            "label": true
        },
        "nodes": [
            "a30467908fac9463",
            "fc277a1902454d3c",
            "7224275fee07915e",
            "f6c9478912e95bc4",
            "48b06fdef4c9ffc7",
            "02cf895c04cc2d17",
            "8cd41f907d7b91e1",
            "5d35112b0d7ffeb0",
            "35d492f50182f0e9",
            "1b8e6db00e94f577",
            "50ee5beef4616939",
            "cb3905a7fc7807dc",
            "b784ce33202f9e4a",
            "2b8feafd3ebed3db",
            "1af0b15b623b4243",
            "5f58f7b332bc5032",
            "6a2a296d28e805e8",
            "27784537ed674d95",
            "46d1ce782ac05500",
            "a1007695caca77de",
            "f5a7b9ba44d6da4f",
            "f0854f7725cd1e0a",
            "7cd53419b0c387ef",
            "fcea2e9a5a9a9a31",
            "0e87c5fd5d165065",
            "a58db5b349b23760",
            "cc2aa57778a71052",
            "d225d4b187f80ae9",
            "cd2f7b9ece57ec42",
            "da137d0fda54aa1d",
            "bcc10f8b59b05223",
            "4aa9214f104589e5",
            "68faa6604649be08",
            "c879b13b62b7e9e9",
            "46054494447c8ae2",
            "e224ce9d130829a1"
        ],
        "x": 14,
        "y": 939
    },
    {
        "id": "ef756230b8be8f60",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata String functions",
        "style": {
            "label": true
        },
        "nodes": [
            "3cc6261891386b5f",
            "8e042b0206d96ec3",
            "b5288005cfaed881",
            "c4e236b5f403ca46",
            "139d3d075aef541b",
            "97198c59935dad84",
            "4d7f61e7faedcb5a",
            "e48f9f8fb961a5d6",
            "66744dce571a09f0",
            "1cc1025e35c9a45f",
            "0778494e0323db2d",
            "f30e4fadc037c830",
            "3079704ac5de15ab",
            "8a34220c1cf0ddf2",
            "721d1f7a9c3c34ad",
            "ac702313720942fd",
            "20a8bff4c82dc0a6",
            "5358376cf87433d3",
            "fd1ca4d65201e56e",
            "1597936a4dd07adc",
            "bc6a61999fd08781",
            "bc6b032b788377d5",
            "1c0fdc0f44e2d65d",
            "f0028c6d46f58225",
            "634bff34b4bfa755",
            "471d0565d8107992",
            "aaf9bfbca7e66685",
            "1422679d35d613e6",
            "15f7d0253372dacc",
            "3578911993d1359b",
            "0ad7bc5dbbb01e64",
            "12bf1c0706c42cd9",
            "382e989d6beed2b9",
            "6032d7a86bd608af",
            "9e39dce96c0e40ba",
            "ceaf6f20ba283064",
            "6a216142b72c7570",
            "b191f4f849f6932b",
            "a634125d8a135739",
            "03ae99be7404fdd5",
            "ed05c5a681fd1709",
            "72ab71f8ff083acd",
            "f6824991eb4a71e6",
            "7256b2d99c71abb2",
            "280344adbf650555",
            "ed2e6980f986b9ae",
            "8ac685159923c118",
            "fee84a10519aa421",
            "14a8c5089653d59f",
            "58147d798906386f",
            "37889b302715c27e",
            "6f8cef3d757675b7",
            "98056fd4c8ea54b0",
            "265d1b2dc6aae07a",
            "fdccd987154c9d12",
            "aea93a05d365da9c",
            "251698b309d07a7e",
            "faad7e5e44d62653",
            "d13dbe29814dadd4",
            "e8d3957524002c5b",
            "85f562c1f72f7317",
            "2587c0a4b7cf100b",
            "78900f26fea3faf7"
        ],
        "x": 14,
        "y": 39
    },
    {
        "id": "7f9221a083cba77c",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Boolean functions",
        "style": {
            "label": true
        },
        "nodes": [
            "e349d1491539c726",
            "4253c825027547ad",
            "6bc8446341b4b5f2",
            "1725374f271e4efc",
            "ba23fe1ffa16ed14",
            "377b870d6377fa6a",
            "db914e64bec8b614",
            "188fe1c2d2ebb8e3",
            "e6ab1014ef3d7b12"
        ],
        "x": 634,
        "y": 279
    },
    {
        "id": "340943aaa9afde77",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Array functions",
        "style": {
            "label": true
        },
        "nodes": [
            "f9c483f70a4914e0",
            "654c7ea2cc076b7d",
            "097dda9b77c22bbc",
            "6c7dcaa639c75761",
            "bb52ed5515e1600c",
            "39348bddd6cd6ea4",
            "6587273cf41528ac",
            "37bc59e118a6145b",
            "e4bc41c71f22c31c",
            "af1434a6c955ae35",
            "c19e927408c93b3c",
            "31e9ea391e2d85e1",
            "17602f594fda49bf",
            "09b2c334fbdb315e",
            "b73901b3c9abd775",
            "d1b7e717ae08481a",
            "9e8177571be8f99f",
            "8b10eec1d8499638",
            "3382776fb18d904d",
            "7159dde8aba9e05c",
            "da8f480b32e83de4"
        ],
        "x": 634,
        "y": 459
    },
    {
        "id": "c88dadefed23d4b9",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Date/Time functions",
        "style": {
            "label": true
        },
        "nodes": [
            "fd352b5e5dc6694b",
            "2df69d3de31443a9",
            "7270656ece6828a3",
            "5c92eeb77a6194d8",
            "a25502239ecce614",
            "74023126b34ed888",
            "cfed144c068126e1",
            "011afb255d074158",
            "027fa6ccac0cbc56",
            "c7751bd2f8c49d94",
            "e4cf415c1974fc31",
            "4c12d0e6c7d4268e"
        ],
        "x": 634,
        "y": 1259
    },
    {
        "id": "b9473f481d46341e",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Higher order functions",
        "style": {
            "label": true
        },
        "nodes": [
            "18d6a3564775eda6",
            "50eaf8e14a07f52a",
            "d5893c4cb59a4bdd",
            "36b74a0ba9d50269",
            "b82c63ced822b93b",
            "351f1fe279abfa7f",
            "ce71c4e4ac746a82",
            "5b3f848b04096e1c",
            "40b1d4409f6b8dd5",
            "9ad04f517b2aa836",
            "ec88ad1de0080364",
            "23811eafe28ed4b0"
        ],
        "x": 1254,
        "y": 59
    },
    {
        "id": "d4f828aaee7233fb",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Object functions",
        "style": {
            "label": true
        },
        "nodes": [
            "61eba193709b4747",
            "b81ac77059018d6a",
            "cae58acf1d4d93b0",
            "c0a1f8ffaea953f2",
            "51eb088026f66aa7",
            "4c8ea5fc5fa0df83",
            "6b58edf53c9aeb7e",
            "ccf9e24c2cfc12cf",
            "431b43d750db4608",
            "48f3baac75b8cb33",
            "802e2e41ec6aaa2d",
            "7d381368a9723eb3",
            "fc6db6f01385990e",
            "a8a96fff189b0f6a",
            "3a58277f580af7a4",
            "39dc8115391725fd",
            "6599d5d264063dd4",
            "b1aea701f0274f22",
            "8c5ea777d24b40b6",
            "a43595f67aa34ea0",
            "a89af6cedd3f2e0d",
            "5b772280cd54e62a",
            "f84533d7ab3f5a83",
            "6461cdef7011b35b",
            "988336dcd37a967f",
            "16d4c7d19f1d655b",
            "cfeb74d0e7f0153e",
            "9e99aca1b6592c26"
        ],
        "x": 634,
        "y": 799
    },
    {
        "id": "8cfbfd4b547ffaaa",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "eecacf4a1b7d3deb",
            "c412948805ae429d"
        ],
        "x": 54,
        "y": 2179,
        "w": 232,
        "h": 122
    },
    {
        "id": "3cea4fa4d7e4a894",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "0328ce0eff9e869c",
            "aaefab6005603b24",
            "80ba0fd3b11a4601",
            "4f403cc62cf4d850",
            "e7a9b0144a630427",
            "63a6196d3d87b2ea",
            "5bb3c3d459c6b692",
            "657bd285e9d8ebc6",
            "4bb9984255f0c91f",
            "aded2ddd2cf18168",
            "c026a51af0aa6b5a",
            "75ac1ca7fa413f61",
            "6c39d6ac8b53f3a2",
            "1b2b666738fe9f5b",
            "21d8261bc6d0272f",
            "9f6fc0bff70a90d9",
            "061dc4af9fb5dc61",
            "71e258007014ecb6",
            "aa980b1b7bf39673"
        ],
        "x": 48,
        "y": 2353,
        "w": 1438,
        "h": 1114
    },
    {
        "id": "bfc704b686cc3297",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "128ae6814df70dd8",
            "dd4242fd0fb59287",
            "ae59c916977de493",
            "d159f4f118348fa4",
            "c84ab6a104df0ac3",
            "d629ba9a12ac2bb4",
            "4a7ec91597ecd7f0",
            "bf11f93cb7d73fa1",
            "53f35663a44f527d",
            "f72a623702e9f368",
            "305f4811863bf516",
            "e6c1b0979a8651b6",
            "6e594e88a90c98c1",
            "859f7f3f76ccd945",
            "a432820c7d96bcf4",
            "dd5a7afc5410247a",
            "e51ad4b09d2bfe83",
            "ef0c3783383d6fd2",
            "633c0f96d16dedf3",
            "330fe8c90584f514",
            "1fc95f0261620c4b",
            "8cae742646b559cf",
            "ce93a5cfa3e54736",
            "96668f8c0144d462",
            "f856cdab579098d8",
            "c42712e6049f5aad",
            "592357dc91aa5e77",
            "15d7fcf601ffe933",
            "40f7e1e7c55cd034",
            "b654239533131b2e",
            "998bd941ca351b8b",
            "09315ad9c4c9f0a4",
            "ccb5547533791ab6",
            "b22e8c34e3c6174c",
            "9c30f180c779a0ae",
            "c5e7f851e0c4ab0e",
            "594b0945db5eebb9",
            "b9c63bad1142095d",
            "9cb86f66b820c14b",
            "6a86a59afad7a589",
            "52524af9a0d3c8f7",
            "630cc094f6d75424",
            "4fea3db2be1130a0",
            "8de176368996881d",
            "3f49a31fa4f700f6"
        ],
        "x": 54,
        "y": 1199,
        "w": 1552,
        "h": 922
    },
    {
        "id": "6bf4b4356282ce85",
        "type": "group",
        "z": "58612799aa277ac1",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "b117617ff4a68b12",
            "a25b0c8a58f57dee"
        ],
        "x": 94,
        "y": 2899,
        "w": 212,
        "h": 122
    },
    {
        "id": "0328ce0eff9e869c",
        "type": "group",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "897b32cd68564065",
            "66209d838052f00f",
            "ae5b0c3de2e9bfd3",
            "be2710e466f51db7",
            "a088d1fb929f2f52",
            "5f665af951315de1",
            "131e96d053c32f42",
            "4450469cda167fc0",
            "a3d878b06114da7b",
            "b95d724f0e0f91d0",
            "ffa58bf3e16ae1ed",
            "62e8d7523cb057be",
            "dc9cab5eed7cfd6e",
            "5a85bdc5d5537aeb",
            "297b840c8c33ad10",
            "2b32f4e6842f6e0f",
            "b52d0d7cbb9cdde2",
            "cfe6d4fd97bb1b1f"
        ],
        "x": 74,
        "y": 2379,
        "w": 1352,
        "h": 362
    },
    {
        "id": "c0b40a7272cfab76",
        "type": "group",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "style": {
            "stroke": "#d1b478",
            "label": true,
            "fill": "#532c2c"
        },
        "nodes": [
            "037c66ba96df20be",
            "be4aa8937a2551a3",
            "24099d8cac2ab795",
            "564ff8ef50de58b1",
            "4d39ba490ae7a81f",
            "06043ac62e7edf8e",
            "7de319477688b8ba",
            "dfd243663d89ff30",
            "e6cfcb3d10177c46",
            "7df4342477554fec",
            "e53439d570dffd07",
            "a3348e49115feabc",
            "83df3adbaa2a6c51",
            "285ddcd6faf866c9",
            "cc7f04658e10487c",
            "2c48e3b743c58dc6",
            "c8f6c212fc68f165",
            "560fe6956d93cb53",
            "b7249babe9ca16cc",
            "bdf43fa3a5a439e7",
            "ea6e70d0667d480d",
            "86cdf396ce6d4aa0",
            "dd42e2b99a2a7645",
            "18ecfed882d9cab8",
            "79291a7a1150f807",
            "1fbd8cc10ee44cd0",
            "961702918836aa4d",
            "b2b6c35ccfe6517f",
            "3ba29ad018e06586",
            "b8028a182f6e3883",
            "b4fc87ff7c293b7a",
            "041efdc800181680",
            "a49a58dcf5918f7a",
            "8a4fdf696c797978",
            "15f4a37073c29cdc",
            "7a3554e3063ac472",
            "fd4dd9381332bd43",
            "990a856009b4df1b",
            "7489632c2a204942",
            "6ac8777966c061e5",
            "55cc69056770aa9f",
            "a9bf38fc141961ae",
            "73cf18f32e5abc7b",
            "055a8ac1dad23671",
            "7b3dca1a87b0dc5e",
            "b88faf03b44d1c0a",
            "25e5be0676b5f6f8",
            "cbeb3dca73005cb3",
            "d67d684ecee6c676",
            "2c90c003888ef3a1",
            "6feb6980b1214cbf",
            "b24f311005810a61",
            "03c239aeca73f949",
            "3abd54eb14b681f8",
            "78a24a7adeabe9c3",
            "60ac4d280c89f4de",
            "9a3d1961c9c303cd",
            "bb05228eade21d1f",
            "4ad3e45a119c1ab8",
            "06b1faf353de60fa",
            "d93510c6fbb67516",
            "a48667c232bc72ea",
            "1fc0dce79a6feefe",
            "6a9fa0bd8fd2fe78",
            "df6c15d9807db302",
            "96d1beb6501d4661",
            "eeb33e9c9894d157",
            "ca1a3b161424e5e9",
            "04cf2cb39f05fbf5",
            "0bd48ea4562be240",
            "092dfa0718d148d9",
            "2e5405bc8896e802",
            "69abf9c7573503c3",
            "a6d16b412273335c",
            "ad653b64c5bc3d1c"
        ],
        "x": 1074,
        "y": 1459,
        "w": 2492,
        "h": 1142
    },
    {
        "id": "42bb49f4356c0595",
        "type": "group",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "style": {
            "stroke": "#d1b478",
            "label": true,
            "fill": "#532c2c"
        },
        "nodes": [
            "1955d97621c6194f",
            "fba7ea4f0c525b8f",
            "76b45b809532e499",
            "e9699e2f6a049fe7",
            "e0c099377c2c48d3",
            "0dd47cebafd78a73",
            "b73225bfdbae241a",
            "9fb37ef2271445f3",
            "a47933f23ee978d7",
            "aaea082df6e0d28e",
            "081925cde061cad5",
            "d6f838746286e467",
            "c295c8cbfb5211dc",
            "126bdc8d1fe884f0",
            "b6de463218f1e479",
            "2fe10cf77563c81c",
            "abb24d721e50e418",
            "c831be1d8aab6ac2",
            "5ab7478a90317b26",
            "f27df0d26aedf15c",
            "6f1bc1a7b9c9f095",
            "497be50704f809a8",
            "8cb281e27cb12913",
            "83dcd2bef897c63e",
            "bb973f9e1bbddecc",
            "e1b464488f392996",
            "2dae94e0a5a67ff8",
            "52b9b8c246361095",
            "07fdd76ed660d4e3",
            "052ce13702c43cdd",
            "833281452e6d2faa"
        ],
        "x": 1074,
        "y": 2639,
        "w": 2312,
        "h": 302
    },
    {
        "id": "aaefab6005603b24",
        "type": "group",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "83742d04b00d4962",
            "6b578c891d3ce9a6",
            "92943c50a2dfbfe6",
            "35b87e9a954c6937",
            "0234295ea7383535",
            "760badbe8e3ed936",
            "0fd64f1e6b088488",
            "8e6d3dcf7176f18d",
            "4604272727a07ff1",
            "644ae9c5869f20c3",
            "45e3a61c1354cb35",
            "71fc105a8df8e25c",
            "883411432449704e",
            "59b121e17efff7d2",
            "8cd4975e3213c86b",
            "2f1236dc863922a8",
            "edede2651c7d6258"
        ],
        "x": 74,
        "y": 3079,
        "w": 1052,
        "h": 362
    },
    {
        "id": "80ba0fd3b11a4601",
        "type": "group",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "f9f53b13488ebfc5",
            "281a060999216133"
        ],
        "x": 74,
        "y": 2759,
        "w": 212,
        "h": 122
    },
    {
        "id": "705b4607cb4e54cf",
        "type": "junction",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "53590d1add8b6432"
            ]
        ]
    },
    {
        "id": "53590d1add8b6432",
        "type": "junction",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "x": 2300,
        "y": 720,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "baa2cf368634c41f",
        "type": "junction",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "x": 480,
        "y": 1500,
        "wires": [
            [
                "1ac64cb8c2b56f2d",
                "cac216a938770ad4",
                "6b4a9b0521c14524"
            ]
        ]
    },
    {
        "id": "c2ab6d4c108e742b",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#3f4c42",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#3f4c42",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#3f4c42",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#627666",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#3f4c42",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1879b77ac8da62ed",
        "type": "ui_link",
        "name": "Text editor",
        "link": "http://192.168.1.21:8888/browser-amd-editor/",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 6
    },
    {
        "id": "8200fe949dc202c5",
        "type": "ui_link",
        "name": "Dolibarr",
        "link": "http://192.168.1.21:8300/",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 7
    },
    {
        "id": "55907cba27295a35",
        "type": "ui_link",
        "name": "Rhasspy",
        "link": "http://192.168.1.21:12101/",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 8
    },
    {
        "id": "65432b631f1a04d0",
        "type": "ui_link",
        "name": "Node-red",
        "link": "http://192.168.1.21:1880",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 9
    },
    {
        "id": "9d588d7b09cb17ab",
        "type": "ui_link",
        "name": "Link 10",
        "link": "http://192.168.1.21:1880/3DView",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 10
    },
    {
        "id": "6c866437b1f109a0",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "660f9ed8308b8e21",
        "type": "ui_tab",
        "name": "TmpTrash",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "485ce5b6904ff90c",
        "type": "ui_tab",
        "name": "Communication",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "63f90adc0c820cb7",
        "type": "ui_tab",
        "name": "Tâche de zone",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "223fe02f5c8e5bf5",
        "type": "ui_tab",
        "name": "Editor",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6aba98dd5df89ef3",
        "type": "ui_tab",
        "name": "3D view",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7bebf70e21c141dc",
        "type": "ui_tab",
        "name": "Text editor",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1588cad9498681c1",
        "type": "ui_group",
        "name": "Connections",
        "tab": "660f9ed8308b8e21",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": true,
        "className": ""
    },
    {
        "id": "a1efc069e293d845",
        "type": "ui_group",
        "name": "Terminal one shot",
        "tab": "660f9ed8308b8e21",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "297b1964920fbcef",
        "type": "ui_group",
        "name": "Terminal dynamique out of list",
        "tab": "6c866437b1f109a0",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "255455bc3795b06c",
        "type": "ui_group",
        "name": "Terminal dynamique in list",
        "tab": "6c866437b1f109a0",
        "order": 3,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e16baac817e17b4",
        "type": "ui_group",
        "name": "Terminal dynamique",
        "tab": "6c866437b1f109a0",
        "order": 2,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "10ad1fb7bcc90a34",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "63f90adc0c820cb7",
        "order": 1,
        "disp": true,
        "width": "40",
        "collapse": false,
        "className": ""
    },
    {
        "id": "219ad68d9fd685f8",
        "type": "ui_group",
        "name": "Default",
        "tab": "485ce5b6904ff90c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f47920dd7d4dc350",
        "type": "ui_group",
        "name": "Default",
        "tab": "63f90adc0c820cb7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d10294dd6b7b5321",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "223fe02f5c8e5bf5",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "c321b890973a1573",
        "type": "ui_group",
        "name": "3D view",
        "tab": "6aba98dd5df89ef3",
        "order": 1,
        "disp": true,
        "width": 50,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d229163f35bc3e17",
        "type": "ui_group",
        "name": "Text editor",
        "tab": "7bebf70e21c141dc",
        "order": 1,
        "disp": true,
        "width": 35,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5686ba0baf95769c",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 2,
        "width": 29,
        "height": 1
    },
    {
        "id": "39a237a40ac9fce6",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 3,
        "width": 29,
        "height": 1
    },
    {
        "id": "3e018f6bf8b8f7ac",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 4,
        "width": 29,
        "height": 1
    },
    {
        "id": "89ca0aced4765de4",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 5,
        "width": 29,
        "height": 1
    },
    {
        "id": "78beaf74a3dd1678",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 6,
        "width": 29,
        "height": 1
    },
    {
        "id": "ab9ce90cf8e7c7eb",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 7,
        "width": 29,
        "height": 1
    },
    {
        "id": "cb565fbeca93aeb9",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 8,
        "width": 29,
        "height": 1
    },
    {
        "id": "be8c4373661cc5ae",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 9,
        "width": 29,
        "height": 1
    },
    {
        "id": "58d2a3ed17170c8d",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 10,
        "width": 29,
        "height": 1
    },
    {
        "id": "8e3bb590fd324109",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 11,
        "width": 29,
        "height": 1
    },
    {
        "id": "99dc1b9c4f609f28",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 12,
        "width": 29,
        "height": 1
    },
    {
        "id": "ce1e895aaa7819e9",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 13,
        "width": 29,
        "height": 1
    },
    {
        "id": "3112a3e697257936",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 14,
        "width": 29,
        "height": 1
    },
    {
        "id": "47f44255d1875aa7",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 15,
        "width": 29,
        "height": 1
    },
    {
        "id": "1ac0b6ed66aa63ba",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 16,
        "width": 29,
        "height": 1
    },
    {
        "id": "15302a72c99f6715",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 17,
        "width": 29,
        "height": 1
    },
    {
        "id": "d84993c7749c324a",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 18,
        "width": 29,
        "height": 1
    },
    {
        "id": "193717a1e84abdb5",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 19,
        "width": 29,
        "height": 1
    },
    {
        "id": "5aa4c3e4a7b0501a",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 20,
        "width": 29,
        "height": 1
    },
    {
        "id": "e3ae6ef8499bc529",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 21,
        "width": 29,
        "height": 1
    },
    {
        "id": "89428e9bea776f01",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 22,
        "width": 29,
        "height": 1
    },
    {
        "id": "524e41bfb285ea49",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 23,
        "width": 29,
        "height": 1
    },
    {
        "id": "6742a5d52b4bb676",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 24,
        "width": 29,
        "height": 1
    },
    {
        "id": "9b2e25b089b2636d",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 25,
        "width": 29,
        "height": 1
    },
    {
        "id": "f036575374674433",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 26,
        "width": 29,
        "height": 1
    },
    {
        "id": "facc3c8b12965080",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 27,
        "width": 29,
        "height": 1
    },
    {
        "id": "e86b5e79d36b46b4",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 28,
        "width": 29,
        "height": 1
    },
    {
        "id": "3d43e2cba3401ea2",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 29,
        "width": 29,
        "height": 1
    },
    {
        "id": "b78cbc5d2540eed5",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 30,
        "width": 29,
        "height": 1
    },
    {
        "id": "a9d1b51feb61eb7f",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 31,
        "width": 29,
        "height": 1
    },
    {
        "id": "8f9c4e56284bbf11",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 32,
        "width": 29,
        "height": 1
    },
    {
        "id": "fe047b66e8dff168",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 33,
        "width": 29,
        "height": 1
    },
    {
        "id": "c2a5003627f5a479",
        "type": "ui_spacer",
        "z": "b52d06897a68ca8c",
        "name": "spacer",
        "group": "d229163f35bc3e17",
        "order": 34,
        "width": 29,
        "height": 1
    },
    {
        "id": "91f1b589e74d876c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.21",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1c3881de7afa11d5",
        "type": "change",
        "z": "5030d00b88df4be5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "test",
                "pt": "msg",
                "to": "test",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "65a17d791a657925",
        "type": "function",
        "z": "a85c93b74d9f6110",
        "name": "Set priority of msg value",
        "func": "var list = ['path', 'packageName','action', 'save', 'saveInDependencies','safeMode']\nfor (let index = 0; index < list.length; index++) {\n    const element = list[index];\n    if (msg[element] === undefined && (env.get(element) !== '' || env.get(element) !== null || env.get(element) !== undefined)){\n        msg[element] = env.get(element)\n    }else{\n        if (msg[element] === undefined || msg[element] === null){\n            node.warn(\"You have to configure the node in the panel editor or via msg property\");\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "decd9a59ae4a88b9"
            ]
        ]
    },
    {
        "id": "e542a4f578bab639",
        "type": "exec",
        "z": "a85c93b74d9f6110",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "b8f92dc3100eea4c",
                "d0b588151f25af9d"
            ],
            [
                "b8f92dc3100eea4c"
            ],
            [
                "b8f92dc3100eea4c"
            ]
        ]
    },
    {
        "id": "decd9a59ae4a88b9",
        "type": "change",
        "z": "a85c93b74d9f6110",
        "name": "set command in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(path='' ? '' : 'cd ' & path & ' && ') & 'npm ' & action & ' ' & packageName & (save ? ' --save' : '') & (saveInDependencies ? ' -D' : '')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "[payload]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 640,
        "wires": [
            [
                "e542a4f578bab639"
            ]
        ]
    },
    {
        "id": "d0b588151f25af9d",
        "type": "switch",
        "z": "a85c93b74d9f6110",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "low",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "added 1 package",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 890,
        "y": 540,
        "wires": [
            [
                "43e09bf625c1ccb0"
            ],
            [
                "32620eda86c8b32d"
            ],
            [
                "32620eda86c8b32d"
            ]
        ]
    },
    {
        "id": "efe3592b9fec64fd",
        "type": "exec",
        "z": "a85c93b74d9f6110",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1570,
        "y": 660,
        "wires": [
            [
                "87403198d3eb6d51"
            ],
            [
                "697904ccdf2908a6"
            ],
            [
                "697904ccdf2908a6"
            ]
        ]
    },
    {
        "id": "3da9f5a55d213f12",
        "type": "change",
        "z": "a85c93b74d9f6110",
        "name": "set command in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'cd \"' & path & '\" && ' & 'npm audit fix'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "$append(command)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 480,
        "wires": [
            [
                "efe3592b9fec64fd"
            ]
        ]
    },
    {
        "id": "f0c7f88db9a0a39f",
        "type": "link in",
        "z": "a85c93b74d9f6110",
        "name": "stdout",
        "links": [
            "3b612ead7d4a407e",
            "32620eda86c8b32d",
            "7e416f0898f1e4bf",
            "62b10f098bb48847",
            "7b7d9bdda20dd70c",
            "b8f92dc3100eea4c",
            "697904ccdf2908a6",
            "1b302ebac74189ad",
            "4646e97d6cdcf57a",
            "4c889e1c79e3c8ad"
        ],
        "x": 2755,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "62b10f098bb48847",
        "type": "link out",
        "z": "a85c93b74d9f6110",
        "name": "",
        "mode": "link",
        "links": [
            "f0c7f88db9a0a39f"
        ],
        "x": 2275,
        "y": 620,
        "wires": []
    },
    {
        "id": "b8f92dc3100eea4c",
        "type": "link out",
        "z": "a85c93b74d9f6110",
        "name": "",
        "mode": "link",
        "links": [
            "f0c7f88db9a0a39f"
        ],
        "x": 1045,
        "y": 680,
        "wires": []
    },
    {
        "id": "697904ccdf2908a6",
        "type": "link out",
        "z": "a85c93b74d9f6110",
        "name": "",
        "mode": "link",
        "links": [
            "f0c7f88db9a0a39f"
        ],
        "x": 1765,
        "y": 680,
        "wires": []
    },
    {
        "id": "87403198d3eb6d51",
        "type": "switch",
        "z": "a85c93b74d9f6110",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "found 0 vulnerabilities",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 620,
        "wires": [
            [
                "62b10f098bb48847"
            ],
            [
                "f7fc04eb893fd2e3"
            ]
        ]
    },
    {
        "id": "32620eda86c8b32d",
        "type": "link out",
        "z": "a85c93b74d9f6110",
        "name": "",
        "mode": "link",
        "links": [
            "f0c7f88db9a0a39f"
        ],
        "x": 1265,
        "y": 560,
        "wires": []
    },
    {
        "id": "69dec379bd8db011",
        "type": "file in",
        "z": "a85c93b74d9f6110",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 40,
        "wires": [
            [
                "a4693381465ef0e0"
            ]
        ]
    },
    {
        "id": "a4693381465ef0e0",
        "type": "json",
        "z": "a85c93b74d9f6110",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "56d750465e6be7e0",
        "type": "change",
        "z": "a85c93b74d9f6110",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "path & (path='' ? '' : '/') & 'package.json'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 40,
        "wires": [
            [
                "69dec379bd8db011"
            ]
        ]
    },
    {
        "id": "43e09bf625c1ccb0",
        "type": "switch",
        "z": "a85c93b74d9f6110",
        "name": "",
        "property": "safeMode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "3da9f5a55d213f12"
            ]
        ]
    },
    {
        "id": "24ca775ca6d87de3",
        "type": "exec",
        "z": "a85c93b74d9f6110",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 2150,
        "y": 540,
        "wires": [
            [
                "62b10f098bb48847"
            ],
            [
                "62b10f098bb48847"
            ],
            [
                "62b10f098bb48847"
            ]
        ]
    },
    {
        "id": "f7fc04eb893fd2e3",
        "type": "change",
        "z": "a85c93b74d9f6110",
        "name": "set command in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(path='' ? '' : 'cd ' & path & ' && ') & 'npm ' & 'uninstall ' &  packageName & (save ? ' --save' : '') & (saveInDependencies ? ' -D' : '')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "[payload]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 540,
        "wires": [
            [
                "24ca775ca6d87de3"
            ]
        ]
    },
    {
        "id": "099f6275bdac6398",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "1st step",
        "info": "## Plan\nPour cette première vidéo le planning est d'installer les premiers outils néccessaire. C'est a dire:\n - Les outils de base de communication entre nos machines  \n - Un éditeur de code, Visual Studio Code sur l'orangepi et le telephone\n    - téléphone : https://www.codewithharry.com/blogpost/install-vs-code-in-android/\n - Un gestionnaire de conteneneur, Docker car c'est le plus fournir et simple à mettre en place sur tout les support. Nous allons le mettre sur l'orangepi et essayer sur le téléphone, je l'ai pas fait encore pour préserver le téléphone.\n - Un gestionnaire d'activité, Dolibarr, car il permet de lié les flux financier et les flux physique. De plus, sont utilisation represente une compétence utilsable dans la vie professsionelle et personnelle. Nous allons le mettre sur l'orangepi\n - Un assistant vocal, Rhasspy car il est le plus modulable que nous alllons également mettre sur l'orangepi et sur le téléphone. Nous allons sur le téléphone installer l'APK même si je n'arrive pas afaire fonctionner le wakeword avec\n - Enfin si on à le temps ce qui métonnerais, nous allons commencer à palier à ce problème.\n\n## Session 1\n - Installation de node-red-dashboardpour la simplicité.\n - Mise en place du systeme de communication avec le terminal depuis node-red pour gerer les coonections internet et bluetooth\n    - Pour execetuter des commandes avec node-red nous avons plusieur choix possible\n      1. Tout dabords la note exec. Voici un exemple avec la commande nmcli pour la gestion du wifi\n          1. J'ai créer un bouton sur le dashbord qui nous permet de lancer la commande\n          2. Dans la fonction node j'en fait un tableau d'object que je montre avec la node additionel ui-list\n          3. Dans la node ui-list, j'ai parameter une action au click qui nous permet de lancer la commande de connexion\n          4. Dans la node exec, j'ai activer l'options pour ajouter le nom du reseau c'est à dire la propriété SSID de l'obect construit auparavent.Deplus je l'ai mise en mode spawn pour recevoir des message pendant que la commande est en cours\n          5. Enfin, j'ai fait une template node qui nous permet de voir les message cumuler.  \n          - Nous allons essayer cette solution. Je click sur refresh, nous attendons un peu et nous voyons les connnexion. Maintenant je clique sur une et on vois que l'on nous demande un password.\n        Cela pose un problème car nous ne pouvons pas renvoyer un message dans la commande que nous avons lancer. Pour communiquer avec un processus que nous avons lancer il nous faut une autre node addiotonelle, la node daemon qui est ici.\n        Cependant dans cette node nous ne pouvons pas definir de commande ou d'argument dynamiquement. Cela veut dire que lorsque nous cliquons dans notre list, nous ne pouvons pas en recolter l'information pour la mettre dans notre node daemon\n        On va donc essayer une autre solution\n      2. Pour le deuxième essai on va essayer d'utiliser la même fonction que la node exec realise mais dans une fonction node. c'est ce qu'il y a ici.\n          1. J'ai créer un formulaire avec la node form pour mettre une liste de commande separer par entrer\n          2. J'ai créer une function node pour réaliser à la suite les commandes.\n          3. J'ai remis la node template pour voir le resultat\n          - Nous allons essayer cette solution. Nous tapons notre commande pour nous connecter et nous rajoutons notre ssid. Nous cliquons sur submit et on nous demande notre password, nous en sommme au même point que precédement.\n        Maintenant nous tappons la commmande et le ssid et à la ligne le mot de passe. Nous avons perdu la connexion avec le pc et nous devrions être connecter au téléphone.\n        Avec mon telephone je recupére l'adresse ip du téléphone avec la commande \"ifconfig\" et apres je scanne le reseau avec \"nmap mon_ip/24\". Cela me donne l'ip de mon orangepi connecter au telephone.\n        Maintenant nous pouvons aller sur le node-red de l'orange pi avec le téléphone comme cela. Je coupe mon point d'acces avec le téléphone et nous attendons un peu que l'orangepi se reconnecte à la maison pour y avoir de nouveau acces avec l'ordinateur\n        Dans la prochaine video nous ferrons cela avec node-red coté téléphone et on affichera une notification sur le tel avec l'adresse ip.\n      3. Nous avons reussi à nous connecter au téléphone cependant cela ne fonctionne pas de manière dynamique. En effet, cela ne marche toutjours pas avec un click sur la liste. Pour cette raison, nous allons voir la troisième solution, \n      celle de droite qui est un terminal dynamique qui est ici fait avec la node daemon.\n          1. Tout d'abords, comme la node n'est pas parametrable, il nous faut créer un fichier javascript, contenant notre commande à lancer. Pour cela, j'ai utilisé\n          une template node, qui nous permet de récolter l'information de notre node form qui est ici, pour la mettre dans notre fichier javascript qui s'ecrit avec la node write.\n          2. Ensuite, j'ai mis une node change pour definir une propriété start au message qui permet de lancer la node daemon\n          3. Dans la node daemon, j'ai mis node dans la commande \"node\" et le fichier à lancer dans argument. J'ai déchocher auto-start daemon on deploy et j'ai cocher add enter to every message sent\n          4. Pour envoyer un message au processus en cours j'ai mis une autre node form\n          5. Pour terminer notre processus en cours, j'ai mis une node button qui quand il est cliquer envoie un message à la node change.Dedans j'ai defini une propriété kill a msg qui est transmis à la node daemon\n          6. Pour finir j'ai mis un bouton pour repéter la commande.\n          7. Nous laissons de coter la partie du bas pour le moment qui nous servira à gérer une liste de commande.  \n          - Nous allons maintenant tester notre solution. Nous tapons tape donc la commande pour nous connecter aux reseau. Cela demmande le SSID. Nous mettons XperiaXZ_c8a0 et cela nous demande le mot de passe qui est coucoutoi que nous envoyons\n        Nous repetons les commandes pour trouver notre ip et scanner le reseau pour trouver l'ip de notre orangepi. C'est le même que tout à l'heure. Nous retournons donc dans le navigateur internet pour nous coonecter au dashboard.\n        Cela fonctionne. Nous coupons la connexions du téléphone pour retrouver l'orangepi avec le pc.\n - Choix de l'utilisation d'une node ssh\n   - Maintenant que nous pouvons communiquer avec notre machine grâce à un terminal dans node-red nous allons comminquer avec notre téléphone grave à la commande ssh. Pour ce la on pourrait utiliser notre terminal mais si on essaie on voit qu'il y a une erreur.\n   Nous pouvons la contourner mais cela implique de mettre le mot de passe dans la commande ce qui ne serai pas sécuriser. Dans une autre vidéo, nous ferrons un systeme pour crypter le mot de passe, le sauvegarder et l'injecter dans la commande.\n   Pour le moment détaillons le choix de la node ssh. Parmis les node existante :\n   - node-red-contrib-ssh-v3 : pas de port spécifiable donc pas utilisable avec termux\n   - idem pour : node-red-contrib-ssh-coco, node-red-contrib-ssh et node-red-contrib-ssh-v2-reconnection \n   - node-red-contrib-bigssh : pas de changement de status de la node en cas de perte de connection avec le telephone\n   - Pour l'instant le mieux c'est bigssh.\n   - En revanche ce n'est pas parfait car cela nous fait revenir au point de départ concernant le terminal. En effet toute les node ssh sont comme les node exec et non comme les node daemon.\n   C'est à dire pas de communication possible après la commande. Pour cette rasion, nous serrons obliger de remplacer cette node ultérieurement comme nous auront fait le systeme de cryptation du mot de passe.\n - Maintenant qu nous avons notre systeme de terminal, nous pouvons commencer as réaliser les commandes nécessaire lorsque l'on télécharge le projet pour la première fois. Avant cela nous allons voir la dernière fonctionnalité à notre terminal.\nFaire defiler une liste de commande préétablie avec des boutons en fonction du resultat de la commande précedente. \n    1. J'ai donc ajouter une node text pour saisir un tableau de commande\n    2. J'ai ajouter une node change pour definir des variables au niveau du flow ce qui nous permettra d'acceder à nos informations de liste pour tout les messages\n    3. Ensuite, la prochaine node change passe la premières commande à notre text \n    4. Toutes les node fonction \"message for spawn\" servent à formater le message car pour lancer la première commande, la commande doit être séparer des arguments. Maintenant que c'est fait je pense que cela peut être améliorer en modifiant le code javascript qui lance la commande.\n    5. Il y a ensuite les trois bouton pour gerer la liste\n    6. Ce qui est derrière ces bouton sert à modifier l'état des boutons, l'index en cour de la liste et le texte pour la commande suivante\n    7. La liste est compatible avec la parti du dessus, c'est a dire que vous pouvez injecter des commande en cours de liste.\n  - Nous allons maintenant pourvoir dresser une liste de commande à executer pour chaque outil. Cependant en fesant cela je me suis rendu compte que de pourvoir sauvegarder notre liste pourrait être intéressant\n  C'est l'objet de la troisième parti que vous voyer la. J'arrive à ma dead line pour cette vidéo donc je ne détaille pas. Sachez juste que en fesant cela j'ai découvert xterm.js et que dans les prochaines vidéo on remplacera la node template par une fenetre xterm.js pour pouvoir exploiter pleinement le terminal et profitez de notre gestion de liste de commande.\n  Cependant nous avons maintenant un outil pour modifier un script que nous pouvons modifier librement et faire defiler commande par commande. Pour injecter des commandes dans notre outils j'ai ajouter une node link in. Dans le flow Installation nous pouvons maintenant mettre une inject node et une node link out pour charger notre list.\n  Cela nous permetra de facilement d'effectuer nos installations sur nos différente machine et de pouvoir injecter nos mots de passe.\n    1. Nous commencons donc avec Node-Red. Dedans il y a les commandes pour le lancer au démarrage. Pour l'instant c'est juste le laner au démarrage de la machine. Cependant je vais le lancer, Nous voyons que  \n",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "3b986ba732de0ec3",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1860,
        "y": 220,
        "wires": []
    },
    {
        "id": "7668e9e8bdcf0e7c",
        "type": "status",
        "z": "58612799aa277ac1",
        "name": "",
        "scope": [
            "a50d6ceba36c36f7"
        ],
        "x": 2140,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "f4be8a67244d65bf",
        "type": "exec",
        "z": "58612799aa277ac1",
        "command": "ip a",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "get wifi interface name ",
        "x": 2120,
        "y": 1440,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "e959bbe9e0f2b24e",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1850,
        "y": 1440,
        "wires": [
            [
                "f4be8a67244d65bf"
            ]
        ]
    },
    {
        "id": "ac9878e5150ff640",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "Install nodejs libary to scan networks and define global variable for the app",
        "info": "",
        "x": 360,
        "y": 220,
        "wires": []
    },
    {
        "id": "b5969e7614beb79c",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "props": [
            {
                "p": "packageNames",
                "v": "[\"@node-red-contrib-themes/theme-collection\",\"node-red-dashboard\", \"node-red-contrib-credentials\", \"node-red-node-daemon\", \"node-red-contrib-sox-utils\"]",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "6e315e8005f93db6"
            ]
        ]
    },
    {
        "id": "704240ae2d8ef866",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2180,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "1e835d36dc81cf30",
        "type": "function",
        "z": "58612799aa277ac1",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "61885aca941ee99a",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7bca5ca89647bdfc",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1940,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "feb6423ccda74b39",
        "type": "subflow:a85c93b74d9f6110",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "env": [
            {
                "name": "save",
                "value": "false",
                "type": "bool"
            },
            {
                "name": "saveInDependencies",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "398286c135d72f4e",
                "725f5a0cbb20fa86"
            ]
        ]
    },
    {
        "id": "4bbf9dbd15acc0eb",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "Command for node-red first install",
        "info": "",
        "x": 240,
        "y": 900,
        "wires": []
    },
    {
        "id": "834065f208af89ab",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo systemctl enable nodered.service\"]",
        "payloadType": "json",
        "x": 190,
        "y": 960,
        "wires": [
            [
                "73013c23ef540790"
            ]
        ]
    },
    {
        "id": "73013c23ef540790",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 295,
        "y": 960,
        "wires": []
    },
    {
        "id": "c6abed77f180ed52",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "Command for docker",
        "info": "",
        "x": 200,
        "y": 1040,
        "wires": []
    },
    {
        "id": "24a91948959304e0",
        "type": "inject",
        "z": "58612799aa277ac1",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo systemctl enable nodered.service\"]",
        "payloadType": "json",
        "x": 170,
        "y": 1100,
        "wires": [
            [
                "c4d0127ebb81b796"
            ]
        ]
    },
    {
        "id": "c4d0127ebb81b796",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9",
            "bc746456f276f19a"
        ],
        "x": 285,
        "y": 1100,
        "wires": []
    },
    {
        "id": "128ae6814df70dd8",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "For dolibarr",
        "info": "",
        "x": 170,
        "y": 1240,
        "wires": []
    },
    {
        "id": "dd4242fd0fb59287",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "put secret here",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "techscOrangepi",
        "payloadType": "str",
        "x": 200,
        "y": 1500,
        "wires": [
            [
                "4a7ec91597ecd7f0"
            ]
        ]
    },
    {
        "id": "ae59c916977de493",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "Setup your dolibarr here",
        "props": [
            {
                "p": "dolContainerName",
                "v": "dolibarr",
                "vt": "str"
            },
            {
                "p": "dolPort",
                "v": "8300",
                "vt": "str"
            },
            {
                "p": "dolTag",
                "v": "15",
                "vt": "str"
            },
            {
                "p": "dolVolumePath",
                "v": "../../../../dolibarr/dolibarr-docs",
                "vt": "str"
            },
            {
                "p": "dolCustomVolumePath",
                "v": "../../../../dolibarr/dolibarr-custom",
                "vt": "str"
            },
            {
                "p": "mysqlContainerName",
                "v": "dolibarr-mysql",
                "vt": "str"
            },
            {
                "p": "mariadTag",
                "v": "latest",
                "vt": "str"
            },
            {
                "p": "mysqlVolume",
                "v": "../../../../dolibarr/mysql-data",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1320,
        "wires": [
            [
                "ef0c3783383d6fd2",
                "330fe8c90584f514"
            ]
        ]
    },
    {
        "id": "d159f4f118348fa4",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 1320,
        "wires": [
            [
                "c84ab6a104df0ac3",
                "8cae742646b559cf"
            ]
        ]
    },
    {
        "id": "c84ab6a104df0ac3",
        "type": "yaml",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "property": "payload",
        "name": "",
        "x": 810,
        "y": 1320,
        "wires": [
            [
                "d629ba9a12ac2bb4",
                "ce93a5cfa3e54736"
            ]
        ]
    },
    {
        "id": "85961ad908a34128",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2140,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "d629ba9a12ac2bb4",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.services.dolibarr.image",
                "pt": "msg",
                "to": "'tuxgasy/dolibarr:' & dolTag",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.dolibarr.ports[0]",
                "pt": "msg",
                "to": "dolPort &':80'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.dolibarr.volumes[0]",
                "pt": "msg",
                "to": "dolVolumePath & ':/var/www/documents'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.dolibarr.volumes[1]",
                "pt": "msg",
                "to": "dolCustomVolumePath & ':/var/www/html/custom'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.mysql.image",
                "pt": "msg",
                "to": "'library/mariadb:' & mariadTag",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.mysql.volumes[0]",
                "pt": "msg",
                "to": "mysqlVolume & ':/var/lib/mysql'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.dolibarr.container_name",
                "pt": "msg",
                "to": "dolContainerName",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.services.mysql.container_name",
                "pt": "msg",
                "to": "mysqlContainerName",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 1320,
        "wires": [
            [
                "dd5a7afc5410247a",
                "96668f8c0144d462"
            ]
        ]
    },
    {
        "id": "09da2f49e5f73653",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "Load project directory in global variable",
        "info": "",
        "x": 250,
        "y": 120,
        "wires": []
    },
    {
        "id": "db6ff932806cc474",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "projectDir",
                "pt": "global",
                "to": "projectdir",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "1a0ee4d754397b65"
            ]
        ]
    },
    {
        "id": "90e07e991d03a7f5",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "bbbac82b0e8ca5c5"
            ]
        ]
    },
    {
        "id": "1a0ee4d754397b65",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "9e2778ee9680fce3",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2160,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "4a7ec91597ecd7f0",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "mysql user",
        "filename": "$globalContext('projectDir') & '/secrets/mysql_user.secret'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 430,
        "y": 1500,
        "wires": [
            [
                "305f4811863bf516"
            ]
        ]
    },
    {
        "id": "bf11f93cb7d73fa1",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "mysql password",
        "filename": "$globalContext('projectDir') & '/secrets/mysql_password.secret'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 440,
        "y": 1540,
        "wires": [
            [
                "305f4811863bf516"
            ]
        ]
    },
    {
        "id": "53f35663a44f527d",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "dolibarr user",
        "filename": "$globalContext('projectDir') & '/secrets/dolibarr_admin_username.secret'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 430,
        "y": 1580,
        "wires": [
            [
                "305f4811863bf516"
            ]
        ]
    },
    {
        "id": "f72a623702e9f368",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "dolibarr password",
        "filename": "$globalContext('projectDir') & '/secrets/dolibarr_admin_password.secret'",
        "filenameType": "jsonata",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 450,
        "y": 1620,
        "wires": [
            [
                "305f4811863bf516"
            ]
        ]
    },
    {
        "id": "305f4811863bf516",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1560,
        "wires": []
    },
    {
        "id": "e6c1b0979a8651b6",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "put secret here",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "techscOrangepiPassword",
        "payloadType": "str",
        "x": 200,
        "y": 1540,
        "wires": [
            [
                "bf11f93cb7d73fa1"
            ]
        ]
    },
    {
        "id": "6e594e88a90c98c1",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "put secret here",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "techscOrangepi",
        "payloadType": "str",
        "x": 200,
        "y": 1580,
        "wires": [
            [
                "53f35663a44f527d"
            ]
        ]
    },
    {
        "id": "859f7f3f76ccd945",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "put secret here",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "techscOrangepiPassword",
        "payloadType": "str",
        "x": 200,
        "y": 1620,
        "wires": [
            [
                "f72a623702e9f368"
            ]
        ]
    },
    {
        "id": "a432820c7d96bcf4",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "'[\"docker-compose -f ' & $globalContext('projectDir') & '/dolibarr/docker-compose.yml up\"]'",
        "payloadType": "jsonata",
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "305f4811863bf516",
                "b654239533131b2e"
            ]
        ]
    },
    {
        "id": "dd5a7afc5410247a",
        "type": "yaml",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "property": "payload",
        "name": "",
        "x": 1190,
        "y": 1320,
        "wires": [
            [
                "e51ad4b09d2bfe83",
                "f856cdab579098d8"
            ]
        ]
    },
    {
        "id": "e51ad4b09d2bfe83",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1440,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "ef0c3783383d6fd2",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$globalContext('projectDir') & '/dolibarr/docker-compose.yml'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 1320,
        "wires": [
            [
                "d159f4f118348fa4"
            ]
        ]
    },
    {
        "id": "633c0f96d16dedf3",
        "type": "template",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "env file for dolibarr",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "DOLI_INSTALL_AUTO=1\nDOLI_DB_HOST=mysql\nDOLI_DB_HOST_PORT=3306\nDOLI_DB_NAME=dolibarr\nDOLI_URL_ROOT=http://localhost:{{dolPort}}\nDOLI_NOCSRFCHECK=0\nWWW_USER_ID=33\nWWW_GROUP_ID=33\nPHP_INI_DATE_TIMEZONE=UTC\nPHP_INI_MEMORY_LIMIT=256M",
        "output": "str",
        "x": 690,
        "y": 1360,
        "wires": [
            [
                "1fc95f0261620c4b",
                "ccb5547533791ab6"
            ]
        ]
    },
    {
        "id": "330fe8c90584f514",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$globalContext('projectDir') & '/dolibarr/env/dolibarr.env'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 1360,
        "wires": [
            [
                "633c0f96d16dedf3"
            ]
        ]
    },
    {
        "id": "1fc95f0261620c4b",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 940,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "8cae742646b559cf",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1280,
        "wires": []
    },
    {
        "id": "ce93a5cfa3e54736",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1280,
        "wires": []
    },
    {
        "id": "96668f8c0144d462",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "debug 65",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1280,
        "wires": []
    },
    {
        "id": "f856cdab579098d8",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c42712e6049f5aad",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "Set up your docker compose",
        "info": "",
        "x": 220,
        "y": 1280,
        "wires": []
    },
    {
        "id": "592357dc91aa5e77",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "Create you secret file (no docker swarm so no sercret for now)",
        "info": "",
        "x": 320,
        "y": 1460,
        "wires": []
    },
    {
        "id": "15d7fcf601ffe933",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "Launch the docker-compose",
        "info": "",
        "x": 220,
        "y": 1720,
        "wires": []
    },
    {
        "id": "40f7e1e7c55cd034",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9",
            "bc746456f276f19a"
        ],
        "x": 505,
        "y": 1760,
        "wires": []
    },
    {
        "id": "b654239533131b2e",
        "type": "json",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 1760,
        "wires": [
            [
                "40f7e1e7c55cd034"
            ]
        ]
    },
    {
        "id": "998bd941ca351b8b",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "To read ABSOLUTLY",
        "info": "At this point you must have a dolibarr up on the port you have set\nYou need to to the next buble to security",
        "x": 180,
        "y": 2040,
        "wires": []
    },
    {
        "id": "09315ad9c4c9f0a4",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "CREATE AN OTHER USER IN DOLIBARR AND GIVE ADMIN RIGHT WITH NEW CREDENTIAL",
        "info": "At this point you must have a dolibarr up on the port you have set\nYou need to to the next buble to security",
        "x": 410,
        "y": 2080,
        "wires": []
    },
    {
        "id": "ccb5547533791ab6",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1400,
        "wires": []
    },
    {
        "id": "65be65f0c18bde6c",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "For Rhasspy",
        "info": "",
        "x": 170,
        "y": 4080,
        "wires": []
    },
    {
        "id": "8853f4539368887d",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "Setup your rhasspy here",
        "props": [
            {
                "p": "portFr",
                "v": "12101",
                "vt": "str"
            },
            {
                "p": "portUDPFr",
                "v": "11111",
                "vt": "str"
            },
            {
                "p": "portMQTTFr",
                "v": "12183",
                "vt": "str"
            },
            {
                "p": "portEn",
                "v": "12102",
                "vt": "str"
            },
            {
                "p": "portUDPEn",
                "v": "22222",
                "vt": "str"
            },
            {
                "p": "portMQTTEn",
                "v": "12184",
                "vt": "str"
            },
            {
                "p": "volumePath",
                "v": "$HOME/.config/rhasspy/profiles/profiles",
                "vt": "str"
            },
            {
                "p": "container_name",
                "v": "rhasspy",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 4140,
        "wires": [
            [
                "5971d165d1b8a667"
            ]
        ]
    },
    {
        "id": "d35856b40d4ffe51",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.volumes[0]",
                "pt": "msg",
                "to": "volumePath & ':/profiles'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.volumes[0]",
                "pt": "msg",
                "to": "volumePath & ':/profiles'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.ports[0]",
                "pt": "msg",
                "to": "portFr &':12101'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.ports[0]",
                "pt": "msg",
                "to": "portEn &':12101'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.container_name",
                "pt": "msg",
                "to": "container_name & '-en'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.container_name",
                "pt": "msg",
                "to": "container_name & '-fr'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.ports[1]",
                "pt": "msg",
                "to": "portUDPFr &':11111'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.ports[1]",
                "pt": "msg",
                "to": "portUDPEn &':22222'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-en.ports[2]",
                "pt": "msg",
                "to": "portMQTTEn &':12183'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.services.rhasspy-fr.ports[2]",
                "pt": "msg",
                "to": "portMQTTFr &':12183'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 4140,
        "wires": [
            [
                "030fec169548bea3"
            ]
        ]
    },
    {
        "id": "15fe6a9b748a6092",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 4080,
        "wires": []
    },
    {
        "id": "5971d165d1b8a667",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$globalContext('projectDir') & '/rhasspy/docker-compose.yml'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 4140,
        "wires": [
            [
                "0893c7f837f491cd"
            ]
        ]
    },
    {
        "id": "0893c7f837f491cd",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 4140,
        "wires": [
            [
                "55298a4a8bc38ec7"
            ]
        ]
    },
    {
        "id": "55298a4a8bc38ec7",
        "type": "yaml",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "property": "payload",
        "name": "",
        "x": 790,
        "y": 4140,
        "wires": [
            [
                "d35856b40d4ffe51"
            ]
        ]
    },
    {
        "id": "e529a5508c89fa15",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "'[\"docker-compose -f ' & $globalContext('projectDir') & '/rhasspy/docker-compose.yml up\"]'",
        "payloadType": "jsonata",
        "x": 170,
        "y": 4260,
        "wires": [
            [
                "fe7422360750cb6c"
            ]
        ]
    },
    {
        "id": "15cbe60d4ffff951",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "Launch the docker-compose",
        "info": "",
        "x": 200,
        "y": 4220,
        "wires": []
    },
    {
        "id": "fb2f5a5457cc1c7b",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 465,
        "y": 4260,
        "wires": []
    },
    {
        "id": "fe7422360750cb6c",
        "type": "json",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 4260,
        "wires": [
            [
                "fb2f5a5457cc1c7b"
            ]
        ]
    },
    {
        "id": "030fec169548bea3",
        "type": "yaml",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "property": "payload",
        "name": "",
        "x": 1130,
        "y": 4140,
        "wires": [
            [
                "b8de4704a104b73c",
                "15fe6a9b748a6092"
            ]
        ]
    },
    {
        "id": "b8de4704a104b73c",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1280,
        "y": 4140,
        "wires": [
            []
        ]
    },
    {
        "id": "dcf2c5b5ac2dd430",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "To read ABSOLUTLY",
        "info": "At this point you must have a rhasspy up on the port you have set\n",
        "x": 180,
        "y": 4340,
        "wires": []
    },
    {
        "id": "b65237e8d3b302fa",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 180,
        "wires": []
    },
    {
        "id": "398286c135d72f4e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "b2aa0ffd4bc3b846",
        "type": "rbe",
        "z": "58612799aa277ac1",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 510,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "a486d072b002a4d8",
        "type": "delay",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "4",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 260,
        "wires": [
            [
                "1a0ee4d754397b65",
                "feb6423ccda74b39"
            ]
        ]
    },
    {
        "id": "6e315e8005f93db6",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "function 9",
        "func": "msg.path = \".node-red\"\nfor (let index = 0; index < msg.packageNames.length; index++) {\n    const element = msg.packageNames[index];\n    msg.packageName = element\n    node.send(msg)\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 320,
        "y": 260,
        "wires": [
            [
                "a486d072b002a4d8"
            ]
        ]
    },
    {
        "id": "725f5a0cbb20fa86",
        "type": "switch",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "property": "packageName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red-contrib-sox-utils",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "f0aa98ca142d18ba"
            ]
        ]
    },
    {
        "id": "2d811df439c064d7",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1300,
        "y": 220,
        "wires": [
            [
                "a31ed93da07587de"
            ]
        ]
    },
    {
        "id": "a31ed93da07587de",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "if (process.platform !== 'linux')",
                "fromt": "str",
                "to": "if (process.platform !== 'linux' || process.platform !== 'android')",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 260,
        "wires": [
            [
                "26858a679202fcc1"
            ]
        ]
    },
    {
        "id": "26858a679202fcc1",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1680,
        "y": 240,
        "wires": [
            [
                "3b986ba732de0ec3"
            ]
        ]
    },
    {
        "id": "f0aa98ca142d18ba",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "accc01d78c5b390d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "'.node-red/node_modules/' & packageName & '/sox_play.js' ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 280,
        "wires": [
            [
                "2d811df439c064d7"
            ]
        ]
    },
    {
        "id": "bfbf22de567bb24e",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2Pac - 103 - Lil' Homies.mp3",
        "payloadType": "str",
        "x": 2490,
        "y": 720,
        "wires": [
            [
                "7991a19d69835c5c"
            ]
        ]
    },
    {
        "id": "2a57bc40ec44ac59",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2980,
        "y": 720,
        "wires": []
    },
    {
        "id": "68b1975a4a8ab28d",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 2470,
        "y": 780,
        "wires": [
            [
                "e81dc83962f7d46b"
            ]
        ]
    },
    {
        "id": "3edb45e1ae2cc323",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2940,
        "y": 780,
        "wires": []
    },
    {
        "id": "3cdbfa3787dc9c5a",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 73",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2940,
        "y": 820,
        "wires": []
    },
    {
        "id": "43eada3da32e26f4",
        "type": "catch",
        "z": "58612799aa277ac1",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 2700,
        "y": 680,
        "wires": [
            [
                "2a57bc40ec44ac59"
            ]
        ]
    },
    {
        "id": "cfd60e7ccea45963",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "For the sound system",
        "info": "",
        "x": 200,
        "y": 4420,
        "wires": []
    },
    {
        "id": "e4f8e748553849f6",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"killall pulseaudio\", \"pulseaudio --start\"]",
        "payloadType": "json",
        "x": 170,
        "y": 4540,
        "wires": [
            [
                "67d3b5ce22f3522d"
            ]
        ]
    },
    {
        "id": "91f62606491c9d51",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "set up right user dir for XDG_RUNTIME_DIR  ABSOLUTLY NEEDED FOR SOUND WORK",
        "info": "Needed because something append with user and pulseaudio",
        "x": 410,
        "y": 4480,
        "wires": []
    },
    {
        "id": "67d3b5ce22f3522d",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 325,
        "y": 4540,
        "wires": []
    },
    {
        "id": "fc628bbe4830e99a",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 170,
        "y": 4580,
        "wires": [
            [
                "0cea6e3b47383061"
            ]
        ]
    },
    {
        "id": "be19391959d36958",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "ef08ad9ecb7fca29"
        ],
        "x": 495,
        "y": 4620,
        "wires": []
    },
    {
        "id": "0cea6e3b47383061",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "filename": ".node-red/settings.js",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 4580,
        "wires": [
            [
                "cb5d047df11119e7"
            ]
        ]
    },
    {
        "id": "d72a687de4c05810",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "debug 98",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 4620,
        "wires": []
    },
    {
        "id": "cb5d047df11119e7",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "enable context storage and contextKeys ",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "exportGlobalContextKeys: false,",
                "fromt": "str",
                "to": "exportGlobalContextKeys: true,",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 4620,
        "wires": [
            [
                "a3374e50370878b6"
            ]
        ]
    },
    {
        "id": "b59efcd9c69b3c8a",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "Inject and go to dashboard to but your mdp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S node-red-restart\"]",
        "payloadType": "json",
        "x": 280,
        "y": 4620,
        "wires": [
            [
                "be19391959d36958"
            ]
        ]
    },
    {
        "id": "f7ca7a69e580bb6e",
        "type": "file in",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/default.pa",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2180,
        "y": 4600,
        "wires": [
            [
                "502e96e214e78e11",
                "633011060fb16ff0"
            ]
        ]
    },
    {
        "id": "502e96e214e78e11",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload & 'load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2420,
        "y": 4600,
        "wires": [
            [
                "5e1d3bc857b0ca66",
                "72098ea2901a40af"
            ]
        ]
    },
    {
        "id": "5e1d3bc857b0ca66",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": ".pulse/default.pa",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2660,
        "y": 4600,
        "wires": [
            [
                "0df5850ca3b0283e"
            ]
        ]
    },
    {
        "id": "633011060fb16ff0",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 99",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 4680,
        "wires": []
    },
    {
        "id": "72098ea2901a40af",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 100",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 4660,
        "wires": []
    },
    {
        "id": "0df5850ca3b0283e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 101",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 4640,
        "wires": []
    },
    {
        "id": "c9647e53cf057db0",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 1970,
        "y": 4600,
        "wires": [
            [
                "f7ca7a69e580bb6e"
            ]
        ]
    },
    {
        "id": "269931d9bf2e7e45",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": ".pulse/client.conf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2430,
        "y": 4740,
        "wires": [
            [
                "464085724dd8e17e"
            ]
        ]
    },
    {
        "id": "8ff9c53e0ef523d6",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "default-server = 127.0.0.1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 4740,
        "wires": [
            [
                "269931d9bf2e7e45",
                "02f16bd01dfe9c1e"
            ]
        ]
    },
    {
        "id": "464085724dd8e17e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 102",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2690,
        "y": 4780,
        "wires": []
    },
    {
        "id": "02f16bd01dfe9c1e",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 103",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 4800,
        "wires": []
    },
    {
        "id": "68fc5bfc35339f45",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 1970,
        "y": 4740,
        "wires": [
            [
                "8ff9c53e0ef523d6"
            ]
        ]
    },
    {
        "id": "971903158ff678d8",
        "type": "file in",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/client.conf",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2180,
        "y": 4300,
        "wires": [
            [
                "f328c4d89098b855",
                "3da8907f333e75da"
            ]
        ]
    },
    {
        "id": "f328c4d89098b855",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload & 'default-server = unix:/tmp/pulse-server'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2420,
        "y": 4280,
        "wires": [
            [
                "46b6c0073736b593",
                "366adfff312e6a88"
            ]
        ]
    },
    {
        "id": "366adfff312e6a88",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/client.conf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2700,
        "y": 4280,
        "wires": [
            [
                "ac347988db23d754"
            ]
        ]
    },
    {
        "id": "3da8907f333e75da",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 104",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 4380,
        "wires": []
    },
    {
        "id": "46b6c0073736b593",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 105",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 4360,
        "wires": []
    },
    {
        "id": "ac347988db23d754",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 106",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 4340,
        "wires": []
    },
    {
        "id": "ad24056dfb41aad1",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 1970,
        "y": 4300,
        "wires": [
            [
                "971903158ff678d8"
            ]
        ]
    },
    {
        "id": "4d1007ccf304fd2d",
        "type": "file in",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/default.pa",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2160,
        "y": 4440,
        "wires": [
            [
                "08f9d1fa97e95e8c",
                "4e2039ab2ac2fba7"
            ]
        ]
    },
    {
        "id": "08f9d1fa97e95e8c",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "load-module module-native-protocol-unix",
                "fromt": "str",
                "to": "load-module module-native-protocol-unix auth-group=audio socket=/tmp/pulse-server",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2440,
        "y": 4420,
        "wires": [
            [
                "779348476f453acb",
                "6fac32e8e113c721"
            ]
        ]
    },
    {
        "id": "6fac32e8e113c721",
        "type": "file",
        "z": "58612799aa277ac1",
        "name": "",
        "filename": "/etc/pulse/default.pa",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2700,
        "y": 4420,
        "wires": [
            [
                "fecb5622fb06759c"
            ]
        ]
    },
    {
        "id": "4e2039ab2ac2fba7",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 107",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 4520,
        "wires": []
    },
    {
        "id": "779348476f453acb",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 108",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 4500,
        "wires": []
    },
    {
        "id": "fecb5622fb06759c",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 109",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 4480,
        "wires": []
    },
    {
        "id": "c408e707108bb8ef",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 1970,
        "y": 4440,
        "wires": [
            [
                "4d1007ccf304fd2d"
            ]
        ]
    },
    {
        "id": "edede2651c7d6258",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "HAVE WORK TO DO HERE",
        "info": "Transform all of that to connect it to /monaco url\nMake a subflow to choose securly the file host file system unless i found a trick with the api and ftp of dolibarr or both\n",
        "x": 220,
        "y": 3120,
        "wires": []
    },
    {
        "id": "a3374e50370878b6",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "",
        "filename": ".node-red/settings.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1100,
        "y": 4560,
        "wires": [
            [
                "d72a687de4c05810"
            ]
        ]
    },
    {
        "id": "de1fd53ecadbdd70",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "46c394b9fe31938d",
        "name": "Need to activage storage context manualy",
        "info": "",
        "x": 820,
        "y": 4580,
        "wires": []
    },
    {
        "id": "9cbd226f41623739",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "path",
                "v": "monaco-editor/samples",
                "vt": "str"
            },
            {
                "p": "packageName",
                "v": "@babylonjs/core",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 400,
        "wires": [
            [
                "feb6423ccda74b39"
            ]
        ]
    },
    {
        "id": "eecacf4a1b7d3deb",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "8cfbfd4b547ffaaa",
        "name": "For the FTP server",
        "info": "Modify the /etc/vsftpd.conf file\nuncomment #write_enable=YES\n\nAdd\nforce_dot_files=YES\n",
        "x": 170,
        "y": 2220,
        "wires": []
    },
    {
        "id": "c412948805ae429d",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "8cfbfd4b547ffaaa",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S apt install vsftpdt\"]",
        "payloadType": "json",
        "x": 150,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "897b32cd68564065",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "For the code editor",
        "info": "NEED WORK but i think we gonna do our file explorer from where we gonna iframe the dashboard. inception :)\n",
        "x": 210,
        "y": 2420,
        "wires": []
    },
    {
        "id": "66209d838052f00f",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"git clone https://github.com/microsoft/monaco-editor.git\",\"cd monaco-editor\",\"cd samples\",\"npm install .\",\"sudo -S rm -r browser-amd-diff-editor browser-amd-iframe browser-amd-localized browser-amd-monarch browser-amd-requirejs browser-amd-shadow-dom browser-amd-shared-model browser-amd-trusted-types browser-esm-esbuild browser-esm-parcel browser-esm-vite-react browser-esm-webpack browser-esm-webpack-monaco-plugin browser-esm-webpack-small browser-esm-webpack-typescript browser-esm-webpack-typescript-react browser-script-editor electron-amd electron-amd-nodeIntegration electron-esm-webpack\",\"npm run simpleserver\"]",
        "payloadType": "json",
        "x": 190,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "ae5b0c3de2e9bfd3",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "Need to acces to monaco brwser environement with autocompletion for navigator or document for exemple",
        "info": "\n",
        "x": 480,
        "y": 2460,
        "wires": []
    },
    {
        "id": "be2710e466f51db7",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "Need to switch to ace editor for node-red because it seems doesn't work. The site of monaco they that doesnt works on mobile but the setup i have above work",
        "info": "\n",
        "x": 640,
        "y": 2560,
        "wires": []
    },
    {
        "id": "a088d1fb929f2f52",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "filename": ".node-red/settings.js",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 2600,
        "wires": [
            [
                "5f665af951315de1"
            ]
        ]
    },
    {
        "id": "5f665af951315de1",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "enable ace",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "lib: \"monaco\"",
                "fromt": "str",
                "to": "lib: \"ace\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2600,
        "wires": [
            [
                "131e96d053c32f42"
            ]
        ]
    },
    {
        "id": "131e96d053c32f42",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "filename": ".node-red/settings.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 820,
        "y": 2600,
        "wires": [
            [
                "a3d878b06114da7b"
            ]
        ]
    },
    {
        "id": "4450469cda167fc0",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "x": 190,
        "y": 2600,
        "wires": [
            [
                "a088d1fb929f2f52"
            ]
        ]
    },
    {
        "id": "a3d878b06114da7b",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "debug 118",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 2600,
        "wires": []
    },
    {
        "id": "39cd7acbe7d1995e",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "To add the function i strore in lib because it's project shared in node-red",
        "info": "",
        "x": 350,
        "y": 4720,
        "wires": []
    },
    {
        "id": "66dcd234ef93e3dd",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\t    'sudo -S rm -r ' & $globalContext(\"projectDir\") & '/lib',\t    'sudo -S cp -r .node-red/lib/functions ' & $globalContext(\"projectDir\")\t]",
        "payloadType": "jsonata",
        "x": 170,
        "y": 4780,
        "wires": [
            [
                "8de50771ed9d3a9b"
            ]
        ]
    },
    {
        "id": "dd7287eae557868f",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "REALY NEED TO DO SOMETHING SECURE  TO BE ABLE TO DONT USE PASSWORD WITH MY DYNAMIQUE TERMINAL",
        "info": "",
        "x": 500,
        "y": 4860,
        "wires": []
    },
    {
        "id": "b95d724f0e0f91d0",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "Launch code editor on boot ",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 240,
        "y": 2660,
        "wires": [
            [
                "83742d04b00d4962",
                "dc9cab5eed7cfd6e"
            ]
        ]
    },
    {
        "id": "8de50771ed9d3a9b",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 285,
        "y": 4780,
        "wires": []
    },
    {
        "id": "ffa58bf3e16ae1ed",
        "type": "link out",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "From launch code editor",
        "mode": "link",
        "links": [
            "ef08ad9ecb7fca29"
        ],
        "x": 1385,
        "y": 2660,
        "wires": []
    },
    {
        "id": "e56274cb05305b00",
        "type": "function",
        "z": "58612799aa277ac1",
        "name": "function 12",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 3940,
        "wires": [
            []
        ]
    },
    {
        "id": "83742d04b00d4962",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "debug 122",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 3240,
        "wires": []
    },
    {
        "id": "6b578c891d3ce9a6",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "",
        "filename": "filenameOfVscode",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1020,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "92943c50a2dfbfe6",
        "type": "template",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "let fullVariable = {{payload}}",
        "output": "str",
        "x": 760,
        "y": 3320,
        "wires": [
            [
                "6b578c891d3ce9a6"
            ]
        ]
    },
    {
        "id": "35b87e9a954c6937",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "",
        "filename": "filenameOfVscode",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 720,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "0234295ea7383535",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "Get the file name you have write",
        "func": "const dir = global.get(\"projectDir\")+'/tmp';\nmsg.filenameOfVscode = flow.get(\"filename\")\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3200,
        "wires": [
            [
                "35b87e9a954c6937"
            ]
        ]
    },
    {
        "id": "760badbe8e3ed936",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "Load the file",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 3200,
        "wires": [
            [
                "0234295ea7383535"
            ]
        ]
    },
    {
        "id": "0fd64f1e6b088488",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "Generate the file TEMPLATE",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "8e6d3dcf7176f18d",
        "type": "link in",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "Load the vscode.js file",
        "links": [],
        "x": 375,
        "y": 3160,
        "wires": [
            [
                "0234295ea7383535"
            ]
        ]
    },
    {
        "id": "4604272727a07ff1",
        "type": "link in",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "Generate the vscode.js file",
        "links": [],
        "x": 155,
        "y": 3320,
        "wires": [
            [
                "59b121e17efff7d2"
            ]
        ]
    },
    {
        "id": "644ae9c5869f20c3",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "Generate the file for UI TEMPLATE node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 3400,
        "wires": [
            [
                "883411432449704e"
            ]
        ]
    },
    {
        "id": "45e3a61c1354cb35",
        "type": "template",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "let msg = {{{payload}}}\n//NO SCRIPT HERE because console.log doesnt work in function you declare here so the code generate dont gonna be portable outise the dashboard\n\n//Declare function and excute code outise at boot and return the scope you can do that only once in each ui template node \n//Part run on reload page\n(function(scope,msg){\n    //declare function\n    \n    //do some stuff at boot\n    //Part on Message AND on relaod if YOU SET reload last value on refresh on THIS NODE\n    //The $watch is leave because if you dont use ui template node that gonna be an entry on websocket or mqqt for exmple \n    scope.$watch('msg', function(msg) {\n        //if you put someting outise the if below that gonna be run on page reload if reload last value on refresh\n        if (msg) {\n        }\n        //NO CODE\n    })\n})(scope);",
        "output": "str",
        "x": 760,
        "y": 3360,
        "wires": [
            [
                "2f1236dc863922a8",
                "6b578c891d3ce9a6"
            ]
        ]
    },
    {
        "id": "71fc105a8df8e25c",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "Function to use node-red variable vscode UI TEMPLATE NODE",
        "func": "//You can can have intellisense for msg no global and flow bacause they can't be use in UI TEMPLATE node\n//to go back in node-red to check value. With this setup you can use intelissense instead of go back to node-red.\n//all of the object create here is delete after so do not remove the \\n in function below\nconst dir = global.get(\"projectDir\")+'/tmp';\nfs.readdir(dir, (err, files) => {\n    console.log(files.length);\n    let flows\n    let globals\n    flows = flow.keys()\n    globals = global.keys()\n    if(files.length%2===0){\n        msg.filenameOfVscode = dir+'/vscode1.js';\n    }else{\n        msg.filenameOfVscode = dir+'/vscode2.js';\n    }\n    node.send({ payload: JSON.stringify(msg) + '\\n', filenameOfVscode: msg.filenameOfVscode}) \n});\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 450,
        "y": 3360,
        "wires": [
            [
                "45e3a61c1354cb35",
                "8cd4975e3213c86b"
            ]
        ]
    },
    {
        "id": "883411432449704e",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "trtrttrtr",
                "pt": "flow",
                "to": "zgerregerregregregregerg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 3400,
        "wires": [
            [
                "71fc105a8df8e25c"
            ]
        ]
    },
    {
        "id": "59b121e17efff7d2",
        "type": "function",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "Function to use node-red variable vscode for TEMPLATE NODE",
        "func": "//You can can have intellisense for msg but not for global and flow. They are here to avoid\n//to go back in node-red to check value. With this setup you can use intelissense instead of go back to node-red\n//all of the object create here is delete after so do not remove the \\n in function below\nconst dir = global.get(\"projectDir\")+'/tmp';\nfs.readdir(dir, (err, files) => {\n    console.log(files.length);\n    let flows\n    let globals\n    flows = flow.keys()\n    globals = global.keys()\n    if(files.length%2===0){\n        msg.filenameOfVscode = dir+'/vscode1.js';\n    }else{\n        msg.filenameOfVscode = dir+'/vscode2.js';\n    }\n    node.send({ payload: \"let fullVariable = \" + '{ \"flow\": ' + JSON.stringify(flows) + ', \"global\": ' + JSON.stringify(globals) + ', \"msg\": ' + JSON.stringify(msg) + ' }\\n', filenameOfVscode: msg.filenameOfVscode}) \n});\nreturn;\n//TO DO\n//transform all fullVariable.flows.nameofvariable par flow.get ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 450,
        "y": 3320,
        "wires": [
            [
                "92943c50a2dfbfe6"
            ]
        ]
    },
    {
        "id": "8cd4975e3213c86b",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "debug 123",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 3400,
        "wires": []
    },
    {
        "id": "2f1236dc863922a8",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "aaefab6005603b24",
        "name": "debug 124",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 3380,
        "wires": []
    },
    {
        "id": "5bf4bc855e96c3d8",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "Some stuuf for enable bluetooth",
        "info": "add pulse audio in bluetooth group\nsudo usermod -a -G pulse-access root\nvicky@vicky:~$ sudo usermod -a -G pulse-access vicky",
        "x": 2270,
        "y": 2340,
        "wires": []
    },
    {
        "id": "62e8d7523cb057be",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\"bash \" & $globalContext('projectDir') & '/scripts/codeEditorLauncher.sh']",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 2660,
        "wires": [
            [
                "ffa58bf3e16ae1ed"
            ]
        ]
    },
    {
        "id": "dc9cab5eed7cfd6e",
        "type": "http request",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.21:8888",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 2660,
        "wires": [
            []
        ]
    },
    {
        "id": "5a85bdc5d5537aeb",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "scope": [
            "dc9cab5eed7cfd6e"
        ],
        "uncaught": false,
        "x": 690,
        "y": 2660,
        "wires": [
            [
                "2b32f4e6842f6e0f",
                "a3d878b06114da7b"
            ]
        ]
    },
    {
        "id": "297b840c8c33ad10",
        "type": "delay",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 2660,
        "wires": [
            [
                "62e8d7523cb057be"
            ]
        ]
    },
    {
        "id": "2b32f4e6842f6e0f",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delai",
                "pt": "msg",
                "to": "delay ? delay*2 : 3",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 2660,
        "wires": [
            [
                "297b840c8c33ad10"
            ]
        ]
    },
    {
        "id": "b52d0d7cbb9cdde2",
        "type": "status",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "",
        "scope": [
            "dc9cab5eed7cfd6e"
        ],
        "x": 700,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "cfe6d4fd97bb1b1f",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "0328ce0eff9e869c",
        "name": "HAVE TO check if just status node do the job",
        "info": "",
        "x": 970,
        "y": 2700,
        "wires": []
    },
    {
        "id": "b22e8c34e3c6174c",
        "type": "inject",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "Watcher on boot for doliabarr",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 240,
        "y": 1860,
        "wires": [
            [
                "630cc094f6d75424"
            ]
        ]
    },
    {
        "id": "9c30f180c779a0ae",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\"bash \" & $globalContext('projectDir') & '/scripts/codeEditorLauncher.sh']",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 1860,
        "wires": [
            [
                "4fea3db2be1130a0"
            ]
        ]
    },
    {
        "id": "c5e7f851e0c4ab0e",
        "type": "http request",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "594b0945db5eebb9",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "scope": [
            "c5e7f851e0c4ab0e"
        ],
        "uncaught": false,
        "x": 910,
        "y": 1860,
        "wires": [
            [
                "9cb86f66b820c14b"
            ]
        ]
    },
    {
        "id": "b9c63bad1142095d",
        "type": "delay",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1300,
        "y": 1860,
        "wires": [
            [
                "9c30f180c779a0ae"
            ]
        ]
    },
    {
        "id": "9cb86f66b820c14b",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delai",
                "pt": "msg",
                "to": "delay ? delay*2 : 3",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 1860,
        "wires": [
            [
                "b9c63bad1142095d"
            ]
        ]
    },
    {
        "id": "6a86a59afad7a589",
        "type": "status",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "scope": [
            "c5e7f851e0c4ab0e"
        ],
        "x": 920,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "52524af9a0d3c8f7",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "HAVE TO check if just status node do the job",
        "info": "",
        "x": 1190,
        "y": 1900,
        "wires": []
    },
    {
        "id": "630cc094f6d75424",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "http://192.168.1.21:8300",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1860,
        "wires": [
            [
                "c5e7f851e0c4ab0e"
            ]
        ]
    },
    {
        "id": "4fea3db2be1130a0",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "debug 125",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1920,
        "wires": []
    },
    {
        "id": "8de176368996881d",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "Check if available on boot",
        "info": "",
        "x": 210,
        "y": 1820,
        "wires": []
    },
    {
        "id": "3f49a31fa4f700f6",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "bfc704b686cc3297",
        "name": "HAVE TO ADD dolibarr module of techsc in the project",
        "info": "At this point you must have a dolibarr up on the port you have set\nYou need to to the next buble to security",
        "x": 280,
        "y": 1960,
        "wires": []
    },
    {
        "id": "f9f53b13488ebfc5",
        "type": "http in",
        "z": "58612799aa277ac1",
        "g": "80ba0fd3b11a4601",
        "name": "",
        "url": "getFile",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 2840,
        "wires": [
            [
                "e7a9b0144a630427",
                "63a6196d3d87b2ea"
            ]
        ]
    },
    {
        "id": "281a060999216133",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "80ba0fd3b11a4601",
        "name": "Handle open file",
        "info": "",
        "x": 180,
        "y": 2800,
        "wires": []
    },
    {
        "id": "4f403cc62cf4d850",
        "type": "http response",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1040,
        "y": 2820,
        "wires": []
    },
    {
        "id": "e7a9b0144a630427",
        "type": "file in",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 620,
        "y": 2840,
        "wires": [
            [
                "71e258007014ecb6",
                "4f403cc62cf4d850"
            ]
        ]
    },
    {
        "id": "63a6196d3d87b2ea",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "debug 127",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 2820,
        "wires": []
    },
    {
        "id": "b117617ff4a68b12",
        "type": "http in",
        "z": "58612799aa277ac1",
        "g": "6bf4b4356282ce85",
        "name": "",
        "url": "postFile",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 2980,
        "wires": [
            [
                "5bb3c3d459c6b692",
                "aded2ddd2cf18168"
            ]
        ]
    },
    {
        "id": "a25b0c8a58f57dee",
        "type": "comment",
        "z": "58612799aa277ac1",
        "g": "6bf4b4356282ce85",
        "name": "Handle post file",
        "info": "",
        "x": 200,
        "y": 2940,
        "wires": []
    },
    {
        "id": "5bb3c3d459c6b692",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "debug 128",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 2940,
        "wires": []
    },
    {
        "id": "657bd285e9d8ebc6",
        "type": "file",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 820,
        "y": 2980,
        "wires": [
            [
                "6c39d6ac8b53f3a2",
                "4bb9984255f0c91f"
            ]
        ]
    },
    {
        "id": "4ee04c8733fdd089",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "",
        "info": "",
        "x": 2120,
        "y": 2140,
        "wires": []
    },
    {
        "id": "db6ed91d83a7dd13",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "Load the user of the OS because with node-red create file with root acces so  you have to handle permissions for some write file node",
        "info": "",
        "x": 520,
        "y": 540,
        "wires": []
    },
    {
        "id": "a8877ed283dac019",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "feb59419786f5177"
            ]
        ]
    },
    {
        "id": "cc5ad03705d058e4",
        "type": "link in",
        "z": "58612799aa277ac1",
        "name": "Go to load user os",
        "links": [
            "b0e63695bcd5c315"
        ],
        "x": 645,
        "y": 600,
        "wires": [
            [
                "90248df8ca18f6ba"
            ]
        ]
    },
    {
        "id": "27b05f485af9e106",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "ef08ad9ecb7fca29"
        ],
        "x": 455,
        "y": 600,
        "wires": []
    },
    {
        "id": "90248df8ca18f6ba",
        "type": "switch",
        "z": "58612799aa277ac1",
        "name": "",
        "property": "lastCommand",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "id -un",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "child process exited with code 0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 600,
        "wires": [
            [
                "3b011cf37635651a"
            ],
            [
                "b615aa5df78a3970"
            ]
        ]
    },
    {
        "id": "3b011cf37635651a",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "OSUser",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 580,
        "wires": [
            [
                "504b36d4a62a76d6"
            ]
        ]
    },
    {
        "id": "b615aa5df78a3970",
        "type": "switch",
        "z": "58612799aa277ac1",
        "name": "",
        "property": "OSUser",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 660,
        "wires": [
            [
                "4edd0e02917e548e",
                "9469ffd8127e2810"
            ],
            [
                "9469ffd8127e2810"
            ]
        ]
    },
    {
        "id": "26bed7857859d975",
        "type": "switch",
        "z": "58612799aa277ac1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Cancel",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1450,
        "y": 640,
        "wires": [
            [
                "feb59419786f5177"
            ]
        ]
    },
    {
        "id": "feb59419786f5177",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\"id -un\"]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 600,
        "wires": [
            [
                "27b05f485af9e106"
            ]
        ]
    },
    {
        "id": "4edd0e02917e548e",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "4465fa74532be31f"
            ]
        ]
    },
    {
        "id": "504b36d4a62a76d6",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 580,
        "wires": [
            [
                "7362f4e09732f0d8"
            ]
        ]
    },
    {
        "id": "9469ffd8127e2810",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "No OS user the button will be desactivated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "cdfd1d73457ea283"
            ]
        ]
    },
    {
        "id": "4465fa74532be31f",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "",
        "mode": "link",
        "links": [
            "43c0975e7bb96e1a",
            "9a3d1961c9c303cd",
            "bb05228eade21d1f"
        ],
        "x": 1285,
        "y": 680,
        "wires": []
    },
    {
        "id": "7362f4e09732f0d8",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd"
        ],
        "x": 1415,
        "y": 580,
        "wires": []
    },
    {
        "id": "4bb9984255f0c91f",
        "type": "http response",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1060,
        "y": 2980,
        "wires": []
    },
    {
        "id": "aded2ddd2cf18168",
        "type": "json",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 2980,
        "wires": [
            [
                "75ac1ca7fa413f61"
            ]
        ]
    },
    {
        "id": "c026a51af0aa6b5a",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "debug 132",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 3040,
        "wires": []
    },
    {
        "id": "75ac1ca7fa413f61",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.filePath",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 2980,
        "wires": [
            [
                "c026a51af0aa6b5a",
                "657bd285e9d8ebc6"
            ]
        ]
    },
    {
        "id": "6c39d6ac8b53f3a2",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "debug 133",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 3040,
        "wires": []
    },
    {
        "id": "1b2b666738fe9f5b",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "debug 134",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2880,
        "wires": []
    },
    {
        "id": "21d8261bc6d0272f",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "scope": [
            "e7a9b0144a630427"
        ],
        "uncaught": false,
        "x": 610,
        "y": 2800,
        "wires": [
            [
                "1b2b666738fe9f5b",
                "061dc4af9fb5dc61"
            ]
        ]
    },
    {
        "id": "9f6fc0bff70a90d9",
        "type": "catch",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "scope": [
            "657bd285e9d8ebc6"
        ],
        "uncaught": false,
        "x": 830,
        "y": 3040,
        "wires": [
            [
                "4bb9984255f0c91f",
                "aa980b1b7bf39673"
            ]
        ]
    },
    {
        "id": "061dc4af9fb5dc61",
        "type": "change",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 2800,
        "wires": [
            [
                "4f403cc62cf4d850",
                "1b2b666738fe9f5b"
            ]
        ]
    },
    {
        "id": "71e258007014ecb6",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "debug 135",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2900,
        "wires": []
    },
    {
        "id": "aa980b1b7bf39673",
        "type": "debug",
        "z": "58612799aa277ac1",
        "g": "3cea4fa4d7e4a894",
        "name": "debug 138",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 3060,
        "wires": []
    },
    {
        "id": "6730444c7d0ae92f",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "For the 3D CAO",
        "info": "",
        "x": 180,
        "y": 4960,
        "wires": []
    },
    {
        "id": "bbbac82b0e8ca5c5",
        "type": "projectdir",
        "z": "58612799aa277ac1",
        "name": "",
        "x": 320,
        "y": 180,
        "wires": [
            [
                "db6ff932806cc474"
            ]
        ]
    },
    {
        "id": "7991a19d69835c5c",
        "type": "sox-play",
        "z": "58612799aa277ac1",
        "name": "",
        "outputDevice": "default",
        "manualOutput": "",
        "gain": "0",
        "startNew": "start",
        "playStream": false,
        "inputEncoding": "signed-integer",
        "inputChannels": 1,
        "inputRate": 16000,
        "inputBits": 16,
        "debugOutput": true,
        "x": 2700,
        "y": 760,
        "wires": [
            [
                "2a57bc40ec44ac59"
            ]
        ]
    },
    {
        "id": "e81dc83962f7d46b",
        "type": "sox-record",
        "z": "58612799aa277ac1",
        "name": "",
        "buttonStart": "msg",
        "inputs": 1,
        "inputSource": "default",
        "manualSource": "0:0",
        "inputEncoding": "signed-integer",
        "inputChannels": 1,
        "inputRate": 16000,
        "inputBits": 16,
        "byteOrder": "-L",
        "encoding": "signed-integer",
        "channels": 1,
        "rate": 16000,
        "bits": 16,
        "gain": "0",
        "buffer": "4096",
        "showDuration": true,
        "durationType": "limited",
        "durationLength": "10",
        "silenceDetection": "nothing",
        "silenceDuration": "2.0",
        "silenceThreshold": "2.0",
        "outputFormat": "file",
        "manualPath": "test2",
        "debugOutput": true,
        "x": 2670,
        "y": 840,
        "wires": [
            [
                "3edb45e1ae2cc323"
            ],
            [
                "3cdbfa3787dc9c5a"
            ]
        ]
    },
    {
        "id": "cdfd1d73457ea283",
        "type": "ui_toast",
        "z": "58612799aa277ac1",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Retry",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "26bed7857859d975"
            ]
        ]
    },
    {
        "id": "89abe519e798830c",
        "type": "ui_ui_control",
        "z": "58612799aa277ac1",
        "name": "",
        "events": "connect",
        "x": 800,
        "y": 660,
        "wires": [
            [
                "b615aa5df78a3970"
            ]
        ]
    },
    {
        "id": "dd12c1941d59bdf6",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "For MQTT broker",
        "info": "",
        "x": 180,
        "y": 3520,
        "wires": []
    },
    {
        "id": "c32f9ff98b097d80",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "Install mosquitto",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S apt-get install mosquitto\"]",
        "payloadType": "jsonata",
        "x": 200,
        "y": 3580,
        "wires": [
            [
                "e38177f099bbd16e"
            ]
        ]
    },
    {
        "id": "e38177f099bbd16e",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 345,
        "y": 3560,
        "wires": []
    },
    {
        "id": "ac77b23c553996f1",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "Enable service and create user",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S systemctl enable mosquitto\",\"sudo -S systemctl start mosquitto\",\"sudo -S mosquitto_passwd -c /etc/mosquitto/passwd rhasspy \"]",
        "payloadType": "jsonata",
        "x": 250,
        "y": 3660,
        "wires": [
            [
                "554e2cdad38c152a"
            ]
        ]
    },
    {
        "id": "554e2cdad38c152a",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 465,
        "y": 3660,
        "wires": []
    },
    {
        "id": "6d3f5c59c5819fde",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "To run in terminal",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo nano /etc/mosquitto/mosquitto.conf\"]",
        "payloadType": "jsonata",
        "x": 200,
        "y": 3760,
        "wires": [
            []
        ]
    },
    {
        "id": "75352da420673640",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "THINGS TO DO HERE",
        "info": "put that at this end of the file of the nano command\n\npassword_file /etc/mosquitto/passwd\nallow_anonymous false",
        "x": 200,
        "y": 3720,
        "wires": []
    },
    {
        "id": "6c0ac8444bf62c1b",
        "type": "mqtt in",
        "z": "58612799aa277ac1",
        "name": "",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "91f1b589e74d876c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 890,
        "y": 3640,
        "wires": [
            [
                "305835f3101efbfc"
            ]
        ]
    },
    {
        "id": "305835f3101efbfc",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 142",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 3660,
        "wires": []
    },
    {
        "id": "2a9a6b052c07bc4d",
        "type": "catch",
        "z": "58612799aa277ac1",
        "name": "",
        "scope": [
            "6c0ac8444bf62c1b"
        ],
        "uncaught": false,
        "x": 850,
        "y": 3700,
        "wires": [
            [
                "305835f3101efbfc"
            ]
        ]
    },
    {
        "id": "d1096ce6e17217b2",
        "type": "mqtt out",
        "z": "58612799aa277ac1",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "91f1b589e74d876c",
        "x": 1050,
        "y": 3760,
        "wires": []
    },
    {
        "id": "594fabac30c5d5c6",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "Create the certificate",
        "info": "thx to https://www.coxprod.org/domotique/securiser-la-connexion-mqtt-dans-rhasspy/4/\n\nLe premier, c’est “Organization Unit”. Ce champ nous permettra de mettre le rôle associé au certificat. Le second, c’est le champ “Common name”. Il faudra soit mettre le hostname soit son adresse IP. Donc si l’IP n’est pas fixe, préfère le hostname. Il ne faut pas que 2 certificats aient les mêmes informations, sinon, ça va foirer.\n\nsudo openssl req -out mosquitto.csr -key mosquitto.key -new\nComme tout à l’heure, il va falloir entrer quelques informations. Là aussi, il faudra bien faire attention aux 2 champs “Organization Name” et “Common name”. Par contre, ne rentre pas de “challenge password”. Tapes juste sur “Entrée”",
        "x": 190,
        "y": 3820,
        "wires": []
    },
    {
        "id": "eea0f3866282dea4",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 495,
        "y": 3880,
        "wires": []
    },
    {
        "id": "bf7aab4550ce1ea6",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "generate certificat",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\t   \"sudo -S mkdir \"&certsPath,\t   \"sudo -S mkdir \"&caPath,\t   \"sudo -S openssl req -new -x509 -days 3650 -extensions v3_ca -keyout \"&caPath&\"/ca.key -out \"&caPath&\"/ca.crt\",\t   \"sudo -S chmod 600 \"&caPath&\"ca.key \"&caPath&\"/ca.crt\",\t   \"sudo -S mkdir \"&certsPath&\"/\"&applicationName,\t   \"sudo -S openssl genrsa -out \"&certsPath&\"/\"&applicationName&\"/mosquitto.key 2048\",\t   \"sudo -S openssl req -out \"&certsPath&\"/\"&applicationName&\"mosquitto.csr -key \"&certsPath&\"/\"&applicationName&\"/mosquitto.key -new\",\t   \"sudo -S openssl x509 -req -in \"&certsPath&\"/\"&applicationName&\"/mosquitto.csr -CA \"&caPath&\"/ca.crt -CAkey \"&caPath&\"/ca.key -CAcreateserial -out \"&certsPath&\"/\"&applicationName&\"/mosquitto.crt -days 3650\",\t   \"sudo -S chmod 600 \"&certsPath&\"/\"&applicationName&\"/mosquitto.csr \"&certsPath&\"/\"&applicationName&\"/mosquitto.key \"&certsPath&\"/\"&applicationName&\"/mosquitto.crt\"\t]",
        "payloadType": "jsonata",
        "x": 230,
        "y": 840,
        "wires": [
            [
                "d348509c533ac2a8"
            ]
        ]
    },
    {
        "id": "d348509c533ac2a8",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 595,
        "y": 860,
        "wires": []
    },
    {
        "id": "24c84fabf45d5e04",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "Script generator for ssh",
        "info": "",
        "x": 220,
        "y": 740,
        "wires": []
    },
    {
        "id": "0ee4f173c5c400d1",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "certsPath",
                "v": "/etc/certs",
                "vt": "str"
            },
            {
                "p": "caPath",
                "v": "certsPath & '/ca'",
                "vt": "jsonata"
            },
            {
                "p": "country",
                "v": "FR",
                "vt": "str"
            },
            {
                "p": "state",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "locality",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "organization",
                "v": "TechSC",
                "vt": "str"
            },
            {
                "p": "organizationalUnit",
                "v": "ca",
                "vt": "str"
            },
            {
                "p": "email",
                "v": "accueil@techsc.fr",
                "vt": "str"
            },
            {
                "p": "applicationName",
                "v": "rhasspy",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 800,
        "wires": [
            [
                "61fa31b769cbb57c"
            ]
        ]
    },
    {
        "id": "61fa31b769cbb57c",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "Script generator ssl",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t   \"sudo mkdir \"&certsPath,\t   \"sudo mkdir \"&caPath,\t   \"sudo openssl req -new -x509 -days 3650 -extensions v3_ca -keyout \"&caPath&\"/ca.key -out \"&caPath&\"/ca.crt\",\t   \"sudo chmod 600 \"&caPath&\"ca.key \"&caPath&\"/ca.crt\",\t   \"sudo mkdir \"&certsPath&\"/\"&applicationName,\t   \"sudo openssl genrsa -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key 2048\",\t   \"sudo openssl req -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr -key \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key -new\",\t   \"sudo openssl x509 -req -in \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr -CA \"&caPath&\"/ca.crt -CAkey \"&caPath&\"/ca.key -CAcreateserial -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".crt -days 3650\",\t   \"sudo chmod 600 \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".crt\" \t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 800,
        "wires": [
            [
                "0f34db3c6059330a",
                "d348509c533ac2a8"
            ]
        ]
    },
    {
        "id": "0f34db3c6059330a",
        "type": "debug",
        "z": "58612799aa277ac1",
        "name": "debug 143",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 860,
        "wires": []
    },
    {
        "id": "d705226923c1c70b",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "certsPath",
                "v": "/etc/certs",
                "vt": "str"
            },
            {
                "p": "caPath",
                "v": "certsPath & '/ca'",
                "vt": "jsonata"
            },
            {
                "p": "country",
                "v": "FR",
                "vt": "str"
            },
            {
                "p": "state",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "locality",
                "v": "PARIS",
                "vt": "str"
            },
            {
                "p": "organization",
                "v": "TechSC",
                "vt": "str"
            },
            {
                "p": "organizationalUnit",
                "v": "ca",
                "vt": "str"
            },
            {
                "p": "email",
                "v": "accueil@techsc.fr",
                "vt": "str"
            },
            {
                "p": "applicationName",
                "v": "mosquitto",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 3880,
        "wires": [
            [
                "e76db92cc821e1dc"
            ]
        ]
    },
    {
        "id": "e76db92cc821e1dc",
        "type": "change",
        "z": "58612799aa277ac1",
        "name": "Script generator ssl",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t   \"sudo mkdir \"&certsPath,\t   \"sudo mkdir \"&caPath,\t   \"sudo openssl req -new -x509 -days 3650 -extensions v3_ca -keyout \"&caPath&\"/ca.key -out \"&caPath&\"/ca.crt\",\t   \"sudo chmod 600 \"&caPath&\"ca.key \"&caPath&\"/ca.crt\",\t   \"sudo mkdir \"&certsPath&\"/\"&applicationName,\t   \"sudo openssl genrsa -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key 2048\",\t   \"sudo openssl req -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr -key \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key -new\",\t   \"sudo openssl x509 -req -in \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr -CA \"&caPath&\"/ca.crt -CAkey \"&caPath&\"/ca.key -CAcreateserial -out \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".crt -days 3650\",\t   \"sudo chmod 600 \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".csr \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".key \"&certsPath&\"/\"&applicationName&\"/\"&applicationName&\".crt\" \t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 3880,
        "wires": [
            [
                "eea0f3866282dea4"
            ]
        ]
    },
    {
        "id": "7daa310ff267702c",
        "type": "comment",
        "z": "58612799aa277ac1",
        "name": "THINGS TO DO HERE",
        "info": "sudo nano /etc/mosquitto/mosquitto.conf\n\n//## Si on veut autoriser aussi les connexions non chiffrees\n//listener 1883\n\n## Activation des connexions chifrees par TLS\nlistener 8883\ncafile /etc/mosquitto/certs/ca.crt\ncertfile /etc/mosquitto/certs/mosquitto.crt\nkeyfile /etc/mosquitto/certs/mosquitto.key\ntls_version tlsv1.2\nrequire_certificate true",
        "x": 200,
        "y": 3960,
        "wires": []
    },
    {
        "id": "239311cd157b74fa",
        "type": "inject",
        "z": "58612799aa277ac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.crt /etc/mosquitto/certs\",\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.csr /etc/mosquitto/certs\",\"sudo -S cp -fr /etc/certs/mosquitto/mosquitto.key /etc/mosquitto/certs\",\"sudo -S cp /etc/certs/ca/ca.crt /etc/mosquitto/certs/\",\"sudo -S chown -R mosquitto /etc/mosquitto/certs\",\"mosquitto_passwd -c passwordfile user\",\"cp -fr passwordfile /etc/mosquitto\"]",
        "payloadType": "json",
        "x": 170,
        "y": 3920,
        "wires": [
            [
                "43a79bd58eabb2a7"
            ]
        ]
    },
    {
        "id": "43a79bd58eabb2a7",
        "type": "link out",
        "z": "58612799aa277ac1",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 315,
        "y": 3920,
        "wires": []
    },
    {
        "id": "217704d4bcad8509",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 100,
        "wires": []
    },
    {
        "id": "59676d069a581d48",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "name": "function 4",
        "func": "var lines = msg.payload.split('\\n')\nvar connections = []\nfor (let index = 1; index < lines.length-1; index++) {\n    const fields = lines[index];\n    let fieldsA = fields.split(' ')\n    for (let j = 0; j < fieldsA.length; j++) {\n        if(fieldsA[j] === \"\" && fieldsA[j+1] === \"\"){\n            fieldsA.splice(j,1)\n            j--\n        };\n        if(fieldsA[j] !== \"\" && fieldsA[j + 1] !== \"\"){\n            fieldsA[j] = fieldsA[j] + ' ' + fieldsA[j+1]\n            fieldsA.splice(j+1, 1)\n        }\n    }\n    let connection = {}\n    let cleanConnection = fieldsA.filter(field => { return field !== \"\" })\n    if (cleanConnection[0] === \"*\"){\n        connection.icon_name = \"fa-solid fa-wifi\"\n        cleanConnection.splice(0,1)\n    }\n    connection.BSSID = cleanConnection[0]\n    connection.SSID = cleanConnection[1]\n    connection.mode = cleanConnection[2]\n    connection.chan = cleanConnection[3]\n    connection.rate = cleanConnection[4] + ' ' + cleanConnection[5]\n    connection.signal = cleanConnection[6]\n    connection.bars = cleanConnection[7]\n    connection.security = [cleanConnection[8],cleanConnection[9]]\n    //For the lsit node\n    connection.title = connection.SSID\n    connection.description = connection.signal\n    connection.menu = [\"Connect\"]\n    connections.push(connection)\n    \n}\nmsg.connexions = connections\nmsg.payload = connections\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 140,
        "wires": [
            [
                "d1944d4ac30b8216",
                "c280ced4041a7ec7",
                "9b0b777f741c8465"
            ]
        ]
    },
    {
        "id": "f899bfee50c2c5f6",
        "type": "file",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "filename": "/home/vicky/.node-red/projects/techscorangepi/child.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1860,
        "y": 800,
        "wires": [
            [
                "7f82046bd9d0371b"
            ]
        ]
    },
    {
        "id": "5fe632846e1697cf",
        "type": "template",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "var cp = require('child_process');\nlet child = cp.spawn('{{command}}', {{{args}}})\nchild.stdout.on('data', function (data) {\n    process.stdout.write(data.toString())\n    //console.log(data);\n});\nchild.stderr.on('data', function (data) {\n    console.log(`${data}`);\n});\nprocess.stdin.on('data', function (data) {\n    child.stdin.write(data)\n})\n\nchild.on('close', (code) => {\n    console.log(`child process exited with code ${code}`);\n});\n\n//process.on(\"message\", function (message) {\n//    console.log(`Message from main.js: ${message}`);\n//    cp.stdin.write(message)\n//});\n//cp.stdout.on('data', function (data) {\n//    console.log(`Message from main.js: ${data}`)\n//    process.send(data)\n//});\n",
        "output": "str",
        "x": 2200,
        "y": 760,
        "wires": [
            [
                "f899bfee50c2c5f6"
            ]
        ]
    },
    {
        "id": "9910400a70e3748f",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 360,
        "wires": []
    },
    {
        "id": "8db83594bc604f4d",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2700,
        "y": 760,
        "wires": []
    },
    {
        "id": "684d60b75c1cc9da",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 1020,
        "wires": []
    },
    {
        "id": "a97adb91c59c3879",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "fbe6a4c43eea3e9a"
            ]
        ]
    },
    {
        "id": "fbe6a4c43eea3e9a",
        "type": "exec",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "command": "nmcli dev wifi",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 310,
        "y": 140,
        "wires": [
            [
                "59676d069a581d48"
            ],
            [],
            []
        ]
    },
    {
        "id": "a24271ceb763c696",
        "type": "exec",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "command": "nmcli --ask dev wifi connect ",
        "addpay": "payload.SSID",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1040,
        "y": 120,
        "wires": [
            [
                "217704d4bcad8509",
                "fac21ad93363355e"
            ],
            [
                "217704d4bcad8509",
                "fac21ad93363355e"
            ],
            [
                "217704d4bcad8509",
                "fac21ad93363355e"
            ]
        ]
    },
    {
        "id": "cfef9b965281e35e",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "function 5",
        "func": " //the array is the arguments\nlet commands = msg.payload.commands.split('\\n')\nlet cmdAndArgs = commands[0].split(' ')\nlet cmd = cmdAndArgs[0]\ncmdAndArgs.splice(0,1)\nlet args = cmdAndArgs\nvar child = cp.spawn(cmd,args);\n//node.send({\"args\":args})\n//node.send({ \"cmd\":cmd})\n//node.send({ \"commands\":commands})\nfor (let index = 1; index < commands.length; index++) {\n    const element = commands[index];\n    child.stdin.write(element+'\\n')\n}\nchild.stdout.on('data', function (data) {\n    msg.payload = data.toString()\n    msg.process = child\n    node.send(msg);\n});\nchild.stderr.on('data', function (data) {\n    msg.payload = data.toString()\n    msg.process = child\n    node.send(msg);\n})\nchild.stdin.end(); \nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cp",
                "module": "child_process"
            }
        ],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "5dcd97a52a9af266",
                "a46c53a4f25125bf"
            ]
        ]
    },
    {
        "id": "aa1e2348a08323c8",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "9b0b777f741c8465",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 60,
        "wires": []
    },
    {
        "id": "44c756161c28b0e2",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2700,
        "y": 680,
        "wires": []
    },
    {
        "id": "7f82046bd9d0371b",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "start",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2190,
        "y": 800,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "05636ee319db6f24",
        "type": "json",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "args",
        "action": "",
        "pretty": false,
        "x": 2010,
        "y": 760,
        "wires": [
            [
                "5fe632846e1697cf"
            ]
        ]
    },
    {
        "id": "dc5517b9df8183b5",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "stop command",
        "props": [
            {
                "p": "kill",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2180,
        "y": 980,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "3879658cfc8f39a6",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "",
        "props": [
            {
                "p": "commands",
                "v": "[\"bluetoothctl\", \"devices\", \"devices\"]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "cfef9b965281e35e"
            ]
        ]
    },
    {
        "id": "3d8c166dafde23ec",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "function 6",
        "func": "if(msg.payload.args){\n    //handle space in args \"my args\" like\n    let args = []\n    let allIndex = []\n    let indexOfLastCut = 0\n    let indexOflasGuillemet\n    let indexOfLastSimpleQuote\n    let countOfGuillemet = 0\n    let countOfSimpleQuote = 0\n    let countOfspace = 0\n    for (let index = 0; index < msg.payload.args.length; index++) {\n        const element = msg.payload.args[index];\n        if (element === \"'\"){\n            countOfSimpleQuote++\n            indexOfLastSimpleQuote = index\n        }\n        if(index === msg.payload.args.length-1){\n            msg.indelascut = indexOfLastCut\n            msg.indexlasguile = indexOflasGuillemet\n            if (element !== '\"' && element !== \"'\" ){\n                if (indexOflasGuillemet === indexOfLastCut || indexOfLastSimpleQuote === indexOfLastCut ) {\n                    let arg = msg.payload.args.substring(indexOfLastCut+2)\n                    args.push(arg)\n                }else{\n                    let arg = msg.payload.args.substring(indexOfLastCut)\n                    args.push(arg)\n                }\n            }else{\n                let arg = msg.payload.args.substring(indexOfLastCut)\n                args.push(arg)\n            }      \n        }else{\n            if (element === '\"') {\n                indexOflasGuillemet = index\n                countOfGuillemet++\n            }\n            if (element === ' ') {\n                countOfspace++\n                if (countOfGuillemet % 2 === 0 && countOfSimpleQuote % 2 === 0) {\n                    let arg = msg.payload.args.substring(indexOfLastCut, index)\n                    args.push(arg)\n                    indexOfLastCut = index + 1    \n                } else {\n                }\n            }\n        }\n    }\n    msg.args = args\n}\nmsg.command = msg.payload.command\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 760,
        "wires": [
            [
                "05636ee319db6f24",
                "1961a1e8fed2c784"
            ]
        ]
    },
    {
        "id": "07b4fddee5d12ac2",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2170,
        "y": 1020,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "d1944d4ac30b8216",
        "type": "json",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "fac21ad93363355e"
            ]
        ]
    },
    {
        "id": "a46c53a4f25125bf",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "628dfb2257610e39",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1480,
        "y": 800,
        "wires": [
            [
                "3d8c166dafde23ec",
                "372c7037c1474f67"
            ]
        ]
    },
    {
        "id": "9cd7edf4b42d2e4f",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "name": "Connections",
        "info": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "ec2f91b7c82fe538",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "b8f8611163248bdd",
        "name": "Terminal one shot",
        "info": "",
        "x": 150,
        "y": 280,
        "wires": []
    },
    {
        "id": "5e50781edb13f822",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Terminal dynamique",
        "info": "",
        "x": 290,
        "y": 500,
        "wires": []
    },
    {
        "id": "8b9bf8042d6d0086",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 60,
        "y": 2920,
        "wires": [
            [
                "470e7c7b3fdd0dd4"
            ]
        ]
    },
    {
        "id": "044736d06695925a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "['sshpass -p ' & password & ' ssh vicky@127.0.0.1']",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 2920,
        "wires": [
            [
                "f7a7f433f57b1adf"
            ]
        ]
    },
    {
        "id": "f7a7f433f57b1adf",
        "type": "change",
        "z": "57297ea9585b5f93",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$append(payload,[\"bluetoothctl\"])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 2920,
        "wires": [
            [
                "f010f011364e052f"
            ]
        ]
    },
    {
        "id": "f010f011364e052f",
        "type": "json",
        "z": "57297ea9585b5f93",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 50,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "372c7037c1474f67",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 880,
        "wires": []
    },
    {
        "id": "9478cafaace3eda1",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1000,
        "wires": [
            [
                "668842fefb1ad86b"
            ],
            [
                "6b54aac46cb4c9b3"
            ]
        ]
    },
    {
        "id": "5e8044892e24ec72",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1040,
        "wires": []
    },
    {
        "id": "96f4d0b1004067bd",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.command & (payload.args ? ' ' & payload.args :  '')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1520,
        "y": 940,
        "wires": [
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "5a947aacab2c4eba",
        "type": "status",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "daemon status",
        "scope": [
            "8b3802d31611155a"
        ],
        "x": 1080,
        "y": 1280,
        "wires": [
            [
                "c13e09dff09adfbd"
            ]
        ]
    },
    {
        "id": "7d681acadaecfb5f",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "running",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 1280,
        "wires": [
            [
                "1590d913477ecb52",
                "dff8087ee587c923"
            ],
            [
                "3554dd2e300a186d"
            ]
        ]
    },
    {
        "id": "e481703bc59b4c72",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9c8aca4bedc48d5e",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1720,
        "y": 1260,
        "wires": [
            [
                "e481703bc59b4c72",
                "d0a82e3544f7a8b0"
            ]
        ]
    },
    {
        "id": "5c8e04ee1e796b6d",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "index",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "$count($flowContext('commands'))",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2810,
        "y": 940,
        "wires": [
            [
                "09f1ac7ac86f2fa8"
            ],
            []
        ]
    },
    {
        "id": "09f1ac7ac86f2fa8",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2980,
        "y": 940,
        "wires": [
            [
                "049914dc3aa6e18a"
            ]
        ]
    },
    {
        "id": "dc269403be70248b",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "40fcc77c45bef21d"
            ]
        ]
    },
    {
        "id": "d7cefaf9832ce681",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Diseable on deploy",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1000,
        "wires": [
            [
                "dcbb085ee2ecca8b"
            ]
        ]
    },
    {
        "id": "c13e09dff09adfbd",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "daemonStatus",
                "pt": "flow",
                "to": "status.text",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 1240,
        "wires": [
            [
                "7d681acadaecfb5f",
                "f8cc71cc05ed9b0c"
            ]
        ]
    },
    {
        "id": "2d81644308115d7d",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "child process exited with",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2830,
        "y": 800,
        "wires": [
            [
                "447f88e0a835b97a"
            ],
            [
                "16bce161060dd6ed"
            ]
        ]
    },
    {
        "id": "16bce161060dd6ed",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 820,
        "wires": []
    },
    {
        "id": "127cf7d29cea1234",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Format message for spawn",
        "func": "let fullCommand = msg.payload\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 880,
        "wires": [
            [
                "628dfb2257610e39"
            ]
        ]
    },
    {
        "id": "668842fefb1ad86b",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 980,
        "wires": [
            [
                "3d8c166dafde23ec"
            ],
            [
                "127cf7d29cea1234"
            ]
        ]
    },
    {
        "id": "3554dd2e300a186d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 1300,
        "wires": [
            [
                "6acb2b994b6e860f"
            ]
        ]
    },
    {
        "id": "1590d913477ecb52",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 1220,
        "wires": [
            [
                "fbb4165b4fadc15a"
            ]
        ]
    },
    {
        "id": "6b54aac46cb4c9b3",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1020,
        "wires": [
            [
                "96f4d0b1004067bd"
            ],
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "dff8087ee587c923",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "index",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1550,
        "y": 1260,
        "wires": [
            [
                "9c8aca4bedc48d5e"
            ]
        ]
    },
    {
        "id": "265694c368031b88",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "index",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2690,
        "y": 940,
        "wires": [
            [
                "5c8e04ee1e796b6d"
            ]
        ]
    },
    {
        "id": "1d1a03e6ebef2856",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "name": "",
        "props": [
            {
                "p": "enabled",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "3b9751a158948df4",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2720,
        "y": 880,
        "wires": [
            [
                "733d567b31de5df5",
                "4744804d51c8767e"
            ]
        ]
    },
    {
        "id": "55cc69056770aa9f",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "running",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 2040,
        "wires": [
            [
                "e6cfcb3d10177c46",
                "8b3802d31611155a"
            ],
            [
                "e6cfcb3d10177c46",
                "1fc0dce79a6feefe"
            ]
        ]
    },
    {
        "id": "447f88e0a835b97a",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Status of child processus",
        "func": "if (msg.payload.includes('child process exited with')){\n    node.status({ fill: \"red\", shape: \"ring\", text: \"child process exited with\" });\n    flow.set(\"childProcessStatus\", \"stopped\");\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3050,
        "y": 780,
        "wires": [
            [
                "acf896f91e62ebb9"
            ]
        ]
    },
    {
        "id": "acf896f91e62ebb9",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3240,
        "y": 780,
        "wires": []
    },
    {
        "id": "be0d1711cdc49ac1",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1640,
        "wires": []
    },
    {
        "id": "11735e05573fb370",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1510,
        "y": 1480,
        "wires": [
            [
                "a3348e49115feabc"
            ]
        ]
    },
    {
        "id": "04cf2cb39f05fbf5",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Format message for spawn",
        "func": "let fullCommand = flow.get(\"commands\")[0];\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1800,
        "wires": [
            [
                "0bd48ea4562be240"
            ]
        ]
    },
    {
        "id": "d9210aa9864f709a",
        "type": "status",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "scope": [
            "447f88e0a835b97a"
        ],
        "x": 1820,
        "y": 1060,
        "wires": [
            [
                "aa17940305d40738"
            ]
        ]
    },
    {
        "id": "aa17940305d40738",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "child process exited with",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 1060,
        "wires": [
            [
                "07b4fddee5d12ac2"
            ],
            []
        ]
    },
    {
        "id": "037c66ba96df20be",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1740,
        "wires": []
    },
    {
        "id": "be4aa8937a2551a3",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3460,
        "y": 1820,
        "wires": []
    },
    {
        "id": "564ff8ef50de58b1",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Format message for spawn",
        "func": "let fullCommand = msg.payload\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 1720,
        "wires": [
            [
                "285ddcd6faf866c9"
            ]
        ]
    },
    {
        "id": "06043ac62e7edf8e",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext(\"index\") +1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2400,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "dfd243663d89ff30",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commands",
                "pt": "flow",
                "to": "$eval(payload)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext('index') ? $flowContext('index') : 0 ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1620,
        "y": 1580,
        "wires": [
            [
                "3ba29ad018e06586",
                "fd4dd9381332bd43",
                "ad653b64c5bc3d1c"
            ]
        ]
    },
    {
        "id": "e6cfcb3d10177c46",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "index",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "$count($flowContext('commands'))-1",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 2040,
        "wires": [
            [
                "bdf43fa3a5a439e7",
                "a49a58dcf5918f7a"
            ],
            [
                "06043ac62e7edf8e"
            ]
        ]
    },
    {
        "id": "e53439d570dffd07",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Part to handle array of command",
        "info": "",
        "x": 1470,
        "y": 1500,
        "wires": []
    },
    {
        "id": "a3348e49115feabc",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "$count($flowContext('commands'))",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1850,
        "y": 1720,
        "wires": [
            [
                "83df3adbaa2a6c51"
            ],
            [
                "2c48e3b743c58dc6",
                "86cdf396ce6d4aa0"
            ]
        ]
    },
    {
        "id": "83df3adbaa2a6c51",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "24099d8cac2ab795",
                "c8f6c212fc68f165"
            ]
        ]
    },
    {
        "id": "285ddcd6faf866c9",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3430,
        "y": 1780,
        "wires": [
            [
                "be4aa8937a2551a3"
            ]
        ]
    },
    {
        "id": "cc7f04658e10487c",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "lastCommand",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1940,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "2c48e3b743c58dc6",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext(\"index\") +1",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('commands')[$flowContext('index')]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2160,
        "y": 1760,
        "wires": [
            [
                "24099d8cac2ab795",
                "560fe6956d93cb53"
            ]
        ]
    },
    {
        "id": "c8f6c212fc68f165",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 1660,
        "wires": []
    },
    {
        "id": "560fe6956d93cb53",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2320,
        "y": 1820,
        "wires": []
    },
    {
        "id": "b7249babe9ca16cc",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Format message for spawn",
        "func": "let fullCommand = msg.payload.command\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1900,
        "wires": [
            [
                "cc7f04658e10487c"
            ]
        ]
    },
    {
        "id": "bdf43fa3a5a439e7",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2400,
        "y": 2020,
        "wires": [
            [
                "25e5be0676b5f6f8"
            ]
        ]
    },
    {
        "id": "ea6e70d0667d480d",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [
            {
                "p": "enabled",
                "v": "$globalContext('OSUser') ? true : false",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1190,
        "y": 1760,
        "wires": [
            [
                "4d39ba490ae7a81f"
            ]
        ]
    },
    {
        "id": "86cdf396ce6d4aa0",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2060,
        "y": 1820,
        "wires": [
            [
                "092dfa0718d148d9"
            ]
        ]
    },
    {
        "id": "18ecfed882d9cab8",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1680,
        "y": 2160,
        "wires": [
            [
                "79291a7a1150f807",
                "1fbd8cc10ee44cd0",
                "961702918836aa4d",
                "a6d16b412273335c"
            ]
        ]
    },
    {
        "id": "79291a7a1150f807",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1880,
        "y": 2160,
        "wires": [
            [
                "96d1beb6501d4661"
            ]
        ]
    },
    {
        "id": "1fbd8cc10ee44cd0",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1880,
        "y": 2200,
        "wires": [
            [
                "eeb33e9c9894d157"
            ]
        ]
    },
    {
        "id": "961702918836aa4d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "commands[0]",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "ca1a3b161424e5e9",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to commands",
        "links": [
            "2e5405bc8896e802",
            "40f7e1e7c55cd034",
            "67d3b5ce22f3522d",
            "73013c23ef540790",
            "c4d0127ebb81b796",
            "fb2f5a5457cc1c7b",
            "5401f83cc962f7c5",
            "8de50771ed9d3a9b",
            "e38177f099bbd16e",
            "554e2cdad38c152a",
            "eea0f3866282dea4",
            "d348509c533ac2a8",
            "43a79bd58eabb2a7"
        ],
        "x": 1215,
        "y": 1640,
        "wires": [
            [
                "b2b6c35ccfe6517f"
            ]
        ]
    },
    {
        "id": "b2b6c35ccfe6517f",
        "type": "json",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1410,
        "y": 1620,
        "wires": [
            [
                "7df4342477554fec"
            ]
        ]
    },
    {
        "id": "3ba29ad018e06586",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "$count($flowContext('commands'))",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1770,
        "y": 1620,
        "wires": [
            [
                "b8028a182f6e3883"
            ],
            []
        ]
    },
    {
        "id": "b8028a182f6e3883",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$count($flowContext('commands')) = 1 & $flowContext('index') = 0 ? 1 : 0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1940,
        "y": 1620,
        "wires": [
            [
                "df6c15d9807db302"
            ]
        ]
    },
    {
        "id": "b4fc87ff7c293b7a",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1680,
        "wires": []
    },
    {
        "id": "041efdc800181680",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3070,
        "y": 1780,
        "wires": [
            [
                "564ff8ef50de58b1",
                "b4fc87ff7c293b7a"
            ],
            [
                "285ddcd6faf866c9"
            ]
        ]
    },
    {
        "id": "a49a58dcf5918f7a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2400,
        "y": 2100,
        "wires": [
            [
                "6a9fa0bd8fd2fe78"
            ]
        ]
    },
    {
        "id": "8a4fdf696c797978",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2920,
        "y": 1780,
        "wires": [
            [
                "041efdc800181680"
            ]
        ]
    },
    {
        "id": "fba7ea4f0c525b8f",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 2820,
        "wires": []
    },
    {
        "id": "76b45b809532e499",
        "type": "file",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2780,
        "y": 2820,
        "wires": [
            [
                "126bdc8d1fe884f0",
                "bb973f9e1bbddecc"
            ]
        ]
    },
    {
        "id": "b73225bfdbae241a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "9fb37ef2271445f3",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Error: ENOENT: no such file or directory",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2110,
        "y": 2780,
        "wires": [
            [
                "abb24d721e50e418",
                "f27df0d26aedf15c"
            ],
            [
                "0dd47cebafd78a73"
            ]
        ]
    },
    {
        "id": "a47933f23ee978d7",
        "type": "catch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "scope": [
            "aaea082df6e0d28e"
        ],
        "uncaught": false,
        "x": 1950,
        "y": 2820,
        "wires": [
            [
                "fba7ea4f0c525b8f",
                "c295c8cbfb5211dc"
            ]
        ]
    },
    {
        "id": "aaea082df6e0d28e",
        "type": "file in",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1860,
        "y": 2680,
        "wires": [
            [
                "081925cde061cad5",
                "b6de463218f1e479"
            ]
        ]
    },
    {
        "id": "081925cde061cad5",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 2720,
        "wires": []
    },
    {
        "id": "d6f838746286e467",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$globalContext('projectDir') & '/' & $flowContext('filename') & extension",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1700,
        "y": 2680,
        "wires": [
            [
                "aaea082df6e0d28e"
            ]
        ]
    },
    {
        "id": "c295c8cbfb5211dc",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 2780,
        "wires": [
            [
                "9fb37ef2271445f3"
            ]
        ]
    },
    {
        "id": "126bdc8d1fe884f0",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 2860,
        "wires": []
    },
    {
        "id": "b6de463218f1e479",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File already exit. Content:' & payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2140,
        "y": 2700,
        "wires": [
            [
                "0dd47cebafd78a73"
            ]
        ]
    },
    {
        "id": "2fe10cf77563c81c",
        "type": "catch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "scope": [
            "76b45b809532e499"
        ],
        "uncaught": false,
        "x": 2550,
        "y": 2900,
        "wires": [
            [
                "0dd47cebafd78a73",
                "c831be1d8aab6ac2"
            ]
        ]
    },
    {
        "id": "abb24d721e50e418",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 59",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 2840,
        "wires": []
    },
    {
        "id": "c831be1d8aab6ac2",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 2900,
        "wires": []
    },
    {
        "id": "5ab7478a90317b26",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "extension",
                "pt": "msg",
                "to": ".sh",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 2720,
        "wires": [
            [
                "52b9b8c246361095"
            ]
        ]
    },
    {
        "id": "f27df0d26aedf15c",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "property": "extension",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": ".sh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": ".json",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2330,
        "y": 2800,
        "wires": [
            [
                "497be50704f809a8"
            ],
            [
                "6f1bc1a7b9c9f095"
            ]
        ]
    },
    {
        "id": "6f1bc1a7b9c9f095",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$flowContext('filename')&'.json'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "commands",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2540,
        "y": 2840,
        "wires": [
            [
                "76b45b809532e499"
            ]
        ]
    },
    {
        "id": "497be50704f809a8",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "function 8",
        "func": "msg.filename = global.get(\"projectDir\")+'/scripts/'+flow.get('filename')+'.sh'\nlet commands = flow.get(\"commands\");\nlet script = \"\"\nfor (let index = 0; index < commands.length; index++) {\n    const element = commands[index];\n    if(index === commands.length - 1){\n        script += element\n    }else{\n        script += element+ '\\n'\n    }\n}\nmsg.payload = script\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 2780,
        "wires": [
            [
                "76b45b809532e499"
            ]
        ]
    },
    {
        "id": "8cb281e27cb12913",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "extension",
                "pt": "msg",
                "to": ".json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 2680,
        "wires": [
            [
                "52b9b8c246361095"
            ]
        ]
    },
    {
        "id": "83dcd2bef897c63e",
        "type": "exec",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 3130,
        "y": 2820,
        "wires": [
            [
                "2dae94e0a5a67ff8",
                "833281452e6d2faa"
            ],
            [
                "2dae94e0a5a67ff8",
                "833281452e6d2faa"
            ],
            [
                "2dae94e0a5a67ff8",
                "833281452e6d2faa"
            ]
        ]
    },
    {
        "id": "bb973f9e1bbddecc",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "property": "extension",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": ".sh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": ".json",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2910,
        "y": 2760,
        "wires": [
            [
                "e1b464488f392996"
            ],
            []
        ]
    },
    {
        "id": "e1b464488f392996",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'chmod +x ' & filename",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3060,
        "y": 2760,
        "wires": [
            [
                "83dcd2bef897c63e"
            ]
        ]
    },
    {
        "id": "2dae94e0a5a67ff8",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3280,
        "y": 2820,
        "wires": []
    },
    {
        "id": "e34bac8166d30631",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commandOutList",
                "pt": "flow",
                "to": "payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 560,
        "wires": [
            [
                "dc269403be70248b",
                "f214607e192146ac"
            ]
        ]
    },
    {
        "id": "9d9d7260b0dc6059",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Format message for spawn",
        "func": "let fullCommand = msg.payload\nmsg.payload = {}\nif (fullCommand.indexOf(' ')===-1){\n    msg.payload.command = fullCommand\n}else{\n    msg.payload.command = fullCommand.substring(0, fullCommand.indexOf(' '))\n    msg.payload.args = fullCommand.substr(fullCommand.indexOf(' ') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 740,
        "wires": [
            [
                "3d8c166dafde23ec",
                "e0b42ba5f51af29d"
            ]
        ]
    },
    {
        "id": "4e85502b0cdbb08b",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            },
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 770,
        "y": 800,
        "wires": [
            [
                "9d9d7260b0dc6059"
            ],
            [
                "9d9d7260b0dc6059"
            ],
            [
                "8b3802d31611155a"
            ]
        ]
    },
    {
        "id": "e0b42ba5f51af29d",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 680,
        "wires": []
    },
    {
        "id": "707a42c2835a3c14",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Because no JSONATA expression on button",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[$count(payload)-1]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 1040,
        "wires": [
            [
                "9478cafaace3eda1",
                "5e8044892e24ec72",
                "f4150bd9112e79d5"
            ]
        ]
    },
    {
        "id": "f214607e192146ac",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 520,
        "wires": []
    },
    {
        "id": "e84e8c0191c253f9",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Set flow variable",
        "rules": [
            {
                "t": "set",
                "p": "commandOutList",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "commandsOutList",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "daemonStatus",
                "pt": "flow",
                "to": "stopped",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 660,
        "wires": [
            [
                "5dd43c642137b6b6"
            ]
        ]
    },
    {
        "id": "6a25e18d8a8a5346",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 600,
        "wires": [
            [
                "e84e8c0191c253f9"
            ]
        ]
    },
    {
        "id": "b710b47357afff69",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commandsOutList",
                "pt": "flow",
                "to": "$append($flowContext('commandsOutList'), payload )",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 780,
        "wires": [
            [
                "4e85502b0cdbb08b",
                "b3a2db7da76826cc",
                "a0aab47871bf4d0e"
            ]
        ]
    },
    {
        "id": "e709214485f5f8dd",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Diseable on deploy",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1400,
        "wires": [
            [
                "81e980f5c7b5363f"
            ]
        ]
    },
    {
        "id": "5dd43c642137b6b6",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 720,
        "wires": [
            [
                "40fcc77c45bef21d"
            ]
        ]
    },
    {
        "id": "e4c1887aa955a2ec",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1140,
        "wires": [
            [
                "e2c596f862f807c1"
            ]
        ]
    },
    {
        "id": "e2c596f862f807c1",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 1180,
        "wires": [
            [
                "11024c778cd30379"
            ]
        ]
    },
    {
        "id": "7f2f743ebaeb222d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 620,
        "wires": [
            [
                "705b4607cb4e54cf"
            ]
        ]
    },
    {
        "id": "6b4a9b0521c14524",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1420,
        "wires": []
    },
    {
        "id": "d7280d184dc694b7",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 840,
        "wires": [
            [
                "dcbb085ee2ecca8b",
                "11024c778cd30379"
            ]
        ]
    },
    {
        "id": "b3a2db7da76826cc",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "$count($flowContext('commandsOutList'))",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 820,
        "wires": [
            [
                "acb41c72b270cbac"
            ]
        ]
    },
    {
        "id": "acb41c72b270cbac",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 860,
        "wires": [
            [
                "2e0f75ce20fba878"
            ]
        ]
    },
    {
        "id": "a0aab47871bf4d0e",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 740,
        "wires": []
    },
    {
        "id": "0a8c19f4df98784d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 1140,
        "wires": [
            [
                "2e0f75ce20fba878"
            ]
        ]
    },
    {
        "id": "41b1f0df6391aabf",
        "type": "function",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "function 10",
        "func": "if(msg.payload !== \"Cancel\"){\n    let commands = flow.get(\"commands\");\n    let commandsOutList = flow.get(\"commandsOutList\");\n    let addAtIndex = msg.payload\n    commands.splice(addAtIndex, 0, ...commandsOutList)\n    flow.set(\"commands\", commands);\n    flow.set(\"index\", flow.get(\"index\")+commandsOutList.length);\n    msg.payload = commands\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1280,
        "wires": [
            [
                "6b4a9b0521c14524",
                "b2b6c35ccfe6517f"
            ]
        ]
    },
    {
        "id": "15f4a37073c29cdc",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1190,
        "y": 1520,
        "wires": [
            [
                "7a3554e3063ac472",
                "11735e05573fb370"
            ]
        ]
    },
    {
        "id": "7a3554e3063ac472",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Set flow variable",
        "rules": [
            {
                "t": "set",
                "p": "commands",
                "pt": "flow",
                "to": "$flowContext('commands') ? $flowContext('commands') : []",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 1560,
        "wires": [
            [
                "b2b6c35ccfe6517f"
            ]
        ]
    },
    {
        "id": "f4150bd9112e79d5",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commandsOutList",
                "pt": "flow",
                "to": "$append($flowContext('commandsOutList'), payload )",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "fd4dd9381332bd43",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('index') ? $flowContext('commands')[$flowContext('index')] : $flowContext('commands')[0]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1860,
        "y": 1560,
        "wires": [
            [
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "7489632c2a204942",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "commands",
                "pt": "flow",
                "to": "[]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1640,
        "y": 2360,
        "wires": [
            [
                "6ac8777966c061e5",
                "7df4342477554fec",
                "18ecfed882d9cab8"
            ]
        ]
    },
    {
        "id": "6ac8777966c061e5",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1980,
        "y": 2360,
        "wires": [
            [
                "a046801adbd525d4"
            ]
        ]
    },
    {
        "id": "5daf26229a34ec6d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload != 'Cancel' ? true : false",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 1220,
        "wires": [
            [
                "0675a67dbf5f226d"
            ]
        ]
    },
    {
        "id": "a9bf38fc141961ae",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2760,
        "y": 2020,
        "wires": [
            [
                "4d39ba490ae7a81f",
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "73cf18f32e5abc7b",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1170,
        "y": 2000,
        "wires": [
            [
                "b88faf03b44d1c0a"
            ]
        ]
    },
    {
        "id": "055a8ac1dad23671",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1170,
        "y": 2320,
        "wires": [
            [
                "7b3dca1a87b0dc5e"
            ]
        ]
    },
    {
        "id": "af47437bc74e05a2",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 89",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1560,
        "wires": []
    },
    {
        "id": "7b3dca1a87b0dc5e",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('commands') ? 1 : 0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 2360,
        "wires": [
            [
                "990a856009b4df1b"
            ]
        ]
    },
    {
        "id": "b88faf03b44d1c0a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$count($flowContext('commands')) = 1 or $flowContext('index') = 0  ? 0 : 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 2040,
        "wires": [
            [
                "7de319477688b8ba"
            ]
        ]
    },
    {
        "id": "25e5be0676b5f6f8",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2580,
        "y": 2020,
        "wires": [
            [
                "a9bf38fc141961ae"
            ]
        ]
    },
    {
        "id": "cbeb3dca73005cb3",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "DO NOT EXIT COMMAND AT THIS POINT YOU HAVE TO DO IT IN THE DASHBORD",
        "info": "That gonna break fonctionnality to add commands at the ed of the liste",
        "x": 2620,
        "y": 1980,
        "wires": []
    },
    {
        "id": "6feb6980b1214cbf",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext('index') +1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1640,
        "y": 2480,
        "wires": [
            [
                "03c239aeca73f949",
                "3abd54eb14b681f8"
            ]
        ]
    },
    {
        "id": "b24f311005810a61",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "$flowContext('index') - 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1640,
        "y": 2540,
        "wires": [
            [
                "03c239aeca73f949",
                "3abd54eb14b681f8"
            ]
        ]
    },
    {
        "id": "03c239aeca73f949",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('commands')[$flowContext('index')] ? $flowContext('commands')[$flowContext('index')] : \" \" ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1900,
        "y": 2480,
        "wires": [
            [
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "3abd54eb14b681f8",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('index') > 0 ? 1 : 0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1900,
        "y": 2540,
        "wires": [
            [
                "78a24a7adeabe9c3",
                "06b1faf353de60fa"
            ]
        ]
    },
    {
        "id": "78a24a7adeabe9c3",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('index') > 0 ? 0 : 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2100,
        "y": 2560,
        "wires": [
            [
                "d93510c6fbb67516"
            ]
        ]
    },
    {
        "id": "69abf9c7573503c3",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1170,
        "y": 2180,
        "wires": [
            [
                "60ac4d280c89f4de"
            ]
        ]
    },
    {
        "id": "60ac4d280c89f4de",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('index')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 2220,
        "wires": [
            [
                "dd42e2b99a2a7645"
            ]
        ]
    },
    {
        "id": "9a3d1961c9c303cd",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to Start list button",
        "links": [
            "a046801adbd525d4",
            "0675a67dbf5f226d",
            "eeb33e9c9894d157",
            "d0a82e3544f7a8b0",
            "d93510c6fbb67516",
            "4465fa74532be31f",
            "7362f4e09732f0d8"
        ],
        "x": 1225,
        "y": 1800,
        "wires": [
            [
                "4d39ba490ae7a81f"
            ]
        ]
    },
    {
        "id": "bb05228eade21d1f",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to Continue button",
        "links": [
            "a046801adbd525d4",
            "0675a67dbf5f226d",
            "6a9fa0bd8fd2fe78",
            "df6c15d9807db302",
            "96d1beb6501d4661",
            "049914dc3aa6e18a",
            "092dfa0718d148d9",
            "06b1faf353de60fa",
            "4465fa74532be31f"
        ],
        "x": 1335,
        "y": 2000,
        "wires": [
            [
                "7de319477688b8ba"
            ]
        ]
    },
    {
        "id": "a046801adbd525d4",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From Clear list button",
        "mode": "link",
        "links": [
            "4ad3e45a119c1ab8",
            "9a3d1961c9c303cd",
            "bb05228eade21d1f"
        ],
        "x": 2125,
        "y": 2140,
        "wires": []
    },
    {
        "id": "4ad3e45a119c1ab8",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to Reset index button",
        "links": [
            "a046801adbd525d4",
            "06b1faf353de60fa"
        ],
        "x": 1325,
        "y": 2140,
        "wires": [
            [
                "dd42e2b99a2a7645"
            ]
        ]
    },
    {
        "id": "06b1faf353de60fa",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Index +1 and Index -1 button",
        "mode": "link",
        "links": [
            "4ad3e45a119c1ab8",
            "bb05228eade21d1f"
        ],
        "x": 2015,
        "y": 2500,
        "wires": []
    },
    {
        "id": "d93510c6fbb67516",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Index +1 and Index -1 button != 0",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd"
        ],
        "x": 2165,
        "y": 2480,
        "wires": []
    },
    {
        "id": "a48667c232bc72ea",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "Go to text command input IN LIST",
        "links": [],
        "x": 2565,
        "y": 1740,
        "wires": [
            [
                "24099d8cac2ab795"
            ]
        ]
    },
    {
        "id": "0675a67dbf5f226d",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From Merge at index button",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd",
            "bb05228eade21d1f"
        ],
        "x": 945,
        "y": 1220,
        "wires": []
    },
    {
        "id": "74d28e415cac5e4b",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Got to Child Processus",
        "links": [
            "0bd48ea4562be240",
            "1fc0dce79a6feefe"
        ],
        "x": 1595,
        "y": 720,
        "wires": [
            [
                "3d8c166dafde23ec"
            ]
        ]
    },
    {
        "id": "0bd48ea4562be240",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Start List button",
        "mode": "link",
        "links": [
            "74d28e415cac5e4b"
        ],
        "x": 1835,
        "y": 1800,
        "wires": []
    },
    {
        "id": "1fc0dce79a6feefe",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Continue button",
        "mode": "link",
        "links": [
            "74d28e415cac5e4b"
        ],
        "x": 1805,
        "y": 2080,
        "wires": []
    },
    {
        "id": "6a9fa0bd8fd2fe78",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Continue button end of list",
        "mode": "link",
        "links": [
            "bb05228eade21d1f"
        ],
        "x": 2545,
        "y": 2100,
        "wires": []
    },
    {
        "id": "df6c15d9807db302",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Commands text",
        "mode": "link",
        "links": [
            "bb05228eade21d1f"
        ],
        "x": 2055,
        "y": 1620,
        "wires": []
    },
    {
        "id": "96d1beb6501d4661",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Reset index button diseable",
        "mode": "link",
        "links": [
            "bb05228eade21d1f",
            "f6930578ff860b22"
        ],
        "x": 2015,
        "y": 2140,
        "wires": []
    },
    {
        "id": "eeb33e9c9894d157",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Reset index button enable",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd"
        ],
        "x": 2015,
        "y": 2180,
        "wires": []
    },
    {
        "id": "049914dc3aa6e18a",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon response",
        "mode": "link",
        "links": [
            "bb05228eade21d1f"
        ],
        "x": 3125,
        "y": 940,
        "wires": []
    },
    {
        "id": "092dfa0718d148d9",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Start List button if list >1",
        "mode": "link",
        "links": [
            "bb05228eade21d1f"
        ],
        "x": 2175,
        "y": 1820,
        "wires": []
    },
    {
        "id": "2e5405bc8896e802",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "From Clear list button",
        "mode": "link",
        "links": [
            "ca1a3b161424e5e9"
        ],
        "x": 1815,
        "y": 2340,
        "wires": []
    },
    {
        "id": "6acb2b994b6e860f",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon-status",
        "mode": "link",
        "links": [
            "f6930578ff860b22"
        ],
        "x": 1715,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f6930578ff860b22",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to Exit command button",
        "links": [
            "6acb2b994b6e860f",
            "fbb4165b4fadc15a",
            "96d1beb6501d4661"
        ],
        "x": 1815,
        "y": 1020,
        "wires": [
            [
                "0e66b4ca4d045ec1"
            ]
        ]
    },
    {
        "id": "d0a82e3544f7a8b0",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon-status if running and index not null",
        "mode": "link",
        "links": [
            "9a3d1961c9c303cd"
        ],
        "x": 1805,
        "y": 1300,
        "wires": []
    },
    {
        "id": "fbb4165b4fadc15a",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon-status if running and index not null enable=true",
        "mode": "link",
        "links": [
            "f6930578ff860b22"
        ],
        "x": 1725,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a6d16b412273335c",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "property": "daemonStatus",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1870,
        "y": 2120,
        "wires": [
            [
                "07b4fddee5d12ac2"
            ]
        ]
    },
    {
        "id": "a23460e2039e2240",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1950,
        "y": 940,
        "wires": [
            [
                "f7e50795bbbe828e"
            ]
        ]
    },
    {
        "id": "f7e50795bbbe828e",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$flowContext('daemonStatus') = 'running' ? 1 : 0",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1940,
        "y": 980,
        "wires": [
            [
                "0e66b4ca4d045ec1"
            ]
        ]
    },
    {
        "id": "f8cc71cc05ed9b0c",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From node-daemon-status for automated lsit",
        "mode": "link",
        "links": [
            "d4f78a45877d861b"
        ],
        "x": 1435,
        "y": 1180,
        "wires": []
    },
    {
        "id": "0a9601a0b978d84a",
        "type": "rbe",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "_msgid",
        "topi": "topic",
        "x": 230,
        "y": 1740,
        "wires": [
            [
                "b3b58ad074a2b566"
            ]
        ]
    },
    {
        "id": "c3e5157c333c3465",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpCommandsOutList",
                "pt": "flow",
                "to": "commandsOutList",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "tmpCommandsOutList[0]",
                "tot": "flow"
            },
            {
                "t": "delete",
                "p": "commandsOutList",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 1580,
        "wires": [
            [
                "baa2cf368634c41f"
            ]
        ]
    },
    {
        "id": "66bf2097b327336e",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "$flowContext(\"indexCommandOutList\")",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "$count($flowContext(\"tmpCommandsOutList\"))",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 1740,
        "wires": [
            [
                "af47437bc74e05a2",
                "ea2b5f79579f1d4a",
                "9f9aa054ed5b3070"
            ],
            [
                "8a3271e120fc0949",
                "dcdd569d049123a4"
            ]
        ]
    },
    {
        "id": "cfe3b14e2bddbf6a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "autoLoad",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 1540,
        "wires": [
            [
                "c3e5157c333c3465"
            ]
        ]
    },
    {
        "id": "ea2b5f79579f1d4a",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "autoLoad",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "indexCommandOutList",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "tmpCommandsOutList",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1680,
        "wires": [
            [
                "dcdd569d049123a4"
            ]
        ]
    },
    {
        "id": "81e980f5c7b5363f",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "autoLoad",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "tmpCommandsOutList",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 1440,
        "wires": [
            [
                "2e0f75ce20fba878"
            ]
        ]
    },
    {
        "id": "7c99e16850770331",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From repeat all button",
        "mode": "link",
        "links": [
            "816b0666cf836929"
        ],
        "x": 355,
        "y": 1500,
        "wires": []
    },
    {
        "id": "816b0666cf836929",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to kill daemon-node",
        "links": [
            "7c99e16850770331"
        ],
        "x": 1955,
        "y": 1120,
        "wires": [
            [
                "07b4fddee5d12ac2"
            ]
        ]
    },
    {
        "id": "8a3271e120fc0949",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 90",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1800,
        "wires": []
    },
    {
        "id": "c66ed3dda5290e99",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 91",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 1840,
        "wires": []
    },
    {
        "id": "c377f1e581915fd5",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 92",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 1680,
        "wires": []
    },
    {
        "id": "1ac64cb8c2b56f2d",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 1460,
        "wires": [
            [
                "b710b47357afff69"
            ]
        ]
    },
    {
        "id": "74dc2426dfad908d",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "To handle autoLoad no status possible beacause of kill process",
        "property": "autoLoad",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2890,
        "y": 720,
        "wires": [
            [
                "f081cb68bd6a63b6"
            ]
        ]
    },
    {
        "id": "b0e63695bcd5c315",
        "type": "link out",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "From daemon and child",
        "mode": "link",
        "links": [
            "cc5ad03705d058e4",
            "ff2965f7510c868d"
        ],
        "x": 3375,
        "y": 720,
        "wires": []
    },
    {
        "id": "ff2965f7510c868d",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to autoLoad",
        "links": [
            "b0e63695bcd5c315"
        ],
        "x": 125,
        "y": 1740,
        "wires": [
            [
                "c377f1e581915fd5",
                "0a9601a0b978d84a"
            ]
        ]
    },
    {
        "id": "b3b58ad074a2b566",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "indexCommandOutList",
                "pt": "flow",
                "to": "$flowContext('indexCommandOutList') ? $flowContext('indexCommandOutList')+1 : 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 1780,
        "wires": [
            [
                "c66ed3dda5290e99",
                "66bf2097b327336e"
            ]
        ]
    },
    {
        "id": "dcdd569d049123a4",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('tmpCommandsOutList')[$flowContext('indexCommandOutList')]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1720,
        "wires": [
            [
                "baa2cf368634c41f"
            ]
        ]
    },
    {
        "id": "9a99865feeda8c41",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "tmpCommandsOutList",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "9a24a7fd6de2c5f3",
        "type": "inject",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Diseable on deploy",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1880,
        "wires": [
            [
                "23e2f51aa5001862"
            ]
        ]
    },
    {
        "id": "af71c28ef446236c",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 1960,
        "wires": [
            [
                "2e0f75ce20fba878",
                "11024c778cd30379",
                "dcbb085ee2ecca8b"
            ]
        ]
    },
    {
        "id": "28f99a18b712b8c7",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 93",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3280,
        "y": 940,
        "wires": []
    },
    {
        "id": "c2e0b987362039af",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 94",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3300,
        "y": 860,
        "wires": []
    },
    {
        "id": "ef08ad9ecb7fca29",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to Reapeat all button to run array of command in payload",
        "links": [
            "27b05f485af9e106",
            "be19391959d36958",
            "ffa58bf3e16ae1ed",
            "f02b7cef527c5636"
        ],
        "x": 185,
        "y": 2100,
        "wires": [
            [
                "ec3f6ba6983f80ae",
                "1f43d49576bb375f"
            ]
        ]
    },
    {
        "id": "ec3f6ba6983f80ae",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "For external load",
        "rules": [
            {
                "t": "set",
                "p": "commandsOutList",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 2060,
        "wires": [
            [
                "cfe3b14e2bddbf6a"
            ]
        ]
    },
    {
        "id": "1f43d49576bb375f",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 95",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 2140,
        "wires": []
    },
    {
        "id": "1961a1e8fed2c784",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 96",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 660,
        "wires": []
    },
    {
        "id": "ad653b64c5bc3d1c",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "debug 97",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 1540,
        "wires": []
    },
    {
        "id": "1b86a3e86f103adf",
        "type": "http in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "url": "/terminal",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 2220,
        "wires": [
            [
                "3232e7606df8c0a1"
            ]
        ]
    },
    {
        "id": "8f21bd4ae9af0a4e",
        "type": "http response",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3180,
        "y": 1080,
        "wires": []
    },
    {
        "id": "4cc671b399e9511e",
        "type": "rbe",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 870,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "19870d67117f182f",
        "type": "delay",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "4744804d51c8767e",
        "type": "join",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3350,
        "y": 1020,
        "wires": [
            [
                "8f21bd4ae9af0a4e",
                "2490e2898b93d57a"
            ]
        ]
    },
    {
        "id": "2490e2898b93d57a",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 110",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 1300,
        "wires": []
    },
    {
        "id": "9f9aa054ed5b3070",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "res",
                "pt": "msg",
                "to": "currentWebResp",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3100,
        "y": 1020,
        "wires": [
            [
                "bb51e76e19282ad0",
                "4744804d51c8767e"
            ]
        ]
    },
    {
        "id": "bb51e76e19282ad0",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 111",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3450,
        "y": 960,
        "wires": []
    },
    {
        "id": "fbd8b34ce62e5998",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "property": "$flowContext(\"indexCommandOutList\")",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "$count($flowContext(\"tmpCommandsOutList\"))-1",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3130,
        "y": 900,
        "wires": [
            [
                "28f99a18b712b8c7",
                "9f9aa054ed5b3070"
            ],
            []
        ]
    },
    {
        "id": "3232e7606df8c0a1",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "currentWebResp",
                "pt": "flow",
                "to": "res",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 2180,
        "wires": [
            [
                "ec3f6ba6983f80ae"
            ]
        ]
    },
    {
        "id": "c55cc453d177f340",
        "type": "comment",
        "z": "57297ea9585b5f93",
        "name": "NEED TO ADD SOMETHING TO HANDLE \"npm run\" IT SEEMS It must be the part of command in swarm nodejs function",
        "info": "NEED TO ADD A && DETECTION\nSOMETHING GOES WRONG WITH THE AUTO EXCUTION THAT DOESNT WORK FOR AN ARRAY PUT YOU HAVE TO FORMAT IT LIKE THAT :)",
        "x": 1790,
        "y": 300,
        "wires": []
    },
    {
        "id": "52b9b8c246361095",
        "type": "switch",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1530,
        "y": 2700,
        "wires": [
            [
                "052ce13702c43cdd"
            ],
            [
                "052ce13702c43cdd"
            ],
            [
                "d6f838746286e467"
            ]
        ]
    },
    {
        "id": "052ce13702c43cdd",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please provide a filename",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 2780,
        "wires": [
            [
                "07fdd76ed660d4e3"
            ]
        ]
    },
    {
        "id": "f081cb68bd6a63b6",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "lastCommand",
                "pt": "msg",
                "to": "$flowContext(\"indexCommandOutList\") ? $flowContext(\"tmpCommandsOutList\")[$flowContext(\"indexCommandOutList\")] : $flowContext(\"tmpCommandsOutList\")[0]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3200,
        "y": 620,
        "wires": [
            [
                "08717e5d7a7b1e2d",
                "0efe17d66efb0d0d"
            ]
        ]
    },
    {
        "id": "08717e5d7a7b1e2d",
        "type": "debug",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "debug 131",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 580,
        "wires": []
    },
    {
        "id": "43c0975e7bb96e1a",
        "type": "link in",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "Go to Run command out of the list button",
        "links": [
            "4465fa74532be31f"
        ],
        "x": 65,
        "y": 720,
        "wires": [
            [
                "40fcc77c45bef21d"
            ]
        ]
    },
    {
        "id": "0efe17d66efb0d0d",
        "type": "change",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$substring(payload,0, $length(payload)-1)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3300,
        "y": 680,
        "wires": [
            [
                "b0e63695bcd5c315"
            ]
        ]
    },
    {
        "id": "470e7c7b3fdd0dd4",
        "type": "credentials",
        "z": "57297ea9585b5f93",
        "name": "",
        "props": [
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 250,
        "y": 2920,
        "wires": [
            [
                "044736d06695925a"
            ]
        ]
    },
    {
        "id": "60f468b672d670a2",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "name": "",
        "group": "1588cad9498681c1",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-regular fa-rotate-right",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "fbe6a4c43eea3e9a"
            ]
        ]
    },
    {
        "id": "0e66b4ca4d045ec1",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Exit command",
        "tooltip": "",
        "color": "",
        "bgcolor": "#532c2c",
        "className": "",
        "icon": "fa-solid fa-ban",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1940,
        "y": 1020,
        "wires": [
            [
                "07b4fddee5d12ac2"
            ]
        ]
    },
    {
        "id": "dcbb085ee2ecca8b",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Repeat",
        "tooltip": "",
        "color": "",
        "bgcolor": "#d1b478",
        "className": "",
        "icon": "fa-regular fa-rotate-right",
        "payload": "commandsOutList",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 1040,
        "wires": [
            [
                "707a42c2835a3c14",
                "0a8c19f4df98784d",
                "11024c778cd30379"
            ]
        ]
    },
    {
        "id": "4d39ba490ae7a81f",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start list",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-solid fa-play",
        "payload": "command",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 1420,
        "y": 1780,
        "wires": [
            [
                "037c66ba96df20be",
                "a3348e49115feabc",
                "b7249babe9ca16cc",
                "04cf2cb39f05fbf5"
            ]
        ]
    },
    {
        "id": "7de319477688b8ba",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Continue",
        "tooltip": "",
        "color": "",
        "bgcolor": "#d1b478",
        "className": "",
        "icon": "fa-solid fa-forward",
        "payload": "command",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 1480,
        "y": 2040,
        "wires": [
            [
                "b7249babe9ca16cc",
                "55cc69056770aa9f"
            ]
        ]
    },
    {
        "id": "dd42e2b99a2a7645",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset index",
        "tooltip": "",
        "color": "",
        "bgcolor": "#532c2c",
        "className": "",
        "icon": "fa-solid fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1450,
        "y": 2160,
        "wires": [
            [
                "18ecfed882d9cab8"
            ]
        ]
    },
    {
        "id": "40fcc77c45bef21d",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Run command out of the list",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "commandOutList",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 780,
        "wires": [
            [
                "b710b47357afff69",
                "d7280d184dc694b7"
            ]
        ]
    },
    {
        "id": "1955d97621c6194f",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "group": "6e16baac817e17b4",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Record JSON",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1180,
        "y": 2680,
        "wires": [
            [
                "8cb281e27cb12913"
            ]
        ]
    },
    {
        "id": "e9699e2f6a049fe7",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "group": "6e16baac817e17b4",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Record as script",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1180,
        "y": 2720,
        "wires": [
            [
                "5ab7478a90317b26"
            ]
        ]
    },
    {
        "id": "2e0f75ce20fba878",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Repeat all",
        "tooltip": "",
        "color": "",
        "bgcolor": "#d1b478",
        "className": "",
        "icon": "fa-regular fa-rotate-right",
        "payload": "commandsOutList",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "cfe3b14e2bddbf6a",
                "7c99e16850770331"
            ]
        ]
    },
    {
        "id": "11024c778cd30379",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Merge in list at Index",
        "tooltip": "All hidden commands are NOT SAVED",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-regular fa-rotate-right",
        "payload": "commandsOutList",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 1220,
        "wires": [
            [
                "9e39d1b269bca6f1",
                "be0d1711cdc49ac1"
            ]
        ]
    },
    {
        "id": "990a856009b4df1b",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear list",
        "tooltip": "",
        "color": "",
        "bgcolor": "#532c2c",
        "className": "",
        "icon": "fa-solid fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1460,
        "y": 2360,
        "wires": [
            [
                "7489632c2a204942"
            ]
        ]
    },
    {
        "id": "d67d684ecee6c676",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Index +1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1440,
        "y": 2480,
        "wires": [
            [
                "6feb6980b1214cbf"
            ]
        ]
    },
    {
        "id": "2c90c003888ef3a1",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "group": "255455bc3795b06c",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Index -1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1440,
        "y": 2540,
        "wires": [
            [
                "b24f311005810a61"
            ]
        ]
    },
    {
        "id": "23e2f51aa5001862",
        "type": "ui_button",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "group": "297b1964920fbcef",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clean temporary list",
        "tooltip": "",
        "color": "",
        "bgcolor": "#532c2c",
        "className": "",
        "icon": "fa-solid fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 1920,
        "wires": [
            [
                "9a99865feeda8c41",
                "af71c28ef446236c"
            ]
        ]
    },
    {
        "id": "cac216a938770ad4",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "label": "Command out of the list",
        "tooltip": "",
        "group": "297b1964920fbcef",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 590,
        "y": 560,
        "wires": [
            [
                "e34bac8166d30631"
            ]
        ]
    },
    {
        "id": "24099d8cac2ab795",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "label": "Command with arguments",
        "tooltip": "",
        "group": "255455bc3795b06c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 2710,
        "y": 1780,
        "wires": [
            [
                "8a4fdf696c797978"
            ]
        ]
    },
    {
        "id": "7df4342477554fec",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "c0b40a7272cfab76",
        "name": "",
        "label": "Commands",
        "tooltip": "",
        "group": "255455bc3795b06c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1410,
        "y": 1580,
        "wires": [
            [
                "dfd243663d89ff30"
            ]
        ]
    },
    {
        "id": "9c223c328c2c1229",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "label": "Hidden Command",
        "tooltip": "",
        "group": "297b1964920fbcef",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "password",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 570,
        "y": 620,
        "wires": [
            [
                "7f2f743ebaeb222d"
            ]
        ]
    },
    {
        "id": "e0c099377c2c48d3",
        "type": "ui_text_input",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "name": "",
        "label": "Filename without extension",
        "tooltip": "absloute or start from $HOME",
        "group": "6e16baac817e17b4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1340,
        "y": 2840,
        "wires": [
            [
                "b73225bfdbae241a"
            ]
        ]
    },
    {
        "id": "99e6f7120bc13cf8",
        "type": "ui_form",
        "z": "57297ea9585b5f93",
        "d": true,
        "g": "b8f8611163248bdd",
        "name": "",
        "label": "",
        "group": "a1efc069e293d845",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "commands",
                "value": "commands",
                "type": "multiline",
                "required": true,
                "rows": 3
            }
        ],
        "formValue": {
            "commands": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "9910400a70e3748f",
                "cfef9b965281e35e"
            ]
        ]
    },
    {
        "id": "0dd47cebafd78a73",
        "type": "ui_toast",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2830,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "9e39d1b269bca6f1",
        "type": "ui_toast",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Send index",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 590,
        "y": 1220,
        "wires": [
            [
                "41b1f0df6391aabf",
                "5daf26229a34ec6d"
            ]
        ]
    },
    {
        "id": "07fdd76ed660d4e3",
        "type": "ui_toast",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1770,
        "y": 2780,
        "wires": [
            []
        ]
    },
    {
        "id": "833281452e6d2faa",
        "type": "ui_toast",
        "z": "57297ea9585b5f93",
        "g": "42bb49f4356c0595",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 3270,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "733d567b31de5df5",
        "type": "ui_template",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "group": "6e16baac817e17b4",
        "name": "",
        "order": 1,
        "width": "20",
        "height": "5",
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\"></div>\n<script>\n    (function(scope) {\n  scope.$watch('msg', function(msg) {\n    if (msg) {\n      // Do something when msg arrives\n      //$(\"#my_\"+scope.$id).html('<div>'+msg.payload+'</div>');\n      let p = document.createElement(\"p\");\n      p.style.color='white'\n      //document.querySelector.(\"#my_\"+scope.$id).insertAdjacentHTML('beforeend', '<p>'+msg.payload+'</p>')\n      $(\"#my_\"+scope.$id).append('<pre style=\"font-size:16px; color:#eeeeee\">'+msg.payload+'</pre>');\n      //lines = msg.payload.split('\\n')\n      //for(i=0; i <= lines.length;i++){\n        //p.insertAdjacentHTML('beforeend', '<p>'+msg.payload+'</p>')\n      //}   \n      //$(\"#my_\"+scope.$id).append(p)\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 2960,
        "y": 880,
        "wires": [
            [
                "fbd8b34ce62e5998"
            ]
        ]
    },
    {
        "id": "fac21ad93363355e",
        "type": "ui_template",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "group": "1588cad9498681c1",
        "name": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\"></div>\n<script>\n    (function(scope) {\n  scope.$watch('msg', function(msg) {\n    if (msg) {\n      // Do something when msg arrives\n      //$(\"#my_\"+scope.$id).html('<div>'+msg.payload+'</div>');\n      $(\"#my_\"+scope.$id).append('<p>'+msg.payload+'</p>')\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1340,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5dcd97a52a9af266",
        "type": "ui_template",
        "z": "57297ea9585b5f93",
        "d": true,
        "g": "b8f8611163248bdd",
        "group": "a1efc069e293d845",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\"></div>\n<script>\n    (function(scope) {\n  scope.$watch('msg', function(msg) {\n    if (msg) {\n      // Do something when msg arrives\n      //$(\"#my_\"+scope.$id).html('<div>'+msg.payload+'</div>');\n      let p = document.createElement(\"p\");\n      $(\"#my_\"+scope.$id).append(msg.payload, p)\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "8b3802d31611155a",
        "type": "daemon",
        "z": "57297ea9585b5f93",
        "g": "18e263da0ce661a2",
        "name": "",
        "command": "node",
        "args": "/home/vicky/.node-red/projects/techscorangepi/child.js",
        "autorun": false,
        "cr": true,
        "redo": false,
        "op": "string",
        "closer": "SIGKILL",
        "x": 2450,
        "y": 840,
        "wires": [
            [
                "44c756161c28b0e2",
                "2d81644308115d7d",
                "265694c368031b88",
                "3b9751a158948df4",
                "74dc2426dfad908d"
            ],
            [
                "8db83594bc604f4d",
                "265694c368031b88",
                "3b9751a158948df4"
            ],
            [
                "684d60b75c1cc9da",
                "265694c368031b88",
                "3b9751a158948df4"
            ]
        ]
    },
    {
        "id": "c280ced4041a7ec7",
        "type": "ui_list",
        "z": "57297ea9585b5f93",
        "g": "03423aacbab5be01",
        "group": "1588cad9498681c1",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "lineType": "two",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 670,
        "y": 120,
        "wires": [
            [
                "a24271ceb763c696",
                "aa1e2348a08323c8"
            ]
        ]
    },
    {
        "id": "7f7a4f9ed924376d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "156d2db7093d7558"
            ]
        ]
    },
    {
        "id": "01f76c339f4adbd0",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 100,
        "wires": []
    },
    {
        "id": "156d2db7093d7558",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "$sum(arr)",
        "func": "// $sum(array)\n\nconst data = {\n    example: [\n        { value: 4 },\n        { value: 7 },\n        { value: 13 },\n        { value: 10 },\n    ],\n};\n\nmsg.topic = (data.example[0].value + data.example[1].value + data.example[2].value + data.example[3].value);\n\n// Returns the arithmetic sum of an array of numbers\nconst expression = jsonata(\"$sum(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "01f76c339f4adbd0"
            ]
        ]
    },
    {
        "id": "081cd34d6d10eff0",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "$max(arr)",
        "func": "// $max(array)\n\nconst data = {\n    \"example\": {\n        \"value\": [ 4, 7, 13 ],\n    },\n};\n\n// Returns the maximum number in an array of numbers\nconst expression = jsonata(\"$max(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 140,
        "wires": [
            [
                "2f9225a89d7fc482"
            ]
        ]
    },
    {
        "id": "199fed429d430789",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "081cd34d6d10eff0"
            ]
        ]
    },
    {
        "id": "2f9225a89d7fc482",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 140,
        "wires": []
    },
    {
        "id": "4db6caf373859923",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "$min(arr)",
        "func": "// $min(array)\n\nconst data = {\n    \"example\": {\n        \"value\": [ 4, 7, 13 ],\n    },\n};\n\n// Returns the minimum number in an array of numbers\nconst expression = jsonata(\"$min(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 180,
        "wires": [
            [
                "b40ecdc26eb65a87"
            ]
        ]
    },
    {
        "id": "e484adc4ab3f4dfe",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "$average(arr)",
        "func": "// $average(array)\n\nconst value = [];\nvalue[0] = 4;\nvalue[1] = 7;\nvalue[2] = 13;\n\nconst data = { \"example\": { value }};\n\n// Returns the mean value of an array of numbers\nconst expression = jsonata(\"$average(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 220,
        "wires": [
            [
                "c542a10e1e9711be"
            ]
        ]
    },
    {
        "id": "599ebbfcc3bfb18c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "4db6caf373859923"
            ]
        ]
    },
    {
        "id": "af16cf6a74150575",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "e484adc4ab3f4dfe"
            ]
        ]
    },
    {
        "id": "b40ecdc26eb65a87",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "c542a10e1e9711be",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 220,
        "wires": []
    },
    {
        "id": "a30467908fac9463",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$number(arg)",
        "func": "// $number(argument)\n// Argument can be string or boolean\n\nconst example = [];\nexample[0] = true;\nexample[1] = false;\nexample[2] = \"2\";\n\n// Casts the arg parameter to a number\nconst expression = [];\nexpression[0] = jsonata(`$number(${example[0]})`);\nexpression[1] = jsonata(`$number(${example[1]})`);\nexpression[2] = jsonata(`$number(${example[2]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 980,
        "wires": [
            [
                "fc277a1902454d3c"
            ]
        ]
    },
    {
        "id": "fc277a1902454d3c",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 980,
        "wires": []
    },
    {
        "id": "7224275fee07915e",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$abs(num)",
        "func": "// $abs(number)\n\nconst example = [];\nexample[0] = 2;\nexample[1] = -3;\n\n// Returns the absolute value of the number\nconst expression = [];\nexpression[0] = jsonata(`$abs(${example[0]})`);\nexpression[1] = jsonata(`$abs(${example[1]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1020,
        "wires": [
            [
                "02cf895c04cc2d17"
            ]
        ]
    },
    {
        "id": "f6c9478912e95bc4",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "a30467908fac9463"
            ]
        ]
    },
    {
        "id": "48b06fdef4c9ffc7",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "7224275fee07915e"
            ]
        ]
    },
    {
        "id": "02cf895c04cc2d17",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8cd41f907d7b91e1",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$floor(num)",
        "func": "// $floor(number)\n\nconst example = [];\nexample[0] = 4;\nexample[1] = 4.4;\nexample[2] = 4.8;\nexample[3] = -4.4;\n\n// Returns the value of number rounded down to the nearest integer\nconst expression = [];\nexpression[0] = jsonata(`$floor(${example[0]})`);\nexpression[1] = jsonata(`$floor(${example[1]})`);\nexpression[2] = jsonata(`$floor(${example[2]})`);\nexpression[3] = jsonata(`$floor(${example[3]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1060,
        "wires": [
            [
                "b784ce33202f9e4a"
            ]
        ]
    },
    {
        "id": "5d35112b0d7ffeb0",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$ceil(num)",
        "func": "// $ceil(number)\n\nconst example = [];\nexample[0] = 4;\nexample[1] = 4.4;\nexample[2] = 4.8;\nexample[3] = -4.4;\n\n// Returns the value of number rounded up to the nearest integer\nconst expression = [];\nexpression[0] = jsonata(`$ceil(${example[0]})`);\nexpression[1] = jsonata(`$ceil(${example[1]})`);\nexpression[2] = jsonata(`$ceil(${example[2]})`);\nexpression[3] = jsonata(`$ceil(${example[3]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "1af0b15b623b4243"
            ]
        ]
    },
    {
        "id": "35d492f50182f0e9",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$round(num, pre)",
        "func": "// $round(num [, precision])\n\nconst example = [];\nexample[0] = 3.14159265;\nexample[1] = 425;\n\n// Returns the value of the number parameter\n// rounded to decimal places specified by optional precision parameter\nconst expression = [];\nexpression[0] = jsonata(`$round(${example[0]})`);\nexpression[1] = jsonata(`$round(${example[0]},2)`);\nexpression[2] = jsonata(`$round(${example[1]},-1)`);\nexpression[3] = jsonata(`$round(${example[1]},-2)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 1140,
        "wires": [
            [
                "2b8feafd3ebed3db"
            ]
        ]
    },
    {
        "id": "1b8e6db00e94f577",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "8cd41f907d7b91e1"
            ]
        ]
    },
    {
        "id": "50ee5beef4616939",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "5d35112b0d7ffeb0"
            ]
        ]
    },
    {
        "id": "cb3905a7fc7807dc",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "35d492f50182f0e9"
            ]
        ]
    },
    {
        "id": "b784ce33202f9e4a",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2b8feafd3ebed3db",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1af0b15b623b4243",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5f58f7b332bc5032",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$power(base , exp)",
        "func": "// $power(base , exponent)\n\nconst example = 5;\n\n// Returns the value of base raised to the power of exponent\nconst expression = [];\nexpression[0] = jsonata(`$power(${example}, 0)`);\nexpression[1] = jsonata(`$power(${example}, 1)`);\nexpression[2] = jsonata(`$power(${example}, 2)`);\nexpression[3] = jsonata(`$power(${example}, -1)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "27784537ed674d95"
            ]
        ]
    },
    {
        "id": "6a2a296d28e805e8",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1180,
        "wires": [
            [
                "5f58f7b332bc5032"
            ]
        ]
    },
    {
        "id": "27784537ed674d95",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1180,
        "wires": []
    },
    {
        "id": "46d1ce782ac05500",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$sqrt(num)",
        "func": "const example = [];\nexample[0] = 16;\nexample[1] = 25;\n\n// Returns the square root of the value of the number\nconst expression = [];\nexpression[0] = jsonata(`$sqrt(${example[0]})`);\nexpression[1] = jsonata(`$sqrt(${example[1]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1220,
        "wires": [
            [
                "f5a7b9ba44d6da4f"
            ]
        ]
    },
    {
        "id": "a1007695caca77de",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "46d1ce782ac05500"
            ]
        ]
    },
    {
        "id": "f5a7b9ba44d6da4f",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f0854f7725cd1e0a",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$random()",
        "func": "// $random()\n\n// Returns a pseudo random number (0 ≤ n < 1)\nconst expression = jsonata(\"$random()\");\n\nmsg.payload = [];\nmsg.payload[0] = expression.evaluate();\nmsg.payload[1] = jsonata(\"$random()\").evaluate();\nmsg.payload[2] = jsonata(`$round(${msg.payload[1]}, 2)`).evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1260,
        "wires": [
            [
                "fcea2e9a5a9a9a31"
            ]
        ]
    },
    {
        "id": "7cd53419b0c387ef",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "f0854f7725cd1e0a"
            ]
        ]
    },
    {
        "id": "fcea2e9a5a9a9a31",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1260,
        "wires": []
    },
    {
        "id": "0e87c5fd5d165065",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$formatNumber(num, pic)",
        "func": "// $formatNumber(num, picture [, options])\n\nconst example = [];\nexample[0] = 3.14159265;\nexample[1] = 1234.5678;\n\n// Casts the number to a string and formats it to a decimal representation \n// as specified by the picture string\nconst expression = [];\nexpression[0] = jsonata(`$formatNumber(${example[0]}, \"#.#\")`);\nexpression[1] = jsonata(`$formatNumber(${example[0]}, \"#.00\")`);\nexpression[2] = jsonata(`$formatNumber(${example[1]}, \"#,###.##\")`);\nexpression[3] = jsonata(`$formatNumber(${example[1]}, \"0,000.00%\")`);\nexpression[4] = jsonata(`$formatNumber(${example[1]}, \"#,###.####pm\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1300,
        "wires": [
            [
                "cc2aa57778a71052"
            ]
        ]
    },
    {
        "id": "a58db5b349b23760",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1300,
        "wires": [
            [
                "0e87c5fd5d165065"
            ]
        ]
    },
    {
        "id": "cc2aa57778a71052",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1300,
        "wires": []
    },
    {
        "id": "d225d4b187f80ae9",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$formatBase(num, rad)",
        "func": "// $formatBase(num, radix)\n// If radix is not specified, then it defaults to base 10\n// radix can be between 2 and 36\n\nconst example = [];\nexample[0] = 10;\nexample[1] = 15;\n\n// Casts the number to a string and formats it to an integer\n// represented in the number base specified by the radix\nconst expression = [];\nexpression[0] = jsonata(`$formatBase(${example[0]})`);\nexpression[1] = jsonata(`$formatBase(${example[0]}, 2)`);\nexpression[2] = jsonata(`$formatBase(${example[0]}, 16)`);\nexpression[3] = jsonata(`$formatBase(${example[1]}, 2)`);\nexpression[4] = jsonata(`$formatBase(${example[1]}, 16)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "da137d0fda54aa1d"
            ]
        ]
    },
    {
        "id": "cd2f7b9ece57ec42",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "d225d4b187f80ae9"
            ]
        ]
    },
    {
        "id": "da137d0fda54aa1d",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1340,
        "wires": []
    },
    {
        "id": "bcc10f8b59b05223",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$formatInteger(num, pic)",
        "func": "// $formatInteger(num, picture)\n\nconst example = [];\nexample[0] = 12;\nexample[1] = 115;\n\n// Casts the number to a string, formats it to an integer representation as specified by the picture\nconst expression = [];\nexpression[0] = jsonata(`$formatInteger(${example[0]}, \"w\")`);\nexpression[1] = jsonata(`$formatInteger(${example[0]}, \"I\")`);\nexpression[2] = jsonata(`$formatInteger(${example[1]}, \"w\")`);\nexpression[3] = jsonata(`$formatInteger(${example[1]}, \"I\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1380,
        "wires": [
            [
                "68faa6604649be08"
            ]
        ]
    },
    {
        "id": "4aa9214f104589e5",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 1380,
        "wires": [
            [
                "bcc10f8b59b05223"
            ]
        ]
    },
    {
        "id": "68faa6604649be08",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c879b13b62b7e9e9",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$parseInteger(str, pic)",
        "func": "// $parseInteger(string, picture)\n\nconst example = [];\nexample[0] = \"five\";\nexample[1] = \"two thousand, one hundred and fifteen\";\nexample[2] = \"123,456,789\";\nexample[3] = \"VIII\";\n\n// Parses the contents of the string parameter to an integer\n// using the format specified by the picture\nconst expression = [];\nexpression[0] = jsonata(`$parseInteger(\"${example[0]}\", \"w\")`);\nexpression[1] = jsonata(`$parseInteger(\"${example[1]}\", \"w\")`);\nexpression[2] = jsonata(`$parseInteger(\"${example[2]}\", \"#,###,##0\")`);\nexpression[3] = jsonata(`$parseInteger(\"${example[3]}\", \"I\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 1420,
        "wires": [
            [
                "e224ce9d130829a1"
            ]
        ]
    },
    {
        "id": "46054494447c8ae2",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "c879b13b62b7e9e9"
            ]
        ]
    },
    {
        "id": "e224ce9d130829a1",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1420,
        "wires": []
    },
    {
        "id": "3cc6261891386b5f",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "b5288005cfaed881"
            ]
        ]
    },
    {
        "id": "8e042b0206d96ec3",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 80,
        "wires": []
    },
    {
        "id": "b5288005cfaed881",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$string(arg, pre)",
        "func": "// $string(arg, prettify)\n// Argument can be boolean, number, array, null\n// Prettify is boolean, if true, then \"prettified\" JSON is produced\n\nconst example = [];\nexample[0] = true;\nexample[1] = [ 1, \"'false'\", false ];\nexample[2] = null;\nexample[3] = new Date();\nconst data = {\n    example: {\n        test: {\n            pos1: \"success\",\n            pos2: \"failure\",\n        },\n    },\n};\n\n// Casts the arg parameter to a string\nconst expression = [];\nexpression[0] = jsonata(`$string(\"${example[0]}\")`);\nexpression[1] = jsonata(`$string(\"${example[1]}\")`);\nexpression[2] = jsonata(`$string(\"${example[2]}\")`);\nexpression[3] = jsonata(`$string(\"${example[3]}\")`);\nexpression[4] = jsonata(\"$string(example)\");\nexpression[5] = jsonata(\"$string(example, true)\");\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate(data);\nmsg.payload[5] = expression[5].evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "8e042b0206d96ec3"
            ]
        ]
    },
    {
        "id": "c4e236b5f403ca46",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "97198c59935dad84"
            ]
        ]
    },
    {
        "id": "139d3d075aef541b",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "97198c59935dad84",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$length(str)",
        "func": "// $length(string)\n\nconst example = [];\nexample[0] = \"hello world\";\nexample[1] = [\"test array\"];\nexample[2] = false;\nexample[3] = null;\n\n// Returns the number of characters in the string\nconst expression = [];\nexpression[0] = jsonata(`$length(\"${example[0]}\")`);\nexpression[1] = jsonata(`$length(\"${example[1]}\")`);\nexpression[2] = jsonata(`$length(\"${example[2]}\")`);\nexpression[3] = jsonata(`$length(\"${example[3]}\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "139d3d075aef541b"
            ]
        ]
    },
    {
        "id": "4d7f61e7faedcb5a",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$substring(str ,sta, len)",
        "func": "// $substring(string, start[, length])\n\nconst example = [ \"hello world\", \"goodbye friend\" ];\n\n// Returns a string containing the characters from start\n// If length is specified, then the substring will be equal to the length in characters\n// If start is negative then it indicates the number of characters from the end\nconst expression = [];\nexpression[0] = jsonata(`$substring(\"${example[0]}\", 2)`);\nexpression[1] = jsonata(`$substring(\"${example[0]}\", 3, 5)`);\nexpression[2] = jsonata(`$substring(\"${example[0]}\", -5)`);\nexpression[3] = jsonata(`$substring(\"${example[0]}\", -5, 3)`);\nexpression[5] = jsonata(`$substring(\"${example[1]}\", 4, 3)`);\nexpression[4] = jsonata(`$substring(\"${example[1]}\", -10, 3)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\nmsg.payload[5] = expression[5].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "66744dce571a09f0"
            ]
        ]
    },
    {
        "id": "e48f9f8fb961a5d6",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "4d7f61e7faedcb5a"
            ]
        ]
    },
    {
        "id": "66744dce571a09f0",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "1cc1025e35c9a45f",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$substringBefore(str ,cha)",
        "func": "// $substringBefore(string, characters)\n\nconst example = [];\nexample[0] = `hello \nworld`;\n\n// Returns the substring before the first occurrence of the character sequence\nconst expression = [];\nexpression[0] = jsonata(`$substringBefore(\"${example[0]}\", \" \")`);\nexpression[1] = jsonata(`$substringBefore(\"${example[0]}\", \"l\")`);\nexpression[2] = jsonata(`$substringBefore(\"${example[0]}\", \"o\")`);\nexpression[3] = jsonata(`$substringBefore(\"${example[0]}\", \"r\")`);\nexpression[4] = jsonata(`$substringBefore(\"${example[0]}\", \"\\n\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "f30e4fadc037c830"
            ]
        ]
    },
    {
        "id": "0778494e0323db2d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "1cc1025e35c9a45f"
            ]
        ]
    },
    {
        "id": "f30e4fadc037c830",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 200,
        "wires": []
    },
    {
        "id": "3079704ac5de15ab",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$substringAfter(str ,cha)",
        "func": "// $substringAfter(string, characters)\n\nconst example = [`hello \nworld`];\n\n// Returns the substring after the first occurrence of the character sequence\nconst expression = [\n    jsonata(`$substringAfter(\"${example[0]}\", \" \")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"l\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"o\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"r\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"\\n\")`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n    expression[4].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "8a34220c1cf0ddf2"
            ]
        ]
    },
    {
        "id": "8a34220c1cf0ddf2",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 240,
        "wires": []
    },
    {
        "id": "721d1f7a9c3c34ad",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "3079704ac5de15ab"
            ]
        ]
    },
    {
        "id": "ac702313720942fd",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$uppercase(str)",
        "func": "// $uppercase(string)\n\nconst example = \"Hello World\";\n\n// Returns a string with all the characters converted to uppercase\nconst expression = jsonata(`$uppercase(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "5358376cf87433d3"
            ]
        ]
    },
    {
        "id": "20a8bff4c82dc0a6",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "ac702313720942fd"
            ]
        ]
    },
    {
        "id": "5358376cf87433d3",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 280,
        "wires": []
    },
    {
        "id": "fd1ca4d65201e56e",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$lowercase(str)",
        "func": "// $lowercase(string)\n\nconst example = \"Hello World\";\n\n// Returns a string with all the characters converted to lowercase\nconst expression = jsonata(`$lowercase(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "bc6a61999fd08781"
            ]
        ]
    },
    {
        "id": "1597936a4dd07adc",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "fd1ca4d65201e56e"
            ]
        ]
    },
    {
        "id": "bc6a61999fd08781",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 320,
        "wires": []
    },
    {
        "id": "bc6b032b788377d5",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$trim(str)",
        "func": "// $trim(string)\n\nconst example = `Hello\nWorld\n`;\n\n// Normalizes and trims all whitespace characters in string\n// All tabs, carriage returns, and line feeds are replaced with spaces.\n// Contiguous sequences of spaces are reduced to a single space.\n// Trailing and leading spaces are removed\nconst expression = jsonata(`$trim(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 280,
        "y": 360,
        "wires": [
            [
                "f0028c6d46f58225"
            ]
        ]
    },
    {
        "id": "1c0fdc0f44e2d65d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "bc6b032b788377d5"
            ]
        ]
    },
    {
        "id": "f0028c6d46f58225",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "634bff34b4bfa755",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$pad(str, wid, cha)",
        "func": "// $pad(string, width [, character])\n\nconst data = {\n    example: \"Hello\",\n    char: \"X\",\n    width: -7,\n};\n\n// Returns a copy of the string str with extra padding\n// It's total number of characters is at least the absolute value of the width\n// If width is a positive number, then the string is padded to the right\n// If negative, it is padded to the left\n// char argument specifies the padding character, default is space\nconst expression = [\n    jsonata(\"$pad(example, 7)\"),\n    jsonata(\"$pad(example, -7)\"),\n    jsonata(\"$pad(example, 7, '#')\"),\n    jsonata(\"$pad(example, width, char)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 400,
        "wires": [
            [
                "aaf9bfbca7e66685"
            ]
        ]
    },
    {
        "id": "471d0565d8107992",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "634bff34b4bfa755"
            ]
        ]
    },
    {
        "id": "aaf9bfbca7e66685",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 400,
        "wires": []
    },
    {
        "id": "1422679d35d613e6",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$contains(str, pat)",
        "func": "// $contains(string, pattern)\n// pattern can be a string or a regular expression (regex)\n\nconst example = \"Hello World\";\nconst regex = [ /wo/, /wo/i ];\n\n// Returns true if str is matched by pattern, otherwise it returns false\nconst expression = [\n    jsonata(`$contains(\"${example}\", \"orl\")`),\n    jsonata(`$contains(\"${example}\", \"goodbye\")`),\n    jsonata(`$contains(\"${example}\", ${regex[0]})`),\n    jsonata(`$contains(\"${example}\", ${regex[1]})`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "12bf1c0706c42cd9"
            ]
        ]
    },
    {
        "id": "15f7d0253372dacc",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$split(str, sep, lim)",
        "func": "// $split(string, separator [, limit])\n// Separator parameter can either be a string or a regular expression (regex)\n// Limit parameter is a number that specifies the maximum of substrings to include in the result\n\nconst example = \"Hello World\";\nconst regex = /l/;\n\n// Splits the str parameter into an array of substrings by the separator parameter\nconst expression = [\n    jsonata(`$split(\"${example}\", \" \")`),\n    jsonata(`$split(\"${example}\", \"l\")`),\n    jsonata(`$split(\"${example}\", \"l\", 2)`),\n    jsonata(`$split(\"${example}\", ${regex})`),\n    jsonata(`$split(\"${example}\", ${regex}, 3)`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n    expression[4].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "382e989d6beed2b9"
            ]
        ]
    },
    {
        "id": "3578911993d1359b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "1422679d35d613e6"
            ]
        ]
    },
    {
        "id": "0ad7bc5dbbb01e64",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "15f7d0253372dacc"
            ]
        ]
    },
    {
        "id": "12bf1c0706c42cd9",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 440,
        "wires": []
    },
    {
        "id": "382e989d6beed2b9",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "6032d7a86bd608af",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$join(arr, sep)",
        "func": "// $join(array[, separator])\n\nconst data = {\n    example: [ \"Hello\", \"World\", \"Goodbye\", \"Moon\" ],\n};\n\n// Joins an array of component strings into a single concatenated string\nconst expression = [\n    jsonata(\"$join(example)\"),\n    jsonata(\"$join(example, '-')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "ceaf6f20ba283064"
            ]
        ]
    },
    {
        "id": "9e39dce96c0e40ba",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "6032d7a86bd608af"
            ]
        ]
    },
    {
        "id": "ceaf6f20ba283064",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 520,
        "wires": []
    },
    {
        "id": "6a216142b72c7570",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$match(str, pat, lim)",
        "func": "// $match(str, pattern [, limit])\n\nlet data = {\n    example: \"ababbabbcc\",\n};\n\n// Applies the string to the pattern regular expression and returns an array of objects\nconst expression = [\n    jsonata(\"$match(example, /a(b+)/)\"),\n    jsonata(\"$match(example, /a(b+)/, 1)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "a634125d8a135739"
            ]
        ]
    },
    {
        "id": "b191f4f849f6932b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "6a216142b72c7570"
            ]
        ]
    },
    {
        "id": "a634125d8a135739",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "03ae99be7404fdd5",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$replace(str, pat, rep, lim)",
        "func": "// $replace(string, pattern, replacement [, limit])\n// Pattern parameter can either be a string or a regular expression (regex)\n\nconst example = \"Hello world\";\nconst example2 = \"Billy Bob\";\nconst regex = /(\\w+)\\s(\\w+)/;\n\n// Finds occurrences of pattern within string and replaces them with replacement\nconst expression = [\n    jsonata(`$replace(\"${example}\", \"Hello\", \"Goodbye cruel\")`),\n    jsonata(`$replace(\"${example2}\", ${regex}, \"$2, $1\")`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 600,
        "wires": [
            [
                "72ab71f8ff083acd"
            ]
        ]
    },
    {
        "id": "ed05c5a681fd1709",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "03ae99be7404fdd5"
            ]
        ]
    },
    {
        "id": "72ab71f8ff083acd",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 600,
        "wires": []
    },
    {
        "id": "f6824991eb4a71e6",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$eval(exp, con)",
        "func": "// $eval(expression [, context])\n// Expression parameter must be a string\n\nconst data = {\n    example: [ 4, 5, 6 ],\n};\n\n// Parses and evaluates expression which contains literal JSON\n// or a JSONata expression using the current context as the context for evaluation.\nconst expression = [\n    jsonata(\"$eval('[1,2,3]')\"),\n    jsonata(\"$eval('example')\"),\n    jsonata(\"$eval('[$string(7),$string(8),$string(9)]')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(data),\n    expression[2].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "280344adbf650555"
            ]
        ]
    },
    {
        "id": "7256b2d99c71abb2",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "f6824991eb4a71e6"
            ]
        ]
    },
    {
        "id": "280344adbf650555",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 640,
        "wires": []
    },
    {
        "id": "ed2e6980f986b9ae",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$base64encode(str)",
        "func": "// $base64encode(string)\n\nconst data = {\n    example: [\n    \"Hello world\",\n    \"This is my secret phrase.\",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Converts an ASCII string to a base 64 representation\nconst expression = [\n    jsonata(\"$base64encode(example[0])\"),\n    jsonata(\"$base64encode(example[1])\"),\n    jsonata(\"$base64encode(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 680,
        "wires": [
            [
                "fee84a10519aa421"
            ]
        ]
    },
    {
        "id": "8ac685159923c118",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "ed2e6980f986b9ae"
            ]
        ]
    },
    {
        "id": "fee84a10519aa421",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "14a8c5089653d59f",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$base64decode(str)",
        "func": "// $base64decode(string)\n\nconst data = {\n    example: [\n    \"SGVsbG8gd29ybGQ=\",\n    \"VGhpcyBpcyBteSBzZWNyZXQgcGhyYXNlLg==\",\n    \"e3RoZUtleTogJ1RoaXMgaXMgYSBKU09OIHN0cmluZyBleGFtcGxlJ307\",\n    ],\n};\n\n// Converts base 64 encoded bytes to a string, using a UTF-8 Unicode codepage\nconst expression = [\n    jsonata(\"$base64decode(example[0])\"),\n    jsonata(\"$base64decode(example[1])\"),\n    jsonata(\"$base64decode(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 720,
        "wires": [
            [
                "37889b302715c27e"
            ]
        ]
    },
    {
        "id": "58147d798906386f",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "14a8c5089653d59f"
            ]
        ]
    },
    {
        "id": "37889b302715c27e",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 720,
        "wires": []
    },
    {
        "id": "6f8cef3d757675b7",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$encodeUrlComponent(str)",
        "func": "// $encodeUrlComponent(string)\n\nconst data = {\n    example: [\n    \"https://www.youtube.com/watch?v=ksGeUD26Mw0\",\n    \"?v=ksGeUD26Mw0\",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Encodes URL component by replacing certain characters with the UTF-8 encoding of the character using escape sequences\nconst expression = [\n    jsonata(\"$encodeUrlComponent(example[0])\"),\n    jsonata(\"$encodeUrlComponent(example[1])\"),\n    jsonata(\"$encodeUrlComponent(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 340,
        "y": 760,
        "wires": [
            [
                "aea93a05d365da9c"
            ]
        ]
    },
    {
        "id": "98056fd4c8ea54b0",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$encodeUrl(str)",
        "func": "// $encodeUrl(string)\n\nconst data = {\n    example: [\n    \"Hello world\",\n    \"https://nodered.org/docs/ & not a real url \",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Encodes URL by replacing certain characters with the UTF-8 encoding of the character using escape sequences\nconst expression = [\n    jsonata(\"$encodeUrl(example[0])\"),\n    jsonata(\"$encodeUrl(example[1])\"),\n    jsonata(\"$encodeUrl(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "251698b309d07a7e"
            ]
        ]
    },
    {
        "id": "265d1b2dc6aae07a",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "6f8cef3d757675b7"
            ]
        ]
    },
    {
        "id": "fdccd987154c9d12",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "98056fd4c8ea54b0"
            ]
        ]
    },
    {
        "id": "aea93a05d365da9c",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 760,
        "wires": []
    },
    {
        "id": "251698b309d07a7e",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 840,
        "wires": []
    },
    {
        "id": "faad7e5e44d62653",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$decodeUrlComponent(str)",
        "func": "// $decodeUrlComponent(string)\n\nconst data = {\n    example: [\n    \"https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DksGeUD26Mw0\",\n    \"%3Fv%3DksGeUD26Mw0\",\n    \"%7BtheKey%3A%20'This%20is%20a%20JSON%20string%20example'%7D%3B\",\n    ],\n};\n\n// Decodes a URL component previously created by encodeUrlComponent\nconst expression = [\n    jsonata(\"$decodeUrlComponent(example[0])\"),\n    jsonata(\"$decodeUrlComponent(example[1])\"),\n    jsonata(\"$decodeUrlComponent(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 340,
        "y": 800,
        "wires": [
            [
                "e8d3957524002c5b"
            ]
        ]
    },
    {
        "id": "d13dbe29814dadd4",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "faad7e5e44d62653"
            ]
        ]
    },
    {
        "id": "e8d3957524002c5b",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 800,
        "wires": []
    },
    {
        "id": "85f562c1f72f7317",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$decodeUrl(str)",
        "func": "// $decodeUrl(string)\n\nconst data = {\n    example: [\n    \"Hello%20world\",\n    \"https://nodered.org/docs/%20&%20not%20a%20real%20url%20\",\n    \"%7BtheKey:%20'This%20is%20a%20JSON%20string%20example'%7D;\",\n    ],\n};\n\n// Decodes a URL previously created by encodeUrl\nconst expression = [\n    jsonata(\"$decodeUrl(example[0])\"),\n    jsonata(\"$decodeUrl(example[1])\"),\n    jsonata(\"$decodeUrl(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 880,
        "wires": [
            [
                "78900f26fea3faf7"
            ]
        ]
    },
    {
        "id": "2587c0a4b7cf100b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "85f562c1f72f7317"
            ]
        ]
    },
    {
        "id": "78900f26fea3faf7",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 880,
        "wires": []
    },
    {
        "id": "e349d1491539c726",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "$boolean(arg)",
        "func": "// $boolean(arg)\n\n/*\nArgument type\t    Result\nBoolean\t            unchanged\nstring: empty\t    false\nstring: non-empty\ttrue\nnumber: 0\t        false\nnumber: non-zero\ttrue\nnull\t            false\narray: empty\t    false\narray: any true\t    true\narray: all false\tfalse\nobject: empty\t    false\nobject: non-empty\ttrue\nfunction\t        false\n*/\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Casts the argument to a Boolean\nconst expression = [\n    jsonata(\"$boolean(example[0])\"),\n    jsonata(\"$boolean(example[1])\"),\n    jsonata(\"$boolean(example[2])\"),\n    jsonata(\"$boolean(example[3])\"),\n    jsonata(\"$boolean(example[4])\"),\n    jsonata(\"$boolean(example[5])\"),\n    jsonata(\"$boolean(example[6])\"),\n    jsonata(\"$boolean(example[7])\"),\n    jsonata(\"$boolean(example[8])\"),\n    jsonata(\"$boolean(example[9])\"),\n    jsonata(\"$boolean(example[10])\"),\n    jsonata(\"$boolean(example[11])\"),\n    jsonata(\"$boolean(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 320,
        "wires": [
            [
                "6bc8446341b4b5f2"
            ]
        ]
    },
    {
        "id": "4253c825027547ad",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "e349d1491539c726"
            ]
        ]
    },
    {
        "id": "6bc8446341b4b5f2",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "1725374f271e4efc",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "$not(arg)",
        "func": "// $not(arg)\n\n/*\nArgument type\t    Result\nBoolean\t            opposite\nstring: empty\t    true\nstring: non-empty\tfalse\nnumber: 0\t        true\nnumber: non-zero\tfalse\nnull\t            true\narray: empty\t    true\narray: any true\t    false\narray: all false\ttrue\nobject: empty\t    true\nobject: non-empty\tfalse\nfunction\t        true\n*/\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Returns Boolean NOT on the argument, the revese of $boolean()\nconst expression = [\n    jsonata(\"$not(example[0])\"),\n    jsonata(\"$not(example[1])\"),\n    jsonata(\"$not(example[2])\"),\n    jsonata(\"$not(example[3])\"),\n    jsonata(\"$not(example[4])\"),\n    jsonata(\"$not(example[5])\"),\n    jsonata(\"$not(example[6])\"),\n    jsonata(\"$not(example[7])\"),\n    jsonata(\"$not(example[8])\"),\n    jsonata(\"$not(example[9])\"),\n    jsonata(\"$not(example[10])\"),\n    jsonata(\"$not(example[11])\"),\n    jsonata(\"$not(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 360,
        "wires": [
            [
                "377b870d6377fa6a"
            ]
        ]
    },
    {
        "id": "ba23fe1ffa16ed14",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 360,
        "wires": [
            [
                "1725374f271e4efc"
            ]
        ]
    },
    {
        "id": "377b870d6377fa6a",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 360,
        "wires": []
    },
    {
        "id": "db914e64bec8b614",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "$exists(arg)",
        "func": "// $exists(arg)\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Returns Boolean, true if the arg expression evaluates to a value\n// or false if the expression does not match anything\nconst expression = [\n    jsonata(\"$exists(example[0])\"),\n    jsonata(\"$exists(example[1])\"),\n    jsonata(\"$exists(example[2])\"),\n    jsonata(\"$exists(example[3])\"),\n    jsonata(\"$exists(example[4])\"),\n    jsonata(\"$exists(example[5])\"),\n    jsonata(\"$exists(example[6])\"),\n    jsonata(\"$exists(example[7])\"),\n    jsonata(\"$exists(example[8])\"),\n    jsonata(\"$exists(example[9])\"),\n    jsonata(\"$exists(example[10])\"),\n    jsonata(\"$exists(example[11])\"),\n    jsonata(\"$exists(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 400,
        "wires": [
            [
                "e6ab1014ef3d7b12"
            ]
        ]
    },
    {
        "id": "188fe1c2d2ebb8e3",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 400,
        "wires": [
            [
                "db914e64bec8b614"
            ]
        ]
    },
    {
        "id": "e6ab1014ef3d7b12",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "f9c483f70a4914e0",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$count(arr)",
        "func": "// $count(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [\"Hello World\"],\n    example3: [ true, null, \"\", {}],\n};\n\n// Returns the number of items in the array\nconst expression = [\n    jsonata(\"$count(example1)\"),\n    jsonata(\"$count(example2)\"),\n    jsonata(\"$count(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 500,
        "wires": [
            [
                "097dda9b77c22bbc"
            ]
        ]
    },
    {
        "id": "654c7ea2cc076b7d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 500,
        "wires": [
            [
                "f9c483f70a4914e0"
            ]
        ]
    },
    {
        "id": "097dda9b77c22bbc",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 500,
        "wires": []
    },
    {
        "id": "6c7dcaa639c75761",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$append(arr1, arr2)",
        "func": "// $append(array1, array2)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [\"Hello World\"],\n    example3: [ true, null, \"\", {}],\n};\n\n// Returns an array containing the values in array1 followed by the values in array2.\n// If either parameter is not an array, then it is treated as a singleton array containing that value\nconst expression = [\n    jsonata(\"$append(example1, [6,7,8,9])\"),\n    jsonata(\"$append(example2, 'This is JSONata')\"),\n    jsonata(\"$append(example3, false)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "39348bddd6cd6ea4"
            ]
        ]
    },
    {
        "id": "bb52ed5515e1600c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "6c7dcaa639c75761"
            ]
        ]
    },
    {
        "id": "39348bddd6cd6ea4",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 540,
        "wires": []
    },
    {
        "id": "6587273cf41528ac",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$sort(arr, fun)",
        "func": "// $sort(array [, function])\n\nconst data = {\n    example1: [ 4, 3, 5, 1, 2 ],\n    example2: [ \"Hello World\", \"a\", \"test\" ],\n};\n\n// Returns an array containing all the values in the array, but sorted into order\nconst expression = [\n    jsonata(\"$sort(example1, function($l, $r) {$l > $r})\"),\n    jsonata(\"$sort(example1, function($l, $r) {$l < $r})\"),\n    jsonata(\"$sort(example2, function($l, $r) {$l < $r})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 580,
        "wires": [
            [
                "e4bc41c71f22c31c"
            ]
        ]
    },
    {
        "id": "37bc59e118a6145b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 580,
        "wires": [
            [
                "6587273cf41528ac"
            ]
        ]
    },
    {
        "id": "e4bc41c71f22c31c",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 580,
        "wires": []
    },
    {
        "id": "af1434a6c955ae35",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$reverse(arr)",
        "func": "// $reverse(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\" ],\n};\n\n// Returns an array containing all the values from the array, but in reverse order\nconst expression = [\n    jsonata(\"$reverse(example1)\"),\n    jsonata(\"$reverse(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 620,
        "wires": [
            [
                "31e9ea391e2d85e1"
            ]
        ]
    },
    {
        "id": "c19e927408c93b3c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "af1434a6c955ae35"
            ]
        ]
    },
    {
        "id": "31e9ea391e2d85e1",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 620,
        "wires": []
    },
    {
        "id": "17602f594fda49bf",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$shuffle(arr)",
        "func": "// $shuffle(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\" ],\n};\n\n// Returns an array containing all the values in the array, but shuffled into random order\nconst expression = [\n    jsonata(\"$shuffle(example1)\"),\n    jsonata(\"$shuffle(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 660,
        "wires": [
            [
                "b73901b3c9abd775"
            ]
        ]
    },
    {
        "id": "09b2c334fbdb315e",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 660,
        "wires": [
            [
                "17602f594fda49bf"
            ]
        ]
    },
    {
        "id": "b73901b3c9abd775",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 660,
        "wires": []
    },
    {
        "id": "d1b7e717ae08481a",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$distinct(arr)",
        "func": "// $distinct(array)\n\nconst data = {\n    example1: [ 1, 2, 1, 2, 3, 4, 1, 5, 4 ],\n    example2: [ \"A\", \"A\", \"B\", \"C\", \"D\", \"D\" ],\n};\n\n// Returns an array containing all the values in the array, but with any duplicates removed\nconst expression = [\n    jsonata(\"$distinct(example1)\"),\n    jsonata(\"$distinct(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 700,
        "wires": [
            [
                "8b10eec1d8499638"
            ]
        ]
    },
    {
        "id": "9e8177571be8f99f",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "d1b7e717ae08481a"
            ]
        ]
    },
    {
        "id": "8b10eec1d8499638",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "3382776fb18d904d",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$zip(arr1, ...)",
        "func": "// $zip(array1, ...)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns a convolved (zipped) array containing grouped arrays \n// of values from the array1 ... arrayN arguments from index 0, 1, 2, etc\nconst expression = [\n    jsonata(\"$zip(example1, example2)\"),\n    jsonata(\"$zip(example2, example1)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 740,
        "wires": [
            [
                "da8f480b32e83de4"
            ]
        ]
    },
    {
        "id": "7159dde8aba9e05c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 740,
        "wires": [
            [
                "3382776fb18d904d"
            ]
        ]
    },
    {
        "id": "da8f480b32e83de4",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 740,
        "wires": []
    },
    {
        "id": "fd352b5e5dc6694b",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "$now()",
        "func": "// $now([picture [, timezone]])\n\nconst data = {\n    example1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    example2: \"[H01]:[m01]:[s01] [z]\",\n    example3: \"-0600\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$now()\"),\n    jsonata(\"$now(example1, example3)\"),\n    jsonata(\"$now(example2, example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 890,
        "y": 1300,
        "wires": [
            [
                "7270656ece6828a3"
            ]
        ]
    },
    {
        "id": "2df69d3de31443a9",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "fd352b5e5dc6694b"
            ]
        ]
    },
    {
        "id": "7270656ece6828a3",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1300,
        "wires": []
    },
    {
        "id": "5c92eeb77a6194d8",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "$millis()",
        "func": "// $millis()\n\n// Returns the number of milliseconds since the Unix Epoch (1 January, 1970 UTC) as a number\nconst expression = jsonata(\"$millis()\");\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 1340,
        "wires": [
            [
                "74023126b34ed888"
            ]
        ]
    },
    {
        "id": "a25502239ecce614",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1340,
        "wires": [
            [
                "5c92eeb77a6194d8"
            ]
        ]
    },
    {
        "id": "74023126b34ed888",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1340,
        "wires": []
    },
    {
        "id": "cfed144c068126e1",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "$fromMillis(num, pic, tim)",
        "func": "// $fromMillis(number [, picture [, timezone]])\n\nconst data = {\n    number: 1647393801477,\n    picture1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    picture2: \"[H01]:[m01]:[s01] [z]\",\n    timezone: \"-0600\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$fromMillis(number)\"),\n    jsonata(\"$fromMillis(number, picture1)\"),\n    jsonata(\"$fromMillis(number, picture2, timezone)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 950,
        "y": 1380,
        "wires": [
            [
                "027fa6ccac0cbc56"
            ]
        ]
    },
    {
        "id": "011afb255d074158",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1380,
        "wires": [
            [
                "cfed144c068126e1"
            ]
        ]
    },
    {
        "id": "027fa6ccac0cbc56",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c7751bd2f8c49d94",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "$toMillis(tim, pic)",
        "func": "// $toMillis(timestamp [, picture])\n\nconst data = {\n    number1: \"2022-03-16T01:23:21.477Z\",\n    number2: \"03/16/2022 1:23am\",\n    number3: \"19:23:21\",\n    picture1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    picture2: \"[H01]:[m01]:[s01]\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$toMillis(number1)\"),\n    jsonata(\"$toMillis(number2, picture1)\"),\n    jsonata(\"$toMillis(number3, picture2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 1420,
        "wires": [
            [
                "4c12d0e6c7d4268e"
            ]
        ]
    },
    {
        "id": "e4cf415c1974fc31",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "c7751bd2f8c49d94"
            ]
        ]
    },
    {
        "id": "4c12d0e6c7d4268e",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "18d6a3564775eda6",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "$map(arr, fun)",
        "func": "// $map(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns an array containing the results of applying the function parameter to each value in the array parameter\nconst expression = [\n    jsonata(\"$map(example1, $string)\"),\n    jsonata(\"$map(example1, function($v, $i, $a) { $v + 2 })\"),\n    jsonata(\"$map(example2, function($v, $i, $a) { 'Item ' & ($i+1) & ' of ' & $count($a) & ': ' & $v })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 100,
        "wires": [
            [
                "d5893c4cb59a4bdd"
            ]
        ]
    },
    {
        "id": "50eaf8e14a07f52a",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 100,
        "wires": [
            [
                "18d6a3564775eda6"
            ]
        ]
    },
    {
        "id": "d5893c4cb59a4bdd",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 100,
        "wires": []
    },
    {
        "id": "36b74a0ba9d50269",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "$filter(arr, fun)",
        "func": "// $filter(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns an array containing only the values in the array parameter that satisfy the function predicate\nconst expression = [\n    jsonata(\"$filter(example1, function($v, $i, $a) { $v > 2 })\"),\n    jsonata(\"$filter(example2, function($v, $i, $a) { $v != 'C' })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "351f1fe279abfa7f"
            ]
        ]
    },
    {
        "id": "b82c63ced822b93b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 140,
        "wires": [
            [
                "36b74a0ba9d50269"
            ]
        ]
    },
    {
        "id": "351f1fe279abfa7f",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 140,
        "wires": []
    },
    {
        "id": "ce71c4e4ac746a82",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "$single(arr, fun)",
        "func": "// $single(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns the one and only one value in the array parameter that satisfy the function predicate\n// Throws an exception if the number of matching values is not exactly one\nconst expression = [\n    jsonata(\"$single(example1, function($v, $i, $a) { $v = 2 })\"),\n    jsonata(\"$single(example2, function($v, $i, $a) { $v = 'C' })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 180,
        "wires": [
            [
                "40b1d4409f6b8dd5"
            ]
        ]
    },
    {
        "id": "5b3f848b04096e1c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "ce71c4e4ac746a82"
            ]
        ]
    },
    {
        "id": "40b1d4409f6b8dd5",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 180,
        "wires": []
    },
    {
        "id": "9ad04f517b2aa836",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "$reduce(arr, fun, ini)",
        "func": "// $reduce(array, function [, init])\n// function($accumulator, $value[, $index[, $array]])\n\nconst data = {\n    \"example\": [ 1, 2, 3, 4, 5 ],\n};\n\n// Returns an aggregated value derived from applying the function parameter successively to each value in array\n// in combination with the result of the previous application of the function\nconst expression = [\n    jsonata(\"$reduce(example, function($i, $j){$i + $j})\"),\n    jsonata(\"$reduce(example, function($i, $j){$i * $j})\"),\n    jsonata(\"$reduce(example, function($i, $j){$i + $j}, 405)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1560,
        "y": 220,
        "wires": [
            [
                "23811eafe28ed4b0"
            ]
        ]
    },
    {
        "id": "ec88ad1de0080364",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "9ad04f517b2aa836"
            ]
        ]
    },
    {
        "id": "23811eafe28ed4b0",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 220,
        "wires": []
    },
    {
        "id": "61eba193709b4747",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$keys(obj)",
        "func": "// $keys(object)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"A\": 3 },\n        { \"C\": 4 },\n        { \"B\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Returns an array containing the keys in the object.\n// If the argument is an array of objects, then the returned contains\n// a de-duplicated list of all the keys in all of the objects.\nconst expression = [\n    jsonata(\"$keys(example1)\"),\n    jsonata(\"$keys(example2)\"),\n    jsonata(\"$keys(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 840,
        "wires": [
            [
                "cae58acf1d4d93b0"
            ]
        ]
    },
    {
        "id": "b81ac77059018d6a",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 840,
        "wires": [
            [
                "61eba193709b4747"
            ]
        ]
    },
    {
        "id": "cae58acf1d4d93b0",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 840,
        "wires": []
    },
    {
        "id": "c0a1f8ffaea953f2",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$lookup(obj, key)",
        "func": "// $lookup(object, key)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Returns the value associated with key in object.\n// If the first argument is an array of objects,\n// then all objects in the array are searched,\n// and the values associated with all occurrences of key are returned\nconst expression = [\n    jsonata(\"$lookup(example1, 'B')\"),\n    jsonata(\"$lookup(example2, 'payload')\"),\n    jsonata(\"$lookup(example3, 'A')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 880,
        "wires": [
            [
                "4c8ea5fc5fa0df83"
            ]
        ]
    },
    {
        "id": "51eb088026f66aa7",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 880,
        "wires": [
            [
                "c0a1f8ffaea953f2"
            ]
        ]
    },
    {
        "id": "4c8ea5fc5fa0df83",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 880,
        "wires": []
    },
    {
        "id": "6b58edf53c9aeb7e",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$spread(obj)",
        "func": "// $spread(object)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Splits an object containing key/value pairs into an array of objects,\n// each of which has a single key/value pair from the input object.\n// If the parameter is an array of objects,\n// then the resultant array contains an object for every key/value pair in every object in the array\nconst expression = [\n    jsonata(\"$spread(example1)\"),\n    jsonata(\"$spread(example2)\"),\n    jsonata(\"$spread(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 920,
        "wires": [
            [
                "431b43d750db4608"
            ]
        ]
    },
    {
        "id": "ccf9e24c2cfc12cf",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 920,
        "wires": [
            [
                "6b58edf53c9aeb7e"
            ]
        ]
    },
    {
        "id": "431b43d750db4608",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 920,
        "wires": []
    },
    {
        "id": "48f3baac75b8cb33",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$merge([obj])",
        "func": "// $merge(array<object>)\n\nconst data = {\n    example1: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Merges an array of objects into a single object containing all the key/value pairs\n// from each of the objects in the input array.\n// If any of the input objects contain the same key,\n// then the returned object will contain the value of the last one in the array.\n// It is an error if the input array contains an item that is not an object.\nconst expression = jsonata(\"$merge(example1)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 960,
        "wires": [
            [
                "7d381368a9723eb3"
            ]
        ]
    },
    {
        "id": "802e2e41ec6aaa2d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 960,
        "wires": [
            [
                "48f3baac75b8cb33"
            ]
        ]
    },
    {
        "id": "7d381368a9723eb3",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 960,
        "wires": []
    },
    {
        "id": "fc6db6f01385990e",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$type(val)",
        "func": "// $type(value)\n\nconst data = {\n    example: [\n    null,\n    1,\n    \"Hello world\",\n    true,\n    [ 0, 1, 2 ],\n    { \"payload\": \"success\" },\n    function test() { return; },\n    undefined,\n    ],\n};\n\n// Evaluates the type of value and returns it's type as a string\n// Returns(non - string) undefined when value is undefined\nconst expression = [\n    jsonata(\"$type(example[0])\"),\n    jsonata(\"$type(example[1])\"),\n    jsonata(\"$type(example[2])\"),\n    jsonata(\"$type(example[3])\"),\n    jsonata(\"$type(example[4])\"),\n    jsonata(\"$type(example[5])\"),\n    jsonata(\"$type(example[6])\"),\n    jsonata(\"$type(example[7])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 1200,
        "wires": [
            [
                "3a58277f580af7a4"
            ]
        ]
    },
    {
        "id": "a8a96fff189b0f6a",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "fc6db6f01385990e"
            ]
        ]
    },
    {
        "id": "3a58277f580af7a4",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1200,
        "wires": []
    },
    {
        "id": "39dc8115391725fd",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$sift(obj, fun)",
        "func": "// $sift(object, function)\n// The function that is supplied must have the following signature:\n// function(value [, key [, object]])\n\nconst data = {\n    \"Customer1\": {\n        \"CustomerID\": 12345,\n        \"Name\": \"Billy Bob\",\n        \"Model\": \"Y\",\n    },\n    \"Employee1\": {\n        \"EmployeeID\": 24680,\n        \"Name\": \"Fred Rock\",\n        \"Model\": \"3\",\n    },\n    \"Employee2\": {\n        \"EmployeeID\": 13579,\n        \"Name\": \"Ash Luis\",\n        \"Model\": \"S\",\n    },\n    \"Customer2\": {\n        \"CustomerID\": 54321,\n        \"Name\": \"Amber Daniels\",\n        \"Model\": \"X\",\n    },\n    \"Customer3\": {\n        \"CustomerID\": 98765,\n        \"Name\": \"April Star\",\n        \"Model\": \"3\",\n    },\n};\n\n// Returns an object that contains only the key/value pairs from the object parameter\n// that satisfy the predicate function passed in as the second parameter.\n// If object is not specified, then the context value is used as the value of object.\nconst expression = [\n    jsonata(\"$sift(function($v, $k) {$k ~> /^Customer/})\"),\n    jsonata(\"$sift(function($v, $k) {$k ~> /^Employee/})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 1000,
        "wires": [
            [
                "b1aea701f0274f22"
            ]
        ]
    },
    {
        "id": "6599d5d264063dd4",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1000,
        "wires": [
            [
                "39dc8115391725fd"
            ]
        ]
    },
    {
        "id": "b1aea701f0274f22",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8c5ea777d24b40b6",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$each(obj, fun)",
        "func": "// $each(object, function)\n// function(value, name)\n\nconst data = {\n    \"Customer1\": {\n        \"CustomerID\": 12345,\n        \"Name\": \"Billy Bob\",\n        \"Model\": \"Y\",\n    },\n    \"Employee1\": {\n        \"EmployeeID\": 24680,\n        \"Name\": \"Fred Rock\",\n        \"Model\": \"3\",\n    },\n    \"Employee2\": {\n        \"EmployeeID\": 13579,\n        \"Name\": \"Ash Luis\",\n        \"Model\": \"S\",\n    },\n    \"Customer2\": {\n        \"CustomerID\": 54321,\n        \"Name\": \"Amber Daniels\",\n        \"Model\": \"X\",\n    },\n    \"Customer3\": {\n        \"CustomerID\": 98765,\n        \"Name\": \"April Star\",\n        \"Model\": \"3\",\n    },\n};\n\n// Returns an array of the values return by the function\n// when applied to each key/value pair in the object.\nconst expression = [\n    jsonata(\"$each(function($v, $k) {$k & ': ' & $v})\"),\n    jsonata(\"$each(function($v, $k) {$k})\"),\n    jsonata(\"$each(function($v, $k) {$v})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 1040,
        "wires": [
            [
                "a89af6cedd3f2e0d"
            ]
        ]
    },
    {
        "id": "a43595f67aa34ea0",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "8c5ea777d24b40b6"
            ]
        ]
    },
    {
        "id": "a89af6cedd3f2e0d",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1040,
        "wires": []
    },
    {
        "id": "5b772280cd54e62a",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$error(mes)",
        "func": "// $error(message)\n\n// HACKY WORKAROUND for message parameter to be usable\nnode.error(jsonata(\"$error('Error 12345')\").ast().arguments[0].value);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 1080,
        "wires": [
            [
                "6461cdef7011b35b"
            ]
        ]
    },
    {
        "id": "f84533d7ab3f5a83",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "5b772280cd54e62a"
            ]
        ]
    },
    {
        "id": "6461cdef7011b35b",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1080,
        "wires": []
    },
    {
        "id": "988336dcd37a967f",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 1120,
        "wires": [
            [
                "9e99aca1b6592c26"
            ]
        ]
    },
    {
        "id": "16d4c7d19f1d655b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 730,
        "y": 1160,
        "wires": [
            [
                "9e99aca1b6592c26"
            ]
        ]
    },
    {
        "id": "cfeb74d0e7f0153e",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9e99aca1b6592c26",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$assert(con, mes)",
        "func": "// $assert(condition, message)\n\n// If condition is true, the function returns { \"payload\": \"assertation is true\" }.\n// If condition is false, an error is thrown, with the message as the message of the error.\nmsg.payload = jsonata(`$assert(${msg.payload} % 2 = 0, \"Number must be even\")`);\n\n// HACKY WORKAROUND for message parameter to be usable\n// 'if condition' must be relevant to 'assert condition'\nif (msg.payload.ast().arguments[0].lhs.lhs.value % 2 == 0) return { \"payload\": \"assertation is true\" };\nelse node.error(`${msg.payload.ast().arguments[1].value}`);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 1140,
        "wires": [
            [
                "cfeb74d0e7f0153e"
            ]
        ]
    },
    {
        "id": "1aa173400b86378f",
        "type": "comment",
        "z": "2b674150e0c6799d",
        "name": "This flow requires the npm module jsonata",
        "info": "run 'npm i jsonata' from your .node-red directory\nand set functionExternalModules to true in your settings.js file",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "b8cc4867f4cfbb3c",
        "type": "http in",
        "z": "c464cce32785f35b",
        "name": "",
        "url": "/testmic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "b7f30730b8bd25f7",
                "1a150adb6f774b58",
                "7992cf3b6a0db948",
                "905cd6c2a090723d"
            ]
        ]
    },
    {
        "id": "76195d9e645bc37d",
        "type": "http response",
        "z": "c464cce32785f35b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 580,
        "wires": []
    },
    {
        "id": "b7f30730b8bd25f7",
        "type": "template",
        "z": "c464cce32785f35b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<div>coucou</div>\n<script>\n    function getLocalStream() {\n        navigator.mediaDevices.getUserMedia({video: false, audio: true}).then((stream) => {\n            window.localStream = stream;\n            window.localAudio.srcObject = stream;\n            window.localAudio.autoplay = true;\n    }).catch((err) => {\n        console.error(`you got an error: ${err}`)\n    });\n    }\n    \n    getLocalStream();\n</script>",
        "output": "str",
        "x": 840,
        "y": 680,
        "wires": [
            [
                "76195d9e645bc37d",
                "04cdd3e3c0a8a0b3"
            ]
        ]
    },
    {
        "id": "04cdd3e3c0a8a0b3",
        "type": "debug",
        "z": "c464cce32785f35b",
        "name": "debug 112",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 620,
        "wires": []
    },
    {
        "id": "45957de74b408f54",
        "type": "function",
        "z": "c464cce32785f35b",
        "name": "function 11",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "63794bee00b09b45",
        "type": "template",
        "z": "c464cce32785f35b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// This creates and positions a free camera (non-mesh)\nvar camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n// This targets the camera to scene origin\ncamera.setTarget(Vector3.Zero());\n\n// This attaches the camera to the canvas\ncamera.attachControl(canvas, true);\n\n// This creates a light, aiming 0,1,0 - to the sky (non-mesh)\nvar light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\n\n// Default intensity is 1. Let's dim the light a small amount\nlight.intensity = 0.7;\n\n// Create a grid material\nvar material = new GridMaterial(\"grid\", scene);\n\n// Our built-in 'sphere' shape.\nvar sphere = CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\n\n// Move the sphere upward 1/2 its height\nsphere.position.y = 2;\n\n// Affect a material\nsphere.material = material;\n\n// Our built-in 'ground' shape.\nvar ground = CreateGround(\"ground1\", { width: 6, height: 6, subdivisions: 2 }, scene);\n\n// Affect a material\nground.material = material;",
        "output": "str",
        "x": 920,
        "y": 920,
        "wires": [
            [
                "62ac299dceebcef3",
                "b903f23644477b3f"
            ]
        ]
    },
    {
        "id": "c09162ef760663c5",
        "type": "inject",
        "z": "c464cce32785f35b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 720,
        "y": 820,
        "wires": [
            [
                "63794bee00b09b45"
            ]
        ]
    },
    {
        "id": "62ac299dceebcef3",
        "type": "debug",
        "z": "c464cce32785f35b",
        "name": "debug 136",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 900,
        "wires": []
    },
    {
        "id": "17dcd69ddd2e58da",
        "type": "debug",
        "z": "c464cce32785f35b",
        "name": "debug 137",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 680,
        "wires": []
    },
    {
        "id": "b903f23644477b3f",
        "type": "template",
        "z": "c464cce32785f35b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <title>Babylon Template</title>\n\n        <style>\n            html, body {\n                overflow: hidden;\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }\n\n            #renderCanvas {\n                width: 100%;\n                height: 100%;\n                touch-action: none;\n            }\n        </style>\n\n        <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n        <script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n        <script src=\"https://code.jquery.com/pep/0.4.3/pep.js\"></script>\n    </head>\n\n   <body>\n\n    <canvas id=\"renderCanvas\" touch-action=\"none\"></canvas> <!-- touch-action=\"none\" for best results from PEP -->\n\n    <script>\n        const canvas = document.getElementById(\"renderCanvas\"); // Get the canvas element\n        const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine\n        \n        // Add your code here matching the playground format\n        var createScene = function() {\n            var scene = new BABYLON.Scene(engine);\n            const camera = new BABYLON.ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 3, new BABYLON.Vector3(0, 0, 0), scene);\n            camera.attachControl(canvas, true);\n            const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n            return scene\n           //{{{payload}}}\n        };\n\n\n        const scene = createScene(); //Call the createScene function\n\n        // Register a render loop to repeatedly render the scene\n        engine.runRenderLoop(function () {\n                scene.render();\n        });\n\n        // Watch for browser/canvas resize events\n        window.addEventListener(\"resize\", function () {\n                engine.resize();\n        });\n    </script>\n\n   </body>\n\n</html>",
        "output": "str",
        "x": 1060,
        "y": 1060,
        "wires": [
            [
                "476791d642f8a5ef"
            ]
        ]
    },
    {
        "id": "bbf8ee553506d0d3",
        "type": "http in",
        "z": "c464cce32785f35b",
        "name": "",
        "url": "3DView",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 830,
        "y": 1060,
        "wires": [
            [
                "b903f23644477b3f"
            ]
        ]
    },
    {
        "id": "476791d642f8a5ef",
        "type": "http response",
        "z": "c464cce32785f35b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ca86c5ea4a9a89ef",
        "type": "inject",
        "z": "c464cce32785f35b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "9e62bc4a9e5c3907",
        "type": "inject",
        "z": "c464cce32785f35b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 820,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "1f3c67f254cc2a9b",
        "type": "inject",
        "z": "c464cce32785f35b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ac92b5ccc4a8c338",
        "type": "catch",
        "z": "c464cce32785f35b",
        "name": "",
        "scope": [
            "41723f48db9af46f",
            "a2803ccb577f2493",
            "51c8dd3a4e1837d9",
            "e5a72b6f40af1d9a",
            "665a56f08aaa0692",
            "ab0591f8e74f81d2"
        ],
        "uncaught": false,
        "x": 1140,
        "y": 940,
        "wires": [
            [
                "04cdd3e3c0a8a0b3"
            ]
        ]
    },
    {
        "id": "833fdf791d1bb0b5",
        "type": "buffer-parser",
        "z": "c464cce32785f35b",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1570,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "1a150adb6f774b58",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "d": true,
        "group": "10ad1fb7bcc90a34",
        "name": "Video",
        "order": 1,
        "width": "19",
        "height": "12",
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n      <style>\n        \n      \n        video {\n          background-color: black;\n          margin-bottom: 1rem;\n        }\n      \n        #error {\n          color: red;\n          padding: 0.6rem;\n          background-color: rgb(236 157 157);\n          margin-bottom: 0.6rem;\n          display: none;\n        }\n      </style>\n \n    <title>GetUserMedia demo</title>\n  <body>\n    <h1> WebRTC getUserMedia() demo</h1>\n  \n    <!-- If you use the playsinline attribute then \n      the video is played \"inline\". If you omit this \n      attribute then it works normal in the desktop\n      browsers, but for the mobile browsers, the video \n      takes the fullscreen by default. And don't forget\n      to use the autoplay attribute-->\n    <video id='video' width=\"600\" height=\"300\" autoplay playsinline>\n      Sorry, video element not supported in your browsers\n    </video>\n    <div id=\"error\"></div>\n    <div id=\"button-container\">\n      <button onclick=\"openCamera()\"> Open Camera</button>\n      <!-- Close Camera button -->\n      <button onclick='closeCamera()'>Close Camera</button>\n    </div>\n  </body>\n</div>\n<script>\n  var count = 0\n  const videoElem = document.getElementById('video');\n  const errorElem = document.getElementById('error');\n  let receivedMediaStream = null;\n  \n  //Declare the MediaStreamConstraints object\n  const constraints = {\n  audio: true,\n  video: true\n  }\n  \n  function openCamera() {\n  //Ask the User for the access of the device camera and microphone\n  navigator.mediaDevices.getUserMedia(constraints)\n  .then(mediaStream => {\n  // The received mediaStream contains both the\n  // video and audio media data\n  navigator.mediaDevices.getUserMedia({video: true})\n  \n  //Add the mediaStream directly to the source of the video element\n  // using the srcObject attribute\n  videoElem.srcObject = mediaStream;\n  \n  // make the received mediaStream available globally\n  receivedMediaStream = mediaStream;\n  \n  }).catch(err => {\n  // handling the error if any\n  errorElem.innerHTML = err;\n  errorElem.style.display = \"block\";\n  });\n  \n  }\n  \n  \n  const closeCamera = () => {\n  if (!receivedMediaStream) {\n  errorElem.innerHTML = \"Camera is already closed!\";\n  errorElem.style.display = \"block\";\n  } else {\n  /* MediaStream.getTracks() returns an array of all the\n  MediaStreamTracks being used in the received mediaStream\n  we can iterate through all the mediaTracks and\n  stop all the mediaTracks by calling its stop() method*/\n  receivedMediaStream.getTracks().forEach(mediaTrack => {\n  mediaTrack.stop();\n  });\n  errorElem.innerHTML = \"Camera closed successfully!\"\n  errorElem.style.display = \"block\";\n  }\n  }\n(function() {\n  \n  //function testit(msg,scope) {\n  //  count = count+1;\n  //  console.log(\"In testit \" + msg.payload + \" count = \" + count);\n  //  scope.send({payload: \"from testit \" + msg.payload + \" count = \" + count});\n  //}\n  (function(scope) {\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      //testit(msg, scope);\n    }\n  });\n})(scope);\n})();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 400,
        "wires": [
            [
                "04cdd3e3c0a8a0b3"
            ]
        ]
    },
    {
        "id": "535d829d54e1a78b",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "d": true,
        "group": "10ad1fb7bcc90a34",
        "name": "Mic",
        "order": 1,
        "width": "19",
        "height": "12",
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n      <style>\n        \n      \n        video {\n          background-color: black;\n          margin-bottom: 1rem;\n        }\n      \n        #error {\n          color: red;\n          padding: 0.6rem;\n          background-color: rgb(236 157 157);\n          margin-bottom: 0.6rem;\n          display: none;\n        }\n      </style>\n \n    <title>GetUserMedia demo</title>\n  <body>\n    <h1> WebRTC getUserMedia() demo</h1>\n  \n    <!-- If you use the playsinline attribute then \n      the video is played \"inline\". If you omit this \n      attribute then it works normal in the desktop\n      browsers, but for the mobile browsers, the video \n      takes the fullscreen by default. And don't forget\n      to use the autoplay attribute-->\n    <video id='video' width=\"600\" height=\"300\" autoplay playsinline>\n      Sorry, video element not supported in your browsers\n    </video>\n    <div id=\"error\"></div>\n    <div id=\"button-container\">\n      <button onclick=\"openCamera()\"> Open Camera</button>\n      <!-- Close Camera button -->\n      <button onclick='closeCamera()'>Close Camera</button>\n    </div>\n  </body>\n</div>\n<script>\n  var count = 0\n  const videoElem = document.getElementById('video');\n  const errorElem = document.getElementById('error');\n  let receivedMediaStream = null;\n  \n  //Declare the MediaStreamConstraints object\n  const constraints = {\n  audio: true,\n  video: true\n  }\n  \n  function openCamera() {\n  //Ask the User for the access of the device camera and microphone\n  navigator.mediaDevices.getUserMedia(constraints)\n  .then(mediaStream => {\n  // The received mediaStream contains both the\n  // video and audio media data\n  \n  //Add the mediaStream directly to the source of the video element\n  // using the srcObject attribute\n  videoElem.srcObject = mediaStream;\n  \n  // make the received mediaStream available globally\n  receivedMediaStream = mediaStream;\n  \n  }).catch(err => {\n  // handling the error if any\n  errorElem.innerHTML = err;\n  errorElem.style.display = \"block\";\n  });\n  \n  }\n  \n  \n  const closeCamera = () => {\n  if (!receivedMediaStream) {\n  errorElem.innerHTML = \"Camera is already closed!\";\n  errorElem.style.display = \"block\";\n  } else {\n  /* MediaStream.getTracks() returns an array of all the\n  MediaStreamTracks being used in the received mediaStream\n  we can iterate through all the mediaTracks and\n  stop all the mediaTracks by calling its stop() method*/\n  receivedMediaStream.getTracks().forEach(mediaTrack => {\n  mediaTrack.stop();\n  });\n  errorElem.innerHTML = \"Camera closed successfully!\"\n  errorElem.style.display = \"block\";\n  }\n  }\n(function() {\n  \n  //function testit(msg,scope) {\n  //  count = count+1;\n  //  console.log(\"In testit \" + msg.payload + \" count = \" + count);\n  //  scope.send({payload: \"from testit \" + msg.payload + \" count = \" + count});\n  //}\n  (function(scope) {\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      //testit(msg, scope);\n    }\n  });\n})(scope);\n})();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 870,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "7992cf3b6a0db948",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "group": "10ad1fb7bcc90a34",
        "name": "Video",
        "order": 1,
        "width": "19",
        "height": "12",
        "format": "<div id=\"mymedia\" style=\"{{'color:'+theme.base_color}}\">\n      <style>\n        \n      \n        video {\n          background-color: black;\n          margin-bottom: 1rem;\n        }\n      \n        #error {\n          color: red;\n          padding: 0.6rem;\n          background-color: rgb(236 157 157);\n          margin-bottom: 0.6rem;\n          display: none;\n        }\n      </style>\n \n    <title>GetUserMedia demo</title>\n  \n    <div id=\"container\">\n  \n      <h1><a href=\"//webrtc.github.io/samples/\" title=\"WebRTC samples homepage\">WebRTC samples</a>\n        <span>MediaRecorder</span>\n      </h1>\n  \n      <p>For more information see the MediaStream Recording API <a\n          href=\"http://w3c.github.io/mediacapture-record/MediaRecorder.html\"\n          title=\"W3C MediaStream Recording API Editor's Draft\">Editor's&nbsp;Draft</a>.</p>\n  \n      <video id=\"gum\" playsinline autoplay muted></video>\n      <video id=\"recorded\" playsinline loop></video>\n  \n      <div>\n        <button id=\"start\">Start camera</button>\n        <button id=\"record\" disabled>Start Recording</button>\n        <button id=\"play\" disabled>Play</button>\n        <button id=\"download\" disabled>Download</button>\n      </div>\n  \n      <div>\n        Recording format: <select id=\"codecPreferences\" disabled></select>\n      </div>\n      <div>\n        <h4>Media Stream Constraints options</h4>\n        <p>Echo cancellation: <input type=\"checkbox\" id=\"echoCancellation\"></p>\n      </div>\n\n      <!--HTMLfrom TechSC -->\n  \n      <div>\n        <span id=\"errorMsg\"></span>\n      </div>\n  \n      <a href=\"https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/record\"\n        title=\"View source for this page on GitHub\" id=\"viewSource\">View source on GitHub</a>\n  \n    </div>\n  \n    <!-- include adapter for srcObject shim -->\n    <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n  \n</div>\n<script>\n    (function(scope,msg) {\n        console.log(scope.global.get(\"projectDir\"))\n        console.log(scope)\n         /*\n        * Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n        *\n        * Use of this source code is governed by a BSD-style license\n        * that can be found in the LICENSE file in the root of the source\n        * tree.\n        */\n        \n        // This code is adapted from\n        // https://rawgit.com/Miguelao/demos/master/mediarecorder.html\n        \n        'use strict';\n        \n        /* globals MediaRecorder */\n        \n        let mediaRecorder;\n        let recordedBlobs;\n        \n        //From TechSC\n        let recordLitleBlob;\n        \n        const codecPreferences = document.querySelector('#codecPreferences');\n        \n        const errorMsgElement = document.querySelector('span#errorMsg');\n        const recordedVideo = document.querySelector('video#recorded');\n        const recordButton = document.querySelector('button#record');\n        recordButton.addEventListener('click', () => {\n        if (recordButton.textContent === 'Start Recording') {\n        startRecording();\n        } else {\n        stopRecording();\n        recordButton.textContent = 'Start Recording';\n        playButton.disabled = false;\n        downloadButton.disabled = false;\n        codecPreferences.disabled = false;\n        }\n        });\n        \n        const playButton = document.querySelector('button#play');\n        playButton.addEventListener('click', () => {\n        const mimeType = codecPreferences.options[codecPreferences.selectedIndex].value.split(';', 1)[0];\n        const superBuffer = new Blob(recordedBlobs, {type: mimeType});\n        recordedVideo.src = null;\n        recordedVideo.srcObject = null;\n        recordedVideo.src = window.URL.createObjectURL(superBuffer);\n        recordedVideo.controls = true;\n        recordedVideo.play();\n        });\n        scope.send({payload:\"test\"})\n        const downloadButton = document.querySelector('button#download');\n        downloadButton.addEventListener('click', () => {\n        const blob = new Blob(recordedBlobs, {type: 'video/webm'});\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url;\n        a.download = 'test.webm';\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(() => {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n        }, 100);\n        });\n        \n        function handleDataAvailable(event) {\n            if (event.data && event.data.size > 0) {\n                recordedBlobs.push(event.data);\n                console.log(event.target.stream.getTracks())\n                scope.send(event.data)\n            }\n        }\n        \n        function getSupportedMimeTypes() {\n          const possibleTypes = [\n            'video/webm;codecs=vp9,opus',\n            'video/webm;codecs=vp8,opus',\n            'video/webm;codecs=h264,opus',\n            'video/mp4;codecs=h264,aac',\n          ];\n          return possibleTypes.filter(mimeType => {\n          return MediaRecorder.isTypeSupported(mimeType);\n          });\n        }\n        \n        function generateUIList(settingWithCoicesInArray){\n          let select = document.createElement('select')\n          for(i=0; i < settingWithCoicesInArray; i++){\n            let option = document.createElement('option');\n            option.text, option.value = settingWithCoicesInArray\n            select.appendChild(option)\n          }\n          return select\n        }\n        scope.send({payload: \"preload\"});\n        function isSupportedConstraints(){\n          let supported = navigator.mediaDevices.getSupportedConstraints();\n          document.querySelector('#mymedia').appendChild(generateUIList(supported))\n        }\n        \n        isSupportedConstraints()\n            \n        //function fron TechSC\n        function recordBlob(blobSize){\n          //setTimeout(() => {()},b)\n          recordedLittleBlob = [];\n          const mimeType = codecPreferences.options[codecPreferences.selectedIndex].value;\n          const options = {mimeType};\n          try {\n            mediaRecorder = new MediaRecorder(window.stream, options);\n          } catch (e) {\n            console.error('Exception while creating MediaRecorder:', e);\n            errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;\n            return;\n          }\n          console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n          mediaRecorder.onstop = (event) => {\n            console.log('Recorder stopped: ', event);\n            console.log('Recorded Blobs: ', recordedBlobs);\n          };\n          window.setInterval(mediaRecorder.requestData(),1000)\n          mediaRecorder.ondataavailable = handleDataAvailable;\n          mediaRecorder.start();\n          console.log('MediaRecorder started', mediaRecorder);\n        }\n        \n        function startRecording() {\n          recordedBlobs = [];\n          const mimeType = codecPreferences.options[codecPreferences.selectedIndex].value;\n          const options = {mimeType};\n          try {\n            mediaRecorder = new MediaRecorder(window.stream, options);\n          } catch (e) {\n              console.error('Exception while creating MediaRecorder:', e);\n              errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;\n              return;\n            } \n          console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n          recordButton.textContent = 'Stop Recording';\n          playButton.disabled = true;\n          downloadButton.disabled = true;\n          codecPreferences.disabled = true;\n          mediaRecorder.onstop = (event) => {\n            console.log('Recorder stopped: ', event);\n            console.log('Recorded Blobs: ', recordedBlobs);\n          };\n          mediaRecorder.ondataavailable = handleDataAvailable;\n          mediaRecorder.start(2000);\n          console.log('MediaRecorder started', mediaRecorder);\n        }\n        \n        function stopRecording() {\n        mediaRecorder.stop();\n        }\n        \n        function handleSuccess(stream) {\n            recordButton.disabled = false;\n            console.log('getUserMedia() got stream:', stream);\n            window.stream = stream;\n            \n            const gumVideo = document.querySelector('video#gum');\n            gumVideo.srcObject = stream;\n            \n            getSupportedMimeTypes().forEach(mimeType => {\n            const option = document.createElement('option');\n            option.value = mimeType;\n            option.innerText = option.value;\n            codecPreferences.appendChild(option);\n            });\n            codecPreferences.disabled = false;\n        }\n        \n        async function init(constraints) {\n          try {\n            const stream = await navigator.mediaDevices.getUserMedia(constraints);\n            handleSuccess(stream);\n          } catch (e) {\n            console.error('navigator.getUserMedia error:', e);\n            errorMsgElement.innerHTML = `navigator.getUserMedia error:${e.toString()}`;\n          }\n        }\n        \n        document.querySelector('button#start').addEventListener('click', async () => {\n            document.querySelector('button#start').disabled = true;\n            const hasEchoCancellation = document.querySelector('#echoCancellation').checked;\n            const constraints = {\n                audio: {\n                    echoCancellation: {exact: hasEchoCancellation}\n                },\n                video: {\n                    width: 1280, height: 720\n                }\n            };\n            console.log('Using media constraints:', constraints);\n            await init(constraints);\n        });\n        scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n            //testit(msg, scope);\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1350,
        "y": 440,
        "wires": [
            [
                "04cdd3e3c0a8a0b3"
            ]
        ]
    },
    {
        "id": "905cd6c2a090723d",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "group": "219ad68d9fd685f8",
        "name": "Audio",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n    \n        <div id=\"container\">\n    \n            <h1><a href=\"//webrtc.github.io/samples/\" title=\"WebRTC samples homepage\">WebRTC samples</a>\n                <span>getUserMedia, audio only</span>\n            </h1>\n    \n            <audio id=\"gum-local\" controls autoplay></audio>\n    \n            <p class=\"warning\">Warning: if you're not using headphones, pressing play will cause feedback.</p>\n    \n            <p>Render the audio stream from an audio-only <code>getUserMedia()</code> call with an audio element.</p>\n    \n            <p>The <code>MediaStream</code> object <code><em>stream</em></code> passed to the <code>getUserMedia()</code>\n                callback is in global scope, so you can inspect it from the console.</p>\n            <div>\n                <span id=\"errorMsg\"></span>\n            </div>\n    \n            <a href=\"https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/audio\"\n                title=\"View source for this page on GitHub\" id=\"viewSource\">View source on GitHub</a>\n    \n        </div>\n    \n        <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n</div>\n<script>\n\n  (function(scope) {\n    /*\n    * Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n    *\n    * Use of this source code is governed by a BSD-style license\n    * that can be found in the LICENSE file in the root of the source\n    * tree.\n    */\n    \n    'use strict';\n    \n    // Put variables in global scope to make them available to the browser console.\n    const audio = document.querySelector('audio');\n    \n    const constraints = window.constraints = {\n        audio: true,\n        video: false\n    };\n\n    function handleSuccess(stream) {\n        const audioTracks = stream.getAudioTracks();\n        console.log('Got stream with constraints:', constraints);\n        console.log('Using audio device: ' + audioTracks[0].label);\n        stream.oninactive = function() {\n            console.log('Stream ended');\n        };\n        window.stream = stream; // make variable available to browser console\n        audio.srcObject = stream;\n    }\n    \n    function handleError(error) {\n        const errorMessage = 'navigator.MediaDevices.getUserMedia error: ' + error.message + ' ' + error.name;\n        document.getElementById('errorMsg').innerText = errorMessage;\n        console.log(errorMessage);\n    }\n    \n    function startRecording() {\n          recordedBlobs = [];\n          const mimeType = codecPreferences.options[codecPreferences.selectedIndex].value;\n          const options = {mimeType};\n          try {\n            mediaRecorder = new MediaRecorder(window.stream, options);\n          } catch (e) {\n              console.error('Exception while creating MediaRecorder:', e);\n              errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;\n              return;\n            } \n          console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n          recordButton.textContent = 'Stop Recording';\n          playButton.disabled = true;\n          downloadButton.disabled = true;\n          codecPreferences.disabled = true;\n          mediaRecorder.onstop = (event) => {\n            console.log('Recorder stopped: ', event);\n            console.log('Recorded Blobs: ', recordedBlobs);\n          };\n          mediaRecorder.ondataavailable = handleDataAvailable;\n          mediaRecorder.start(2000);\n          console.log('MediaRecorder started', mediaRecorder);\n    }\n    //navigator.mediaDevices.getUserMedia(constraints).then((devices) =>{\n    //    console.log(devices);\n    //     handleSuccess;\n    //}).catch(handleError);\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      //testit(msg, scope);\n    }\n  });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1350,
        "y": 380,
        "wires": [
            [
                "04cdd3e3c0a8a0b3"
            ]
        ]
    },
    {
        "id": "f1f22f29299f17b9",
        "type": "ui_template",
        "z": "c464cce32785f35b",
        "d": true,
        "group": "219ad68d9fd685f8",
        "name": "video cam ptz",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n    <body>\n    \n      <div id=\"container\">\n        <h1><a href=\"//webrtc.github.io/samples/\" title=\"WebRTC samples homepage\">WebRTC samples</a>\n          <span>Control Pan-Tilt-Zoom Camera</span>\n        </h1>\n    \n        <video id=\"gum-local\" autoplay playsinline></video>\n        <button id=\"showVideo\">Open camera</button>\n    \n        <div>\n          <div class=\"label\">Pan:</div>\n          <input name=\"pan\" type=\"range\" disabled>\n        </div>\n        <div>\n          <div class=\"label\">Tilt:</div>\n          <input name=\"tilt\" type=\"range\" disabled>\n        </div>\n        <div>\n          <div class=\"label\">Zoom:</div>\n          <input name=\"zoom\" type=\"range\" disabled>\n        </div>\n    \n        <div id=\"errorMsg\"></div>\n    \n        <p>Display the video stream from <code>getUserMedia()</code> in a video\n          element and control pan, tilt, and zoom if camera supports Pan-Tilt-Zoom.</p>\n    \n        <p>The <code>MediaStreamTrack</code> object <code>track</code> is in\n          global scope, so you can inspect it from the console.</p>\n    \n        <a href=\"https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/pan-tilt-zoom\"\n          title=\"View source for this page on GitHub\" id=\"viewSource\">View source on GitHub</a>\n      </div>\n    \n      <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n\n    \n    </body>\n</div>\n<script>\n/*\n* Copyright (c) 2020 The WebRTC project authors. All Rights Reserved.\n*\n* Use of this source code is governed by a BSD-style license\n* that can be found in the LICENSE file in the root of the source\n* tree.\n*/\n'use strict';\n\n// Put variables in global scope to make them available to the browser console.\nconst constraints = window.constraints = {\nvideo: {\npan: true, tilt: true, zoom: true\n}\n};\n\nfunction handleSuccess(stream) {\nconst video = document.querySelector('video');\nconst videoTracks = stream.getVideoTracks();\nconsole.log('Got stream with constraints:', constraints);\nconsole.log(`Using video device: ${videoTracks[0].label}`);\nvideo.srcObject = stream;\n\n// make track variable available to browser console.\nconst [track] = [window.track] = stream.getVideoTracks();\nconst capabilities = track.getCapabilities();\nconst settings = track.getSettings();\n\nfor (const ptz of ['pan', 'tilt', 'zoom']) {\n// Check whether camera supports pan/tilt/zoom.\nif (!(ptz in settings)) {\nerrorMsg(`Camera does not support ${ptz}.`);\ncontinue;\n}\n\n// Map it to a slider element.\nconst input = document.querySelector(`input[name=${ptz}]`);\ninput.min = capabilities[ptz].min;\ninput.max = capabilities[ptz].max;\ninput.step = capabilities[ptz].step;\ninput.value = settings[ptz];\ninput.disabled = false;\ninput.oninput = async event => {\ntry {\nconst constraints = {advanced: [{[ptz]: input.value}]};\nawait track.applyConstraints(constraints);\n} catch (err) {\nconsole.error('applyConstraints() failed: ', err);\n}\n};\n}\n}\n\nfunction handleError(error) {\nif (error.name === 'NotAllowedError') {\nerrorMsg('Permissions have not been granted to use your camera, ' +\n'you need to allow the page access to your devices in ' +\n'order for the demo to work.');\n}\nerrorMsg(`getUserMedia error: ${error.name}`, error);\n}\n\nfunction errorMsg(msg, error) {\nconst errorElement = document.querySelector('#errorMsg');\nerrorElement.innerHTML += `<p>${msg}</p>`;\nif (typeof error !== 'undefined') {\nconsole.error(error);\n}\n}\n\nasync function init(e) {\ntry {\nconst stream = await navigator.mediaDevices.getUserMedia(constraints);\nhandleSuccess(stream);\ne.target.disabled = true;\n} catch (e) {\nhandleError(e);\n}\n}\n\ndocument.querySelector('#showVideo').addEventListener('click', e => init(e));\n(function() {\n  (function(scope) {\n    scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    scope.$watch('msg', function(msg) {\n    if (msg) {\n      //testit(msg, scope);\n    }\n  });\n})(scope);\n})();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b9f786b59a0b58f6",
        "type": "template",
        "z": "c464cce32785f35b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 1100,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "43e41c9e709070a6",
        "type": "mqtt in",
        "z": "c464cce32785f35b",
        "name": "",
        "topic": "hermes/audioServer/toggleOn",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "91f1b589e74d876c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1380,
        "y": 220,
        "wires": [
            [
                "618169e711245420"
            ]
        ]
    },
    {
        "id": "618169e711245420",
        "type": "debug",
        "z": "c464cce32785f35b",
        "name": "debug 141",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 300,
        "wires": []
    },
    {
        "id": "d851f6856439bb51",
        "type": "ui_template",
        "z": "ebafe26feeec49ee",
        "group": "c321b890973a1573",
        "name": "",
        "order": 1,
        "width": "50",
        "height": "33",
        "format": "\n\n        <title>Babylon Template</title>\n\n        <style>\n            html, body {\n                overflow: hidden;\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }\n\n            #renderCanvas {\n                width: 100%;\n                height: 100%;\n                touch-action: none;\n            }\n        </style>\n\n        <!-- <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n        <script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n        <script src=\"https://code.jquery.com/pep/0.4.3/pep.js\"></script> -->\n\n\n        <div id=\"{{'my_'+$id}}\" style=\"{{'color:'+theme.base_color}}\">\n\n    <canvas id=\"renderCanvas\" touch-action=\"none\"></canvas> <!-- touch-action=\"none\" for best results from PEP -->\n        </div>\n\n    <script>\n        (function(scope,msg){\n            console.log(scope.$id)\n        //declare function\n        const canvasBabylon = document.getElementById(\"renderCanvas\"); // Get the canvas element\n        const engineBabylon = new BABYLON.Engine(canvasBabylon, true); // Generate the BABYLON 3D engine\n        \n        // Add your code here matching the playground format\n        var createScene = function() {\n            var scene = new BABYLON.Scene(engineBabylon);\n            const camera = new BABYLON.ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 3, new BABYLON.Vector3(0, 0, 0), scene);\n            camera.attachControl(renderCanvas, true);\n            const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n            scene.onPointerObservable.add((pointerInfo) => {      \t\t\n                switch (pointerInfo.type) {\n\t\t\t        //case BABYLON.PointerEventTypes.POINTERDOWN:\n\t\t\t\t    //    if(pointerInfo.pickInfo.hit && pointerInfo.pickInfo.pickedMesh != ground) {\n                    //        pointerDown(pointerInfo.pickInfo.pickedMesh)\n                    //    }\n\t\t\t\t    //    break;\n\t\t\t        //case BABYLON.PointerEventTypes.POINTERUP:\n                    //    pointerUp();\n\t\t\t\t    //    break;\n\t\t\t        //case BABYLON.PointerEventTypes.POINTERMOVE:          \n                    //    pointerMove();\n\t\t\t\t    //    break;\n                }\n            });\n            return scene\n           \n        };\n\n\n        const sceneBabylon = createScene(); //Call the createScene function\n\n        // Register a render loop to repeatedly render the scene\n        engineBabylon.runRenderLoop(function () {\n                sceneBabylon.render();\n        });\n\n        // Watch for browser/canvas resize events\n        window.addEventListener(\"resize\", function () {\n                engineBabylon.resize();\n        });\n        //do some stuff at boot\n        //Part on Message AND on relaod if YOU SET reload last value on refresh on THIS NODE\n        //The $watch is leave because if you dont use ui template node that gonna be an entry on websocket or mqqt for exmple \n            scope.$watch('msg', function(msg) {\n                //if you put someting outise the if below that gonna be run on page reload if reload last value on refresh\n                if (msg) {\n                    \n                }\n                //NO CODE\n            })\n        })(scope);\n        \n    </script>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "9f64324540e4e391",
        "type": "ui_template",
        "z": "ebafe26feeec49ee",
        "group": "297b1964920fbcef",
        "name": "Load local cdn",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<script src=\"/cdn/babylonjs/babylon.js\"></script>\n<script src=\"/cdn/babylonjs/babylonjs.loaders.min.js\"></script>\n<script src=\"/cdn/pepjs/pep.js\"></script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 420,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b8a8dab813c086ce",
        "type": "inject",
        "z": "ebafe26feeec49ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 160,
        "wires": [
            [
                "24b53e40ae6720ed"
            ]
        ]
    },
    {
        "id": "24b53e40ae6720ed",
        "type": "function",
        "z": "ebafe26feeec49ee",
        "name": "function 14",
        "func": "let cdns = [\n    \"https://cdn.babylonjs.com/babylon.js\",\n    \"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\",\n    \"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\",\n]\nfor(let i=0; i<cdns.length;i++){\n    let filename = cdns[i].substring(cdns[i].lastIndexOf(\"/\")+1);\n    let cdn = {}\n    msg.url = cdns[i]\n    msg.filename = global.get(\"projectDir\")+'/cdn/monaco-editor/'+filename\n    node.send(msg)\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "6abd048f47cee4c3"
            ]
        ]
    },
    {
        "id": "6abd048f47cee4c3",
        "type": "http request",
        "z": "ebafe26feeec49ee",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "bd506e54533e0b3d"
            ]
        ]
    },
    {
        "id": "bd506e54533e0b3d",
        "type": "file",
        "z": "ebafe26feeec49ee",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 720,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "229282bd8fe440c1",
        "type": "file",
        "z": "b52d06897a68ca8c",
        "name": "",
        "filename": "/home/vicky/.node-red/projects/techscorangepi/cdn/monaco-editor/loader.min.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 700,
        "y": 260,
        "wires": [
            [
                "c8e3a16e7225ca23"
            ]
        ]
    },
    {
        "id": "374194b8d831d30b",
        "type": "http request",
        "z": "b52d06897a68ca8c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs/loader.min.js\"",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 280,
        "wires": [
            [
                "229282bd8fe440c1"
            ]
        ]
    },
    {
        "id": "593ff95ec6da4b1a",
        "type": "inject",
        "z": "b52d06897a68ca8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "374194b8d831d30b"
            ]
        ]
    },
    {
        "id": "c8e3a16e7225ca23",
        "type": "debug",
        "z": "b52d06897a68ca8c",
        "name": "debug 139",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 380,
        "wires": []
    },
    {
        "id": "a73c0537f0828da0",
        "type": "catch",
        "z": "b52d06897a68ca8c",
        "name": "",
        "scope": [
            "229282bd8fe440c1",
            "374194b8d831d30b",
            "9853f1497609b1d8"
        ],
        "uncaught": false,
        "x": 750,
        "y": 400,
        "wires": [
            [
                "c8e3a16e7225ca23"
            ]
        ]
    },
    {
        "id": "068945106f09d2b0",
        "type": "file",
        "z": "b52d06897a68ca8c",
        "name": "",
        "filename": "/home/vicky/.node-red/projects/techscorangepi/cdn/monaco-editor/loader.min.js",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 660,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "7e6ffd352c94a590",
        "type": "function",
        "z": "b52d06897a68ca8c",
        "name": "function 13",
        "func": "let cdns = [\n    \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/loader.min.js\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor/editor.main.min.css\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor/editor.main.min.js\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor/editor.main.js\"\n]\nfor(let i=0; i<cdns.length;i++){\n    let filename = cdns[i].substring(cdns[i].lastIndexOf(\"/\")+1);\n    let cdn = {}\n    msg.url = cdns[i]\n    msg.filename = global.get(\"projectDir\")+'/cdn/monaco-editor/'+filename\n    node.send(msg)\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 460,
        "wires": [
            [
                "09474a3e7196c3d5"
            ]
        ]
    },
    {
        "id": "fe4a89a2881fa76f",
        "type": "debug",
        "z": "b52d06897a68ca8c",
        "name": "debug 140",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 540,
        "wires": []
    },
    {
        "id": "344901047d8e0c8d",
        "type": "inject",
        "z": "b52d06897a68ca8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 540,
        "wires": [
            [
                "7e6ffd352c94a590"
            ]
        ]
    },
    {
        "id": "9853f1497609b1d8",
        "type": "file",
        "z": "b52d06897a68ca8c",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 580,
        "y": 480,
        "wires": [
            [
                "c8e3a16e7225ca23"
            ]
        ]
    },
    {
        "id": "09474a3e7196c3d5",
        "type": "http request",
        "z": "b52d06897a68ca8c",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "fe4a89a2881fa76f",
                "9853f1497609b1d8"
            ]
        ]
    },
    {
        "id": "c63eb9419245c180",
        "type": "ui_template",
        "z": "b52d06897a68ca8c",
        "d": true,
        "group": "d229163f35bc3e17",
        "name": "",
        "order": 1,
        "width": 6,
        "height": 33,
        "format": "\n\t\t<div>\n\t\t\t<h2>Text editor</h2>\n\t\t\t<div id=\"container\" style=\"width: auto; height: 600px; border: 1px solid grey; background: rgb(62, 55, 55);\"></div>\n\t\t\t<div>\n\t\t\t\t<form action=\"\" method=\"get\" class=\"form\" id=\"openFile\">\n\t\t\t\t\t<div class=\"form\">\n\t\t\t\t\t  <input type=\"text\" name=\"filename\" id=\"filename\"  placeholder=\"FilePath\" required>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form\">\n\t\t\t\t\t  <input type=\"submit\" value=\"Open file\">\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<form action=\"\" method=\"get\" class=\"form\" id=\"sendFile\">\n\t\t\t\t\t<div class=\"form\">\n\t\t\t\t\t  <input type=\"submit\" value=\"Send file\">\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"render\">\n\t\t\t<h2>Render</h2>\n\t\t</div>\n\t\t\n\t\t<!-- OR ANY OTHER AMD LOADER HERE INSTEAD OF loader.js -->\n\t\t<script src=\"/node_modules/monaco-editor/min/vs/loader.js\"></script>\n\t\t<script>\n\t\t\t//require.config({ paths: { vs: '../node_modules/monaco-editor/min/vs' } });\n\t\t\tvar editor\n\t\t\t//require(['vs/editor/editor.main'], function () {\n\t\t\t\teditor = monaco.editor.create(document.getElementById('container'), {\n\t\t\t\t\tvalue: ['function x() {', '\\tconsole.log(\"Hello world!\");', '}'].join('\\n'),\n\t\t\t\t\tlanguage: 'javascript'\n\t\t\t\t});\n\t\t\t\tvar form = document.getElementById(\"openFile\");\n\t\t\t\tfunction loadFile(event){\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tvar filePath = (document.getElementById('filename').value)\n\t\t\t\t\tconsole.log(filePath)\n\t\t\t\t\t//http.get(filePath)\n\t\t\t\t\tPromise.all([xhr('http://192.168.1.21:1880/getFile',filePath)]).then(function (r) {\n\n\t\t\t\t\t\tconsole.log(r)\n\t\t\t\t\t\tif(r[0].response.substring(0,4).includes(\"Error\")){\n\t\t\t\t\t\t\talert(r[0].response)\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tvar modelFormat\n\t\t\t\t\t\t\tif(filePath.includes(\".js\")){\n\t\t\t\t\t\t\t\tvar script = document.createElement(\"script\")\n\t\t\t\t\t\t\t\tscript.textContent = r[0].response\n\t\t\t\t\t\t\t\tdocument.getElementById('render').insertAdjacentElement(\"beforeend\",script)\n\t\t\t\t\t\t\t\tmodelFormat = \"javascript\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(filePath.includes(\".html\")){\n\t\t\t\t\t\t\t\tconsole.log(\"in html\")\n\t\t\t\t\t\t\t\tif(filePath !== \"monaco-editor/samples/browser-amd-editor/index.html\"){\n\t\t\t\t\t\t\t\t\tdocument.getElementById('render').insertAdjacentHTML(\"beforeend\",r[0].response)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmodelFormat = \"html\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar originalTxt = r[0].responseText;\n\t\t\t\t\t\t\t//var modifiedTxt = r[1].responseText;\n\n\t\t\t\t\t\t\teditor.setModel(monaco.editor.createModel(originalTxt, modelFormat));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\t\n\t\t\t\tform.addEventListener('submit', loadFile);\n\t\t\t//});\n\n\t\t\tvar form = document.getElementById(\"sendFile\");\n\t\t\tform.addEventListener('submit', sendFile);\n\t\t\tfunction sendFile(event){\n\t\t\t\tevent.preventDefault();\n\t\t\t\tconsole.log(\"coucou\")\n\t\t\t\tvar filePath = (document.getElementById('filename').value)\n\t\t\t\tvar value = editor.getValue()\n\t\t\t\txhr('http://192.168.1.21:1880/postFile',JSON.stringify({\"filePath\":filePath, 'value': value})).then((r) => {\n\t\t\t\t\tconsole.log(r.response)\n\t\t\t\t\tif(r.response.includes(\"Error\")){\n\t\t\t\t\t\talert(r.response)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\n\t\t\t\n\n\t\t</script>\n\t\t<script>\n\t\t\t\n\n\t\t\tfunction xhr(url,body) {\n\t\t\t\tvar req = null;\n\t\t\t\treturn new Promise(\n\t\t\t\t\tfunction (c, e) {\n\t\t\t\t\t\treq = new XMLHttpRequest();\n\t\t\t\t\t\t\n\t\t\t\t\t\treq.onreadystatechange = function () {\n\t\t\t\t\t\t\tif (req._canceled) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (req.readyState === 4) {\n\t\t\t\t\t\t\t\tif ((req.status >= 200 && req.status < 300) || req.status === 1223) {\n\t\t\t\t\t\t\t\t\tc(req);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\te(req);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treq.onreadystatechange = function () {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treq.open('POST', url, true);\n\t\t\t\t\t\treq.responseType = '';\n\t\t\t\t\t\tconsole.log(body)\n\t\t\t\t\t\treq.send(body);\n\t\t\t\t\t},\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\treq._canceled = true;\n\t\t\t\t\t\treq.abort();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t</script>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 540,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "29fc1c90f17c315e",
        "type": "ui_template",
        "z": "b52d06897a68ca8c",
        "d": true,
        "group": "297b1964920fbcef",
        "name": "Load local cdn",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<script src=\"/cdn/monaco-editor/loader.min.js\"></script>\n<script src=\"/cdn/monaco-editor/editor.main.min.js\"></script>\n<script src=\"/cdn/monaco-editor/editor.main.min.css\"></script>\n<script src=\"/cdn/monaco-editor/editor.main.js\"></script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 300,
        "y": 60,
        "wires": [
            []
        ]
    }
]